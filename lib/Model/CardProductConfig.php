<?php
/**
 * CardProductConfig
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardProductConfig Class Doc Comment
 *
 * @category Class
 * @description Defines the characteristics of the card product. Configurations are conditionally required based on program setup.  For more information, contact your Marqeta representative.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardProductConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_product_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_life_cycle' => '\OpenAPI\Client\Model\CardLifeCycle',
        'clearing_and_settlement' => '\OpenAPI\Client\Model\ClearingAndSettlement',
        'digital_wallet_tokenization' => '\OpenAPI\Client\Model\DigitalWalletTokenization',
        'fulfillment' => '\OpenAPI\Client\Model\CardProductFulfillment',
        'jit_funding' => '\OpenAPI\Client\Model\JitFunding',
        'poi' => '\OpenAPI\Client\Model\Poi',
        'selective_auth' => '\OpenAPI\Client\Model\SelectiveAuth',
        'special' => '\OpenAPI\Client\Model\Special',
        'transaction_controls' => '\OpenAPI\Client\Model\TransactionControls'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_life_cycle' => null,
        'clearing_and_settlement' => null,
        'digital_wallet_tokenization' => null,
        'fulfillment' => null,
        'jit_funding' => null,
        'poi' => null,
        'selective_auth' => null,
        'special' => null,
        'transaction_controls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_life_cycle' => 'card_life_cycle',
        'clearing_and_settlement' => 'clearing_and_settlement',
        'digital_wallet_tokenization' => 'digital_wallet_tokenization',
        'fulfillment' => 'fulfillment',
        'jit_funding' => 'jit_funding',
        'poi' => 'poi',
        'selective_auth' => 'selective_auth',
        'special' => 'special',
        'transaction_controls' => 'transaction_controls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_life_cycle' => 'setCardLifeCycle',
        'clearing_and_settlement' => 'setClearingAndSettlement',
        'digital_wallet_tokenization' => 'setDigitalWalletTokenization',
        'fulfillment' => 'setFulfillment',
        'jit_funding' => 'setJitFunding',
        'poi' => 'setPoi',
        'selective_auth' => 'setSelectiveAuth',
        'special' => 'setSpecial',
        'transaction_controls' => 'setTransactionControls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_life_cycle' => 'getCardLifeCycle',
        'clearing_and_settlement' => 'getClearingAndSettlement',
        'digital_wallet_tokenization' => 'getDigitalWalletTokenization',
        'fulfillment' => 'getFulfillment',
        'jit_funding' => 'getJitFunding',
        'poi' => 'getPoi',
        'selective_auth' => 'getSelectiveAuth',
        'special' => 'getSpecial',
        'transaction_controls' => 'getTransactionControls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_life_cycle'] = $data['card_life_cycle'] ?? null;
        $this->container['clearing_and_settlement'] = $data['clearing_and_settlement'] ?? null;
        $this->container['digital_wallet_tokenization'] = $data['digital_wallet_tokenization'] ?? null;
        $this->container['fulfillment'] = $data['fulfillment'] ?? null;
        $this->container['jit_funding'] = $data['jit_funding'] ?? null;
        $this->container['poi'] = $data['poi'] ?? null;
        $this->container['selective_auth'] = $data['selective_auth'] ?? null;
        $this->container['special'] = $data['special'] ?? null;
        $this->container['transaction_controls'] = $data['transaction_controls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_life_cycle
     *
     * @return \OpenAPI\Client\Model\CardLifeCycle|null
     */
    public function getCardLifeCycle()
    {
        return $this->container['card_life_cycle'];
    }

    /**
     * Sets card_life_cycle
     *
     * @param \OpenAPI\Client\Model\CardLifeCycle|null $card_life_cycle card_life_cycle
     *
     * @return self
     */
    public function setCardLifeCycle($card_life_cycle)
    {
        $this->container['card_life_cycle'] = $card_life_cycle;

        return $this;
    }

    /**
     * Gets clearing_and_settlement
     *
     * @return \OpenAPI\Client\Model\ClearingAndSettlement|null
     */
    public function getClearingAndSettlement()
    {
        return $this->container['clearing_and_settlement'];
    }

    /**
     * Sets clearing_and_settlement
     *
     * @param \OpenAPI\Client\Model\ClearingAndSettlement|null $clearing_and_settlement clearing_and_settlement
     *
     * @return self
     */
    public function setClearingAndSettlement($clearing_and_settlement)
    {
        $this->container['clearing_and_settlement'] = $clearing_and_settlement;

        return $this;
    }

    /**
     * Gets digital_wallet_tokenization
     *
     * @return \OpenAPI\Client\Model\DigitalWalletTokenization|null
     */
    public function getDigitalWalletTokenization()
    {
        return $this->container['digital_wallet_tokenization'];
    }

    /**
     * Sets digital_wallet_tokenization
     *
     * @param \OpenAPI\Client\Model\DigitalWalletTokenization|null $digital_wallet_tokenization digital_wallet_tokenization
     *
     * @return self
     */
    public function setDigitalWalletTokenization($digital_wallet_tokenization)
    {
        $this->container['digital_wallet_tokenization'] = $digital_wallet_tokenization;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Model\CardProductFulfillment|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Model\CardProductFulfillment|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets jit_funding
     *
     * @return \OpenAPI\Client\Model\JitFunding|null
     */
    public function getJitFunding()
    {
        return $this->container['jit_funding'];
    }

    /**
     * Sets jit_funding
     *
     * @param \OpenAPI\Client\Model\JitFunding|null $jit_funding jit_funding
     *
     * @return self
     */
    public function setJitFunding($jit_funding)
    {
        $this->container['jit_funding'] = $jit_funding;

        return $this;
    }

    /**
     * Gets poi
     *
     * @return \OpenAPI\Client\Model\Poi|null
     */
    public function getPoi()
    {
        return $this->container['poi'];
    }

    /**
     * Sets poi
     *
     * @param \OpenAPI\Client\Model\Poi|null $poi poi
     *
     * @return self
     */
    public function setPoi($poi)
    {
        $this->container['poi'] = $poi;

        return $this;
    }

    /**
     * Gets selective_auth
     *
     * @return \OpenAPI\Client\Model\SelectiveAuth|null
     */
    public function getSelectiveAuth()
    {
        return $this->container['selective_auth'];
    }

    /**
     * Sets selective_auth
     *
     * @param \OpenAPI\Client\Model\SelectiveAuth|null $selective_auth selective_auth
     *
     * @return self
     */
    public function setSelectiveAuth($selective_auth)
    {
        $this->container['selective_auth'] = $selective_auth;

        return $this;
    }

    /**
     * Gets special
     *
     * @return \OpenAPI\Client\Model\Special|null
     */
    public function getSpecial()
    {
        return $this->container['special'];
    }

    /**
     * Sets special
     *
     * @param \OpenAPI\Client\Model\Special|null $special special
     *
     * @return self
     */
    public function setSpecial($special)
    {
        $this->container['special'] = $special;

        return $this;
    }

    /**
     * Gets transaction_controls
     *
     * @return \OpenAPI\Client\Model\TransactionControls|null
     */
    public function getTransactionControls()
    {
        return $this->container['transaction_controls'];
    }

    /**
     * Sets transaction_controls
     *
     * @param \OpenAPI\Client\Model\TransactionControls|null $transaction_controls transaction_controls
     *
     * @return self
     */
    public function setTransactionControls($transaction_controls)
    {
        $this->container['transaction_controls'] = $transaction_controls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


