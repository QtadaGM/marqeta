<?php
/**
 * Network
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Network Class Doc Comment
 *
 * @category Class
 * @description Contains information from the card network about currency conversion, including the original currency of the transaction, the amount of the transaction in the original currency, and the conversion rate.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Network implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversion_rate' => 'float',
        'dynamic_currency_conversion' => 'bool',
        'original_amount' => 'float',
        'original_currency_code' => 'string',
        'settlement_data' => '\OpenAPI\Client\Model\SettlementData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversion_rate' => null,
        'dynamic_currency_conversion' => null,
        'original_amount' => null,
        'original_currency_code' => null,
        'settlement_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversion_rate' => 'conversion_rate',
        'dynamic_currency_conversion' => 'dynamic_currency_conversion',
        'original_amount' => 'original_amount',
        'original_currency_code' => 'original_currency_code',
        'settlement_data' => 'settlement_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversion_rate' => 'setConversionRate',
        'dynamic_currency_conversion' => 'setDynamicCurrencyConversion',
        'original_amount' => 'setOriginalAmount',
        'original_currency_code' => 'setOriginalCurrencyCode',
        'settlement_data' => 'setSettlementData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversion_rate' => 'getConversionRate',
        'dynamic_currency_conversion' => 'getDynamicCurrencyConversion',
        'original_amount' => 'getOriginalAmount',
        'original_currency_code' => 'getOriginalCurrencyCode',
        'settlement_data' => 'getSettlementData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversion_rate'] = $data['conversion_rate'] ?? null;
        $this->container['dynamic_currency_conversion'] = $data['dynamic_currency_conversion'] ?? false;
        $this->container['original_amount'] = $data['original_amount'] ?? null;
        $this->container['original_currency_code'] = $data['original_currency_code'] ?? null;
        $this->container['settlement_data'] = $data['settlement_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversion_rate
     *
     * @return float|null
     */
    public function getConversionRate()
    {
        return $this->container['conversion_rate'];
    }

    /**
     * Sets conversion_rate
     *
     * @param float|null $conversion_rate Conversion rate between the origination currency and the settlement currency.  Returned when the transaction currency is different from the origination currency.
     *
     * @return self
     */
    public function setConversionRate($conversion_rate)
    {
        $this->container['conversion_rate'] = $conversion_rate;

        return $this;
    }

    /**
     * Gets dynamic_currency_conversion
     *
     * @return bool|null
     */
    public function getDynamicCurrencyConversion()
    {
        return $this->container['dynamic_currency_conversion'];
    }

    /**
     * Sets dynamic_currency_conversion
     *
     * @param bool|null $dynamic_currency_conversion Indicates whether currency conversion was performed dynamically at the point of sale.
     *
     * @return self
     */
    public function setDynamicCurrencyConversion($dynamic_currency_conversion)
    {
        $this->container['dynamic_currency_conversion'] = $dynamic_currency_conversion;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return float|null
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param float|null $original_amount Amount of the transaction in the currency in which it originated.
     *
     * @return self
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets original_currency_code
     *
     * @return string|null
     */
    public function getOriginalCurrencyCode()
    {
        return $this->container['original_currency_code'];
    }

    /**
     * Sets original_currency_code
     *
     * @param string|null $original_currency_code Currency type of the origination currency.
     *
     * @return self
     */
    public function setOriginalCurrencyCode($original_currency_code)
    {
        $this->container['original_currency_code'] = $original_currency_code;

        return $this;
    }

    /**
     * Gets settlement_data
     *
     * @return \OpenAPI\Client\Model\SettlementData|null
     */
    public function getSettlementData()
    {
        return $this->container['settlement_data'];
    }

    /**
     * Sets settlement_data
     *
     * @param \OpenAPI\Client\Model\SettlementData|null $settlement_data settlement_data
     *
     * @return self
     */
    public function setSettlementData($settlement_data)
    {
        $this->container['settlement_data'] = $settlement_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


