<?php
/**
 * CommandoModeEnables
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CommandoModeEnables Class Doc Comment
 *
 * @category Class
 * @description Defines program behavior when Commando Mode is enabled.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CommandoModeEnables implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'commando_mode_enables';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auth_controls' => 'string[]',
        'ignore_card_suspended_state' => 'bool',
        'program_funding_source' => 'string',
        'use_cache_balance' => 'bool',
        'velocity_controls' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auth_controls' => null,
        'ignore_card_suspended_state' => null,
        'program_funding_source' => null,
        'use_cache_balance' => null,
        'velocity_controls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_controls' => 'auth_controls',
        'ignore_card_suspended_state' => 'ignore_card_suspended_state',
        'program_funding_source' => 'program_funding_source',
        'use_cache_balance' => 'use_cache_balance',
        'velocity_controls' => 'velocity_controls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_controls' => 'setAuthControls',
        'ignore_card_suspended_state' => 'setIgnoreCardSuspendedState',
        'program_funding_source' => 'setProgramFundingSource',
        'use_cache_balance' => 'setUseCacheBalance',
        'velocity_controls' => 'setVelocityControls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_controls' => 'getAuthControls',
        'ignore_card_suspended_state' => 'getIgnoreCardSuspendedState',
        'program_funding_source' => 'getProgramFundingSource',
        'use_cache_balance' => 'getUseCacheBalance',
        'velocity_controls' => 'getVelocityControls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_controls'] = $data['auth_controls'] ?? null;
        $this->container['ignore_card_suspended_state'] = $data['ignore_card_suspended_state'] ?? false;
        $this->container['program_funding_source'] = $data['program_funding_source'] ?? null;
        $this->container['use_cache_balance'] = $data['use_cache_balance'] ?? false;
        $this->container['velocity_controls'] = $data['velocity_controls'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['program_funding_source'] === null) {
            $invalidProperties[] = "'program_funding_source' can't be null";
        }
        if (!is_null($this->container['velocity_controls']) && (count($this->container['velocity_controls']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'velocity_controls', number of items must be less than or equal to 2147483647.";
        }

        if (!is_null($this->container['velocity_controls']) && (count($this->container['velocity_controls']) < 1)) {
            $invalidProperties[] = "invalid value for 'velocity_controls', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_controls
     *
     * @return string[]|null
     */
    public function getAuthControls()
    {
        return $this->container['auth_controls'];
    }

    /**
     * Sets auth_controls
     *
     * @param string[]|null $auth_controls Unique identifiers of the authorization controls enabled while in Commando Mode.
     *
     * @return self
     */
    public function setAuthControls($auth_controls)
    {
        $this->container['auth_controls'] = $auth_controls;

        return $this;
    }

    /**
     * Gets ignore_card_suspended_state
     *
     * @return bool|null
     */
    public function getIgnoreCardSuspendedState()
    {
        return $this->container['ignore_card_suspended_state'];
    }

    /**
     * Sets ignore_card_suspended_state
     *
     * @param bool|null $ignore_card_suspended_state If set to `true`, transactions conducted while Commando Mode is enabled proceed even when the card is suspended. If set to `false`, transactions conducted while Commando Mode is enabled are declined if the card is suspended.
     *
     * @return self
     */
    public function setIgnoreCardSuspendedState($ignore_card_suspended_state)
    {
        $this->container['ignore_card_suspended_state'] = $ignore_card_suspended_state;

        return $this;
    }

    /**
     * Gets program_funding_source
     *
     * @return string
     */
    public function getProgramFundingSource()
    {
        return $this->container['program_funding_source'];
    }

    /**
     * Sets program_funding_source
     *
     * @param string $program_funding_source Unique identifier of the program funding source that substitutes for the program gateway funding source upon Commando Mode enablement.
     *
     * @return self
     */
    public function setProgramFundingSource($program_funding_source)
    {
        $this->container['program_funding_source'] = $program_funding_source;

        return $this;
    }

    /**
     * Gets use_cache_balance
     *
     * @return bool|null
     */
    public function getUseCacheBalance()
    {
        return $this->container['use_cache_balance'];
    }

    /**
     * Sets use_cache_balance
     *
     * @param bool|null $use_cache_balance This field is not currently in use.
     *
     * @return self
     */
    public function setUseCacheBalance($use_cache_balance)
    {
        $this->container['use_cache_balance'] = $use_cache_balance;

        return $this;
    }

    /**
     * Gets velocity_controls
     *
     * @return string[]|null
     */
    public function getVelocityControls()
    {
        return $this->container['velocity_controls'];
    }

    /**
     * Sets velocity_controls
     *
     * @param string[]|null $velocity_controls Unique identifiers of the velocity controls enabled while in Commando Mode.  Velocity controls that are enabled in Commando Mode are inactive until a Commando Mode event occurs. When Commando Mode velocity controls are activated, they conform to the `velocity_window` specified in that velocity control. For example, a `velocity_window` of `DAY` is one calendar day starting at 00:00:00 UTC. If a Commando Mode event occurs at 11:59:59 UTC, the `DAY` window includes all transactions that occurred between 00:00:00 and 11:59:59 on that calendar day.
     *
     * @return self
     */
    public function setVelocityControls($velocity_controls)
    {

        if (!is_null($velocity_controls) && (count($velocity_controls) > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $velocity_controls when calling CommandoModeEnables., number of items must be less than or equal to 2147483647.');
        }
        if (!is_null($velocity_controls) && (count($velocity_controls) < 1)) {
            throw new \InvalidArgumentException('invalid length for $velocity_controls when calling CommandoModeEnables., number of items must be greater than or equal to 1.');
        }
        $this->container['velocity_controls'] = $velocity_controls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


