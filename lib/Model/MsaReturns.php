<?php
/**
 * MsaReturns
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MsaReturns Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MsaReturns implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'msa_returns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'aggregated_balances' => '\OpenAPI\Client\Model\MsaAggregatedBalances',
        'amount' => 'float',
        'business_token' => 'string',
        'campaign_token' => 'string',
        'created_time' => '\DateTime',
        'currency_code' => 'string',
        'end_date' => '\DateTime',
        'funding' => '\OpenAPI\Client\Model\Funding',
        'last_modified_time' => '\DateTime',
        'last_transaction_date' => '\DateTime',
        'order_balances' => '\OpenAPI\Client\Model\MsaBalances',
        'original_order_token' => 'string',
        'reward_amount' => 'float',
        'reward_trigger_amount' => 'float',
        'start_date' => '\DateTime',
        'token' => 'string',
        'transaction_token' => 'string',
        'unloaded_amount' => 'float',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'aggregated_balances' => null,
        'amount' => null,
        'business_token' => null,
        'campaign_token' => null,
        'created_time' => 'date-time',
        'currency_code' => null,
        'end_date' => 'date-time',
        'funding' => null,
        'last_modified_time' => 'date-time',
        'last_transaction_date' => 'date-time',
        'order_balances' => null,
        'original_order_token' => null,
        'reward_amount' => null,
        'reward_trigger_amount' => null,
        'start_date' => 'date-time',
        'token' => null,
        'transaction_token' => null,
        'unloaded_amount' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'aggregated_balances' => 'aggregated_balances',
        'amount' => 'amount',
        'business_token' => 'business_token',
        'campaign_token' => 'campaign_token',
        'created_time' => 'created_time',
        'currency_code' => 'currency_code',
        'end_date' => 'end_date',
        'funding' => 'funding',
        'last_modified_time' => 'last_modified_time',
        'last_transaction_date' => 'last_transaction_date',
        'order_balances' => 'order_balances',
        'original_order_token' => 'original_order_token',
        'reward_amount' => 'reward_amount',
        'reward_trigger_amount' => 'reward_trigger_amount',
        'start_date' => 'start_date',
        'token' => 'token',
        'transaction_token' => 'transaction_token',
        'unloaded_amount' => 'unloaded_amount',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'aggregated_balances' => 'setAggregatedBalances',
        'amount' => 'setAmount',
        'business_token' => 'setBusinessToken',
        'campaign_token' => 'setCampaignToken',
        'created_time' => 'setCreatedTime',
        'currency_code' => 'setCurrencyCode',
        'end_date' => 'setEndDate',
        'funding' => 'setFunding',
        'last_modified_time' => 'setLastModifiedTime',
        'last_transaction_date' => 'setLastTransactionDate',
        'order_balances' => 'setOrderBalances',
        'original_order_token' => 'setOriginalOrderToken',
        'reward_amount' => 'setRewardAmount',
        'reward_trigger_amount' => 'setRewardTriggerAmount',
        'start_date' => 'setStartDate',
        'token' => 'setToken',
        'transaction_token' => 'setTransactionToken',
        'unloaded_amount' => 'setUnloadedAmount',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'aggregated_balances' => 'getAggregatedBalances',
        'amount' => 'getAmount',
        'business_token' => 'getBusinessToken',
        'campaign_token' => 'getCampaignToken',
        'created_time' => 'getCreatedTime',
        'currency_code' => 'getCurrencyCode',
        'end_date' => 'getEndDate',
        'funding' => 'getFunding',
        'last_modified_time' => 'getLastModifiedTime',
        'last_transaction_date' => 'getLastTransactionDate',
        'order_balances' => 'getOrderBalances',
        'original_order_token' => 'getOriginalOrderToken',
        'reward_amount' => 'getRewardAmount',
        'reward_trigger_amount' => 'getRewardTriggerAmount',
        'start_date' => 'getStartDate',
        'token' => 'getToken',
        'transaction_token' => 'getTransactionToken',
        'unloaded_amount' => 'getUnloadedAmount',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? false;
        $this->container['aggregated_balances'] = $data['aggregated_balances'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['campaign_token'] = $data['campaign_token'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['funding'] = $data['funding'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['last_transaction_date'] = $data['last_transaction_date'] ?? null;
        $this->container['order_balances'] = $data['order_balances'] ?? null;
        $this->container['original_order_token'] = $data['original_order_token'] ?? null;
        $this->container['reward_amount'] = $data['reward_amount'] ?? null;
        $this->container['reward_trigger_amount'] = $data['reward_trigger_amount'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
        $this->container['unloaded_amount'] = $data['unloaded_amount'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['aggregated_balances'] === null) {
            $invalidProperties[] = "'aggregated_balances' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['campaign_token'] === null) {
            $invalidProperties[] = "'campaign_token' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['funding'] === null) {
            $invalidProperties[] = "'funding' can't be null";
        }
        if ($this->container['last_modified_time'] === null) {
            $invalidProperties[] = "'last_modified_time' can't be null";
        }
        if ($this->container['last_transaction_date'] === null) {
            $invalidProperties[] = "'last_transaction_date' can't be null";
        }
        if ($this->container['order_balances'] === null) {
            $invalidProperties[] = "'order_balances' can't be null";
        }
        if ($this->container['original_order_token'] === null) {
            $invalidProperties[] = "'original_order_token' can't be null";
        }
        if ($this->container['reward_amount'] === null) {
            $invalidProperties[] = "'reward_amount' can't be null";
        }
        if ($this->container['reward_trigger_amount'] === null) {
            $invalidProperties[] = "'reward_trigger_amount' can't be null";
        }
        if ($this->container['transaction_token'] === null) {
            $invalidProperties[] = "'transaction_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets aggregated_balances
     *
     * @return \OpenAPI\Client\Model\MsaAggregatedBalances
     */
    public function getAggregatedBalances()
    {
        return $this->container['aggregated_balances'];
    }

    /**
     * Sets aggregated_balances
     *
     * @param \OpenAPI\Client\Model\MsaAggregatedBalances $aggregated_balances aggregated_balances
     *
     * @return self
     */
    public function setAggregatedBalances($aggregated_balances)
    {
        $this->container['aggregated_balances'] = $aggregated_balances;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token business_token
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets campaign_token
     *
     * @return string
     */
    public function getCampaignToken()
    {
        return $this->container['campaign_token'];
    }

    /**
     * Sets campaign_token
     *
     * @param string $campaign_token campaign_token
     *
     * @return self
     */
    public function setCampaignToken($campaign_token)
    {
        $this->container['campaign_token'] = $campaign_token;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time yyyy-MM-ddTHH:mm:ssZ
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date yyyy-MM-ddThh:mm:ssZ
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets funding
     *
     * @return \OpenAPI\Client\Model\Funding
     */
    public function getFunding()
    {
        return $this->container['funding'];
    }

    /**
     * Sets funding
     *
     * @param \OpenAPI\Client\Model\Funding $funding funding
     *
     * @return self
     */
    public function setFunding($funding)
    {
        $this->container['funding'] = $funding;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime $last_modified_time yyyy-MM-ddTHH:mm:ssZ
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets last_transaction_date
     *
     * @return \DateTime
     */
    public function getLastTransactionDate()
    {
        return $this->container['last_transaction_date'];
    }

    /**
     * Sets last_transaction_date
     *
     * @param \DateTime $last_transaction_date yyyy-MM-ddThh:mm:ssZ
     *
     * @return self
     */
    public function setLastTransactionDate($last_transaction_date)
    {
        $this->container['last_transaction_date'] = $last_transaction_date;

        return $this;
    }

    /**
     * Gets order_balances
     *
     * @return \OpenAPI\Client\Model\MsaBalances
     */
    public function getOrderBalances()
    {
        return $this->container['order_balances'];
    }

    /**
     * Sets order_balances
     *
     * @param \OpenAPI\Client\Model\MsaBalances $order_balances order_balances
     *
     * @return self
     */
    public function setOrderBalances($order_balances)
    {
        $this->container['order_balances'] = $order_balances;

        return $this;
    }

    /**
     * Gets original_order_token
     *
     * @return string
     */
    public function getOriginalOrderToken()
    {
        return $this->container['original_order_token'];
    }

    /**
     * Sets original_order_token
     *
     * @param string $original_order_token original_order_token
     *
     * @return self
     */
    public function setOriginalOrderToken($original_order_token)
    {
        $this->container['original_order_token'] = $original_order_token;

        return $this;
    }

    /**
     * Gets reward_amount
     *
     * @return float
     */
    public function getRewardAmount()
    {
        return $this->container['reward_amount'];
    }

    /**
     * Sets reward_amount
     *
     * @param float $reward_amount reward_amount
     *
     * @return self
     */
    public function setRewardAmount($reward_amount)
    {
        $this->container['reward_amount'] = $reward_amount;

        return $this;
    }

    /**
     * Gets reward_trigger_amount
     *
     * @return float
     */
    public function getRewardTriggerAmount()
    {
        return $this->container['reward_trigger_amount'];
    }

    /**
     * Sets reward_trigger_amount
     *
     * @param float $reward_trigger_amount reward_trigger_amount
     *
     * @return self
     */
    public function setRewardTriggerAmount($reward_trigger_amount)
    {
        $this->container['reward_trigger_amount'] = $reward_trigger_amount;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date yyyy-MM-ddThh:mm:ssZ
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string $transaction_token transaction_token
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }

    /**
     * Gets unloaded_amount
     *
     * @return float|null
     */
    public function getUnloadedAmount()
    {
        return $this->container['unloaded_amount'];
    }

    /**
     * Sets unloaded_amount
     *
     * @param float|null $unloaded_amount unloaded_amount
     *
     * @return self
     */
    public function setUnloadedAmount($unloaded_amount)
    {
        $this->container['unloaded_amount'] = $unloaded_amount;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token user_token
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


