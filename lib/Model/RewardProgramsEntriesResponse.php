<?php
/**
 * RewardProgramsEntriesResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RewardProgramsEntriesResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RewardProgramsEntriesResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RewardProgramsEntriesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_time' => '\DateTime',
        'mcc' => 'string',
        'mid' => 'string',
        'note' => 'string',
        'related_journal_entry_token' => 'string',
        'related_redemption_token' => 'string',
        'reward_program_token' => 'string',
        'reward_rules_config_token' => 'string',
        'status' => '\OpenAPI\Client\Model\RewardEntryStatus',
        'token' => 'string',
        'transaction_amount' => 'float',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_time' => 'date-time',
        'mcc' => null,
        'mid' => null,
        'note' => null,
        'related_journal_entry_token' => null,
        'related_redemption_token' => null,
        'reward_program_token' => null,
        'reward_rules_config_token' => null,
        'status' => null,
        'token' => null,
        'transaction_amount' => 'decimal',
        'value' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_time' => 'created_time',
        'mcc' => 'mcc',
        'mid' => 'mid',
        'note' => 'note',
        'related_journal_entry_token' => 'related_journal_entry_token',
        'related_redemption_token' => 'related_redemption_token',
        'reward_program_token' => 'reward_program_token',
        'reward_rules_config_token' => 'reward_rules_config_token',
        'status' => 'status',
        'token' => 'token',
        'transaction_amount' => 'transaction_amount',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_time' => 'setCreatedTime',
        'mcc' => 'setMcc',
        'mid' => 'setMid',
        'note' => 'setNote',
        'related_journal_entry_token' => 'setRelatedJournalEntryToken',
        'related_redemption_token' => 'setRelatedRedemptionToken',
        'reward_program_token' => 'setRewardProgramToken',
        'reward_rules_config_token' => 'setRewardRulesConfigToken',
        'status' => 'setStatus',
        'token' => 'setToken',
        'transaction_amount' => 'setTransactionAmount',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_time' => 'getCreatedTime',
        'mcc' => 'getMcc',
        'mid' => 'getMid',
        'note' => 'getNote',
        'related_journal_entry_token' => 'getRelatedJournalEntryToken',
        'related_redemption_token' => 'getRelatedRedemptionToken',
        'reward_program_token' => 'getRewardProgramToken',
        'reward_rules_config_token' => 'getRewardRulesConfigToken',
        'status' => 'getStatus',
        'token' => 'getToken',
        'transaction_amount' => 'getTransactionAmount',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['mcc'] = $data['mcc'] ?? null;
        $this->container['mid'] = $data['mid'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['related_journal_entry_token'] = $data['related_journal_entry_token'] ?? null;
        $this->container['related_redemption_token'] = $data['related_redemption_token'] ?? null;
        $this->container['reward_program_token'] = $data['reward_program_token'] ?? null;
        $this->container['reward_rules_config_token'] = $data['reward_rules_config_token'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transaction_amount'] = $data['transaction_amount'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['related_journal_entry_token'] === null) {
            $invalidProperties[] = "'related_journal_entry_token' can't be null";
        }
        if ((mb_strlen($this->container['related_journal_entry_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'related_journal_entry_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['related_redemption_token']) && (mb_strlen($this->container['related_redemption_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'related_redemption_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['reward_program_token'] === null) {
            $invalidProperties[] = "'reward_program_token' can't be null";
        }
        if ((mb_strlen($this->container['reward_program_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'reward_program_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['reward_rules_config_token'] === null) {
            $invalidProperties[] = "'reward_rules_config_token' can't be null";
        }
        if ((mb_strlen($this->container['reward_rules_config_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'reward_rules_config_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the reward entry was created on the Marqeta platform, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc Merchant category code (MCC) of the related journal entry.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return string|null
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param string|null $mid Merchant identifier (MID) of the related journal entry.
     *
     * @return self
     */
    public function setMid($mid)
    {
        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note providing information on the reward entry.
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets related_journal_entry_token
     *
     * @return string
     */
    public function getRelatedJournalEntryToken()
    {
        return $this->container['related_journal_entry_token'];
    }

    /**
     * Sets related_journal_entry_token
     *
     * @param string $related_journal_entry_token Unique identifier of the related journal entry to which the reward rule was applied to trigger the reward entry.
     *
     * @return self
     */
    public function setRelatedJournalEntryToken($related_journal_entry_token)
    {
        if ((mb_strlen($related_journal_entry_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $related_journal_entry_token when calling RewardProgramsEntriesResponse., must be smaller than or equal to 36.');
        }

        $this->container['related_journal_entry_token'] = $related_journal_entry_token;

        return $this;
    }

    /**
     * Gets related_redemption_token
     *
     * @return string|null
     */
    public function getRelatedRedemptionToken()
    {
        return $this->container['related_redemption_token'];
    }

    /**
     * Sets related_redemption_token
     *
     * @param string|null $related_redemption_token Unique identifier of the related redemption token that triggered the reward entry.
     *
     * @return self
     */
    public function setRelatedRedemptionToken($related_redemption_token)
    {
        if (!is_null($related_redemption_token) && (mb_strlen($related_redemption_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $related_redemption_token when calling RewardProgramsEntriesResponse., must be smaller than or equal to 36.');
        }

        $this->container['related_redemption_token'] = $related_redemption_token;

        return $this;
    }

    /**
     * Gets reward_program_token
     *
     * @return string
     */
    public function getRewardProgramToken()
    {
        return $this->container['reward_program_token'];
    }

    /**
     * Sets reward_program_token
     *
     * @param string $reward_program_token Unique identifier of the reward program for which to return reward entries.
     *
     * @return self
     */
    public function setRewardProgramToken($reward_program_token)
    {
        if ((mb_strlen($reward_program_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $reward_program_token when calling RewardProgramsEntriesResponse., must be smaller than or equal to 36.');
        }

        $this->container['reward_program_token'] = $reward_program_token;

        return $this;
    }

    /**
     * Gets reward_rules_config_token
     *
     * @return string
     */
    public function getRewardRulesConfigToken()
    {
        return $this->container['reward_rules_config_token'];
    }

    /**
     * Sets reward_rules_config_token
     *
     * @param string $reward_rules_config_token Unique identifier of the reward rules config used to determine the value of the reward entry.
     *
     * @return self
     */
    public function setRewardRulesConfigToken($reward_rules_config_token)
    {
        if ((mb_strlen($reward_rules_config_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $reward_rules_config_token when calling RewardProgramsEntriesResponse., must be smaller than or equal to 36.');
        }

        $this->container['reward_rules_config_token'] = $reward_rules_config_token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\RewardEntryStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\RewardEntryStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the reward entry.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling RewardProgramsEntriesResponse., must be smaller than or equal to 36.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return float
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param float $transaction_amount The transaction amount to which the reward rule was applied. Used to determine the value of the reward entry.
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value Value of the reward entry.
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


