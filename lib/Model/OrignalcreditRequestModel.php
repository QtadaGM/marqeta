<?php
/**
 * OrignalcreditRequestModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrignalcreditRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrignalcreditRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orignalcredit_request_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'card_acceptor' => '\OpenAPI\Client\Model\CardAcceptorModel',
        'card_token' => 'string',
        'mid' => 'string',
        'screening_score' => 'string',
        'sender_data' => '\OpenAPI\Client\Model\OriginalCreditSenderData',
        'transaction_purpose' => 'string',
        'type' => 'string',
        'webhook' => '\OpenAPI\Client\Model\Webhook'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'card_acceptor' => null,
        'card_token' => null,
        'mid' => null,
        'screening_score' => null,
        'sender_data' => null,
        'transaction_purpose' => null,
        'type' => null,
        'webhook' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'card_acceptor' => 'card_acceptor',
        'card_token' => 'card_token',
        'mid' => 'mid',
        'screening_score' => 'screening_score',
        'sender_data' => 'sender_data',
        'transaction_purpose' => 'transactionPurpose',
        'type' => 'type',
        'webhook' => 'webhook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'card_acceptor' => 'setCardAcceptor',
        'card_token' => 'setCardToken',
        'mid' => 'setMid',
        'screening_score' => 'setScreeningScore',
        'sender_data' => 'setSenderData',
        'transaction_purpose' => 'setTransactionPurpose',
        'type' => 'setType',
        'webhook' => 'setWebhook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'card_acceptor' => 'getCardAcceptor',
        'card_token' => 'getCardToken',
        'mid' => 'getMid',
        'screening_score' => 'getScreeningScore',
        'sender_data' => 'getSenderData',
        'transaction_purpose' => 'getTransactionPurpose',
        'type' => 'getType',
        'webhook' => 'getWebhook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_ACCOUNT_TO_ACCOUNT = 'account_to_account';
    const TYPE_PERSON_TO_PERSON = 'person_to_person';
    const TYPE_PREPAID = 'prepaid';
    const TYPE_WALLET_TRANSFER = 'wallet_transfer';
    const TYPE_MONEY_TRANSFER_BY_BANK = 'money_transfer_by_bank';
    const TYPE_BUSINESS_TO_BUSINESS = 'business_to_business';
    const TYPE_DISBURSEMENT = 'disbursement';
    const TYPE_GOVERNMENT_DISBURSEMENT = 'government_disbursement';
    const TYPE_GAMBLING_PAYOUT = 'gambling_payout';
    const TYPE_LOYALTY = 'loyalty';
    const TYPE_MERCHANT_DISBURSEMENT = 'merchant_disbursement';
    const TYPE_ONLINE_GAMBLING_PAYOUT = 'online_gambling_payout';
    const TYPE_PENSION_DISBURSEMENT = 'pension_disbursement';
    const TYPE_PREPAID_LOADS = 'prepaid_loads';
    const TYPE_CARD_BILL_PAYMENT = 'card_bill_payment';
    const TYPE_BILL_PAYMENT = 'bill_payment';
    const TYPE_CASH_CLAIM = 'cash_claim';
    const TYPE_CASH_IN = 'cash_in';
    const TYPE_CASH_OUT = 'cash_out';
    const TYPE_MOBILE_AIR_TIME_PAYMENT = 'mobile_air_time_payment';
    const TYPE_MONEY_TRANSFER_BY_MERCHANT = 'money_transfer_by_merchant';
    const TYPE_FACE_TO_FACE_MERCHANT_PAYMENT = 'face_to_face_merchant_payment';
    const TYPE_GOVERNMENT_PAYMENT = 'government_payment';
    const TYPE_PAYMENTS_GOODS_SERVICES = 'payments_goods_services';
    const TYPE_PURCHASE_REPAYMENT = 'purchase_repayment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCOUNT_TO_ACCOUNT,
            self::TYPE_PERSON_TO_PERSON,
            self::TYPE_PREPAID,
            self::TYPE_WALLET_TRANSFER,
            self::TYPE_MONEY_TRANSFER_BY_BANK,
            self::TYPE_BUSINESS_TO_BUSINESS,
            self::TYPE_DISBURSEMENT,
            self::TYPE_GOVERNMENT_DISBURSEMENT,
            self::TYPE_GAMBLING_PAYOUT,
            self::TYPE_LOYALTY,
            self::TYPE_MERCHANT_DISBURSEMENT,
            self::TYPE_ONLINE_GAMBLING_PAYOUT,
            self::TYPE_PENSION_DISBURSEMENT,
            self::TYPE_PREPAID_LOADS,
            self::TYPE_CARD_BILL_PAYMENT,
            self::TYPE_BILL_PAYMENT,
            self::TYPE_CASH_CLAIM,
            self::TYPE_CASH_IN,
            self::TYPE_CASH_OUT,
            self::TYPE_MOBILE_AIR_TIME_PAYMENT,
            self::TYPE_MONEY_TRANSFER_BY_MERCHANT,
            self::TYPE_FACE_TO_FACE_MERCHANT_PAYMENT,
            self::TYPE_GOVERNMENT_PAYMENT,
            self::TYPE_PAYMENTS_GOODS_SERVICES,
            self::TYPE_PURCHASE_REPAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['card_acceptor'] = $data['card_acceptor'] ?? null;
        $this->container['card_token'] = $data['card_token'] ?? null;
        $this->container['mid'] = $data['mid'] ?? null;
        $this->container['screening_score'] = $data['screening_score'] ?? null;
        $this->container['sender_data'] = $data['sender_data'] ?? null;
        $this->container['transaction_purpose'] = $data['transaction_purpose'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['webhook'] = $data['webhook'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['card_token'] === null) {
            $invalidProperties[] = "'card_token' can't be null";
        }
        if ((mb_strlen($this->container['card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mid'] === null) {
            $invalidProperties[] = "'mid' can't be null";
        }
        if ((mb_strlen($this->container['mid']) > 50)) {
            $invalidProperties[] = "invalid value for 'mid', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['mid']) < 1)) {
            $invalidProperties[] = "invalid value for 'mid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets card_acceptor
     *
     * @return \OpenAPI\Client\Model\CardAcceptorModel|null
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     *
     * @param \OpenAPI\Client\Model\CardAcceptorModel|null $card_acceptor card_acceptor
     *
     * @return self
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string $card_token card_token
     *
     * @return self
     */
    public function setCardToken($card_token)
    {
        if ((mb_strlen($card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling OrignalcreditRequestModel., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling OrignalcreditRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return string
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param string $mid mid
     *
     * @return self
     */
    public function setMid($mid)
    {
        if ((mb_strlen($mid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mid when calling OrignalcreditRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mid when calling OrignalcreditRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets screening_score
     *
     * @return string|null
     */
    public function getScreeningScore()
    {
        return $this->container['screening_score'];
    }

    /**
     * Sets screening_score
     *
     * @param string|null $screening_score screening_score
     *
     * @return self
     */
    public function setScreeningScore($screening_score)
    {
        $this->container['screening_score'] = $screening_score;

        return $this;
    }

    /**
     * Gets sender_data
     *
     * @return \OpenAPI\Client\Model\OriginalCreditSenderData|null
     */
    public function getSenderData()
    {
        return $this->container['sender_data'];
    }

    /**
     * Sets sender_data
     *
     * @param \OpenAPI\Client\Model\OriginalCreditSenderData|null $sender_data sender_data
     *
     * @return self
     */
    public function setSenderData($sender_data)
    {
        $this->container['sender_data'] = $sender_data;

        return $this;
    }

    /**
     * Gets transaction_purpose
     *
     * @return string|null
     */
    public function getTransactionPurpose()
    {
        return $this->container['transaction_purpose'];
    }

    /**
     * Sets transaction_purpose
     *
     * @param string|null $transaction_purpose transaction_purpose
     *
     * @return self
     */
    public function setTransactionPurpose($transaction_purpose)
    {
        $this->container['transaction_purpose'] = $transaction_purpose;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return \OpenAPI\Client\Model\Webhook|null
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param \OpenAPI\Client\Model\Webhook|null $webhook webhook
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


