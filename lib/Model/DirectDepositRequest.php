<?php
/**
 * DirectDepositRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DirectDepositRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DirectDepositRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectDepositRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'string',
        'amount' => 'float',
        'company_discretionary_data' => 'string',
        'company_entry_description' => 'string',
        'company_identification' => 'string',
        'company_name' => 'string',
        'early_pay_eligible' => 'bool',
        'individual_identification_number' => 'string',
        'individual_name' => 'string',
        'settlement_date' => '\DateTime',
        'standard_entry_class_code' => 'string',
        'token' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'amount' => null,
        'company_discretionary_data' => null,
        'company_entry_description' => null,
        'company_identification' => null,
        'company_name' => null,
        'early_pay_eligible' => null,
        'individual_identification_number' => null,
        'individual_name' => null,
        'settlement_date' => 'date-time',
        'standard_entry_class_code' => null,
        'token' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'account_number',
        'amount' => 'amount',
        'company_discretionary_data' => 'company_discretionary_data',
        'company_entry_description' => 'company_entry_description',
        'company_identification' => 'company_identification',
        'company_name' => 'company_name',
        'early_pay_eligible' => 'earlyPayEligible',
        'individual_identification_number' => 'individual_identification_number',
        'individual_name' => 'individual_name',
        'settlement_date' => 'settlement_date',
        'standard_entry_class_code' => 'standard_entry_class_code',
        'token' => 'token',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'amount' => 'setAmount',
        'company_discretionary_data' => 'setCompanyDiscretionaryData',
        'company_entry_description' => 'setCompanyEntryDescription',
        'company_identification' => 'setCompanyIdentification',
        'company_name' => 'setCompanyName',
        'early_pay_eligible' => 'setEarlyPayEligible',
        'individual_identification_number' => 'setIndividualIdentificationNumber',
        'individual_name' => 'setIndividualName',
        'settlement_date' => 'setSettlementDate',
        'standard_entry_class_code' => 'setStandardEntryClassCode',
        'token' => 'setToken',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'amount' => 'getAmount',
        'company_discretionary_data' => 'getCompanyDiscretionaryData',
        'company_entry_description' => 'getCompanyEntryDescription',
        'company_identification' => 'getCompanyIdentification',
        'company_name' => 'getCompanyName',
        'early_pay_eligible' => 'getEarlyPayEligible',
        'individual_identification_number' => 'getIndividualIdentificationNumber',
        'individual_name' => 'getIndividualName',
        'settlement_date' => 'getSettlementDate',
        'standard_entry_class_code' => 'getStandardEntryClassCode',
        'token' => 'getToken',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CREDIT = 'CREDIT';
    const TYPE_DEBIT = 'DEBIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREDIT,
            self::TYPE_DEBIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['company_discretionary_data'] = $data['company_discretionary_data'] ?? null;
        $this->container['company_entry_description'] = $data['company_entry_description'] ?? null;
        $this->container['company_identification'] = $data['company_identification'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['early_pay_eligible'] = $data['early_pay_eligible'] ?? false;
        $this->container['individual_identification_number'] = $data['individual_identification_number'] ?? null;
        $this->container['individual_name'] = $data['individual_name'] ?? null;
        $this->container['settlement_date'] = $data['settlement_date'] ?? null;
        $this->container['standard_entry_class_code'] = $data['standard_entry_class_code'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (!is_null($this->container['company_discretionary_data']) && (mb_strlen($this->container['company_discretionary_data']) > 20)) {
            $invalidProperties[] = "invalid value for 'company_discretionary_data', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['company_discretionary_data']) && (mb_strlen($this->container['company_discretionary_data']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_discretionary_data', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_entry_description']) && (mb_strlen($this->container['company_entry_description']) > 10)) {
            $invalidProperties[] = "invalid value for 'company_entry_description', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['company_entry_description']) && (mb_strlen($this->container['company_entry_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_entry_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_identification']) && (mb_strlen($this->container['company_identification']) > 10)) {
            $invalidProperties[] = "invalid value for 'company_identification', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['company_identification']) && (mb_strlen($this->container['company_identification']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_identification', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 16)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['individual_identification_number']) && (mb_strlen($this->container['individual_identification_number']) > 22)) {
            $invalidProperties[] = "invalid value for 'individual_identification_number', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['individual_identification_number']) && (mb_strlen($this->container['individual_identification_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'individual_identification_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['individual_name']) && (mb_strlen($this->container['individual_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'individual_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['individual_name']) && (mb_strlen($this->container['individual_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'individual_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['settlement_date'] === null) {
            $invalidProperties[] = "'settlement_date' can't be null";
        }
        if (!is_null($this->container['standard_entry_class_code']) && (mb_strlen($this->container['standard_entry_class_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'standard_entry_class_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['standard_entry_class_code']) && (mb_strlen($this->container['standard_entry_class_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'standard_entry_class_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 0)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets company_discretionary_data
     *
     * @return string|null
     */
    public function getCompanyDiscretionaryData()
    {
        return $this->container['company_discretionary_data'];
    }

    /**
     * Sets company_discretionary_data
     *
     * @param string|null $company_discretionary_data company_discretionary_data
     *
     * @return self
     */
    public function setCompanyDiscretionaryData($company_discretionary_data)
    {
        if (!is_null($company_discretionary_data) && (mb_strlen($company_discretionary_data) > 20)) {
            throw new \InvalidArgumentException('invalid length for $company_discretionary_data when calling DirectDepositRequest., must be smaller than or equal to 20.');
        }
        if (!is_null($company_discretionary_data) && (mb_strlen($company_discretionary_data) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_discretionary_data when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['company_discretionary_data'] = $company_discretionary_data;

        return $this;
    }

    /**
     * Gets company_entry_description
     *
     * @return string|null
     */
    public function getCompanyEntryDescription()
    {
        return $this->container['company_entry_description'];
    }

    /**
     * Sets company_entry_description
     *
     * @param string|null $company_entry_description company_entry_description
     *
     * @return self
     */
    public function setCompanyEntryDescription($company_entry_description)
    {
        if (!is_null($company_entry_description) && (mb_strlen($company_entry_description) > 10)) {
            throw new \InvalidArgumentException('invalid length for $company_entry_description when calling DirectDepositRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($company_entry_description) && (mb_strlen($company_entry_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_entry_description when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['company_entry_description'] = $company_entry_description;

        return $this;
    }

    /**
     * Gets company_identification
     *
     * @return string|null
     */
    public function getCompanyIdentification()
    {
        return $this->container['company_identification'];
    }

    /**
     * Sets company_identification
     *
     * @param string|null $company_identification company_identification
     *
     * @return self
     */
    public function setCompanyIdentification($company_identification)
    {
        if (!is_null($company_identification) && (mb_strlen($company_identification) > 10)) {
            throw new \InvalidArgumentException('invalid length for $company_identification when calling DirectDepositRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($company_identification) && (mb_strlen($company_identification) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_identification when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['company_identification'] = $company_identification;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (!is_null($company_name) && (mb_strlen($company_name) > 16)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling DirectDepositRequest., must be smaller than or equal to 16.');
        }
        if (!is_null($company_name) && (mb_strlen($company_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets early_pay_eligible
     *
     * @return bool|null
     */
    public function getEarlyPayEligible()
    {
        return $this->container['early_pay_eligible'];
    }

    /**
     * Sets early_pay_eligible
     *
     * @param bool|null $early_pay_eligible early_pay_eligible
     *
     * @return self
     */
    public function setEarlyPayEligible($early_pay_eligible)
    {
        $this->container['early_pay_eligible'] = $early_pay_eligible;

        return $this;
    }

    /**
     * Gets individual_identification_number
     *
     * @return string|null
     */
    public function getIndividualIdentificationNumber()
    {
        return $this->container['individual_identification_number'];
    }

    /**
     * Sets individual_identification_number
     *
     * @param string|null $individual_identification_number individual_identification_number
     *
     * @return self
     */
    public function setIndividualIdentificationNumber($individual_identification_number)
    {
        if (!is_null($individual_identification_number) && (mb_strlen($individual_identification_number) > 22)) {
            throw new \InvalidArgumentException('invalid length for $individual_identification_number when calling DirectDepositRequest., must be smaller than or equal to 22.');
        }
        if (!is_null($individual_identification_number) && (mb_strlen($individual_identification_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $individual_identification_number when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['individual_identification_number'] = $individual_identification_number;

        return $this;
    }

    /**
     * Gets individual_name
     *
     * @return string|null
     */
    public function getIndividualName()
    {
        return $this->container['individual_name'];
    }

    /**
     * Sets individual_name
     *
     * @param string|null $individual_name individual_name
     *
     * @return self
     */
    public function setIndividualName($individual_name)
    {
        if (!is_null($individual_name) && (mb_strlen($individual_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $individual_name when calling DirectDepositRequest., must be smaller than or equal to 35.');
        }
        if (!is_null($individual_name) && (mb_strlen($individual_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $individual_name when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['individual_name'] = $individual_name;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return \DateTime
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param \DateTime $settlement_date settlement_date
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets standard_entry_class_code
     *
     * @return string|null
     */
    public function getStandardEntryClassCode()
    {
        return $this->container['standard_entry_class_code'];
    }

    /**
     * Sets standard_entry_class_code
     *
     * @param string|null $standard_entry_class_code standard_entry_class_code
     *
     * @return self
     */
    public function setStandardEntryClassCode($standard_entry_class_code)
    {
        if (!is_null($standard_entry_class_code) && (mb_strlen($standard_entry_class_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $standard_entry_class_code when calling DirectDepositRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($standard_entry_class_code) && (mb_strlen($standard_entry_class_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $standard_entry_class_code when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['standard_entry_class_code'] = $standard_entry_class_code;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling DirectDepositRequest., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token when calling DirectDepositRequest., must be bigger than or equal to 0.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


