<?php
/**
 * TransactionModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionModel Class Doc Comment
 *
 * @category Class
 * @description Transactions are represented by the &#x60;transaction&#x60; object. The Marqeta platform creates a separate &#x60;transaction&#x60; object for each transaction message received from the card network. The attributes of a given &#x60;transaction&#x60; object depend on the transaction type.  This section documents all fields that might be included in a &#x60;transaction&#x60; object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_funding' => '\OpenAPI\Client\Model\AccountFunding',
        'account_name_verification' => '\OpenAPI\Client\Model\AccountNameVerificationModel',
        'acquirer' => '\OpenAPI\Client\Model\Acquirer',
        'acquirer_fee_amount' => 'float',
        'acquirer_reference_data' => 'string',
        'acquirer_reference_id' => 'string',
        'acting_user_token' => 'string',
        'address_verification' => '\OpenAPI\Client\Model\AddressVerificationModel',
        'advice_reason_code' => 'string',
        'advice_reason_details' => 'string',
        'amount' => 'float',
        'amount_to_be_released' => 'float',
        'approval_code' => 'string',
        'atc_information' => '\OpenAPI\Client\Model\AtcInformation',
        'auto_reload' => '\OpenAPI\Client\Model\AutoReloadModel',
        'bank_transfer_token' => 'string',
        'batch_number' => 'string',
        'billpay' => '\OpenAPI\Client\Model\BillPayResponse',
        'business' => '\OpenAPI\Client\Model\BusinessMetadata',
        'business_token' => 'string',
        'card' => '\OpenAPI\Client\Model\CardResponse',
        'card_acceptor' => '\OpenAPI\Client\Model\TransactionCardAcceptor',
        'card_holder_model' => '\OpenAPI\Client\Model\UserCardHolderResponse',
        'card_product_token' => 'string',
        'card_security_code_verification' => '\OpenAPI\Client\Model\CardSecurityCodeVerification',
        'card_token' => 'string',
        'cardholder_authentication_data' => '\OpenAPI\Client\Model\CardholderAuthenticationData',
        'cash_back_amount' => 'float',
        'chargeback' => '\OpenAPI\Client\Model\ChargebackResponse',
        'clearing_record_sequence_number' => 'string',
        'created_time' => '\DateTime',
        'currency_code' => 'string',
        'currency_conversion' => '\OpenAPI\Client\Model\CurrencyConversion',
        'deferred_settlement_days' => 'string',
        'digital_wallet_token' => '\OpenAPI\Client\Model\DigitalWalletToken',
        'digital_wallet_token_transaction_service_provider_info' => '\OpenAPI\Client\Model\DigitalServiceProvider',
        'direct_deposit' => '\OpenAPI\Client\Model\DepositDepositResponse',
        'dispute' => '\OpenAPI\Client\Model\DisputeModel',
        'duration' => 'int',
        'enhanced_data_token' => 'string',
        'fee' => '\OpenAPI\Client\Model\Fee',
        'fee_transfer' => '\OpenAPI\Client\Model\FeeTransferResponse',
        'fees' => '\OpenAPI\Client\Model\NetworkFeeModel[]',
        'fraud' => '\OpenAPI\Client\Model\FraudView',
        'from_account' => 'string',
        'gpa' => '\OpenAPI\Client\Model\CardholderBalance',
        'gpa_order' => '\OpenAPI\Client\Model\GpaResponse',
        'gpa_order_unload' => '\OpenAPI\Client\Model\GpaReturns',
        'identifier' => 'string',
        'incremental_authorization_transaction_tokens' => 'string[]',
        'interchange_rate_descriptor' => 'string',
        'is_final_clearing' => 'bool',
        'is_preauthorization' => 'bool',
        'isa_indicator' => 'string',
        'issuer_interchange_amount' => 'float',
        'issuer_payment_node' => 'string',
        'issuer_received_time' => 'string',
        'local_transaction_date' => '\DateTime',
        'merchant' => '\OpenAPI\Client\Model\MerchantResponseModel',
        'merchant_initiated_original_trace_id' => 'string',
        'msa_order_unload' => '\OpenAPI\Client\Model\MsaReturns',
        'multi_clearing_sequence_count' => 'string',
        'multi_clearing_sequence_number' => 'string',
        'national_net_cpd_of_original' => 'string',
        'network' => 'string',
        'network_metadata' => '\OpenAPI\Client\Model\NetworkMetadata',
        'network_reference_id' => 'string',
        'original_credit' => '\OpenAPI\Client\Model\OriginalCredit',
        'peer_transfer' => '\OpenAPI\Client\Model\PeerTransferResponse',
        'polarity' => 'string',
        'pos' => '\OpenAPI\Client\Model\Pos',
        'preceding_related_transaction_token' => 'string',
        'preceding_transaction' => '\OpenAPI\Client\Model\PrecedingTransaction',
        'program' => '\OpenAPI\Client\Model\Program',
        'program_transfer' => '\OpenAPI\Client\Model\ProgramTransferResponse',
        'real_time_fee_group' => '\OpenAPI\Client\Model\RealTimeFeeGroup',
        'request_amount' => 'float',
        'response' => '\OpenAPI\Client\Model\Response',
        'settlement_date' => '\DateTime',
        'settlement_indicator' => 'string',
        'standin_approved_by' => 'string',
        'standin_by' => 'string',
        'standin_reason' => 'string',
        'state' => 'string',
        'store' => '\OpenAPI\Client\Model\StoreResponseModel',
        'subnetwork' => 'string',
        'token' => 'string',
        'transaction_attributes' => 'array<string,string>',
        'transaction_metadata' => '\OpenAPI\Client\Model\TransactionMetadata',
        'type' => 'string',
        'user' => '\OpenAPI\Client\Model\CardholderMetadata',
        'user_token' => 'string',
        'user_transaction_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_funding' => null,
        'account_name_verification' => null,
        'acquirer' => null,
        'acquirer_fee_amount' => null,
        'acquirer_reference_data' => null,
        'acquirer_reference_id' => null,
        'acting_user_token' => null,
        'address_verification' => null,
        'advice_reason_code' => null,
        'advice_reason_details' => null,
        'amount' => null,
        'amount_to_be_released' => null,
        'approval_code' => null,
        'atc_information' => null,
        'auto_reload' => null,
        'bank_transfer_token' => null,
        'batch_number' => null,
        'billpay' => null,
        'business' => null,
        'business_token' => null,
        'card' => null,
        'card_acceptor' => null,
        'card_holder_model' => null,
        'card_product_token' => null,
        'card_security_code_verification' => null,
        'card_token' => null,
        'cardholder_authentication_data' => null,
        'cash_back_amount' => null,
        'chargeback' => null,
        'clearing_record_sequence_number' => null,
        'created_time' => 'date-time',
        'currency_code' => null,
        'currency_conversion' => null,
        'deferred_settlement_days' => null,
        'digital_wallet_token' => null,
        'digital_wallet_token_transaction_service_provider_info' => null,
        'direct_deposit' => null,
        'dispute' => null,
        'duration' => 'int32',
        'enhanced_data_token' => null,
        'fee' => null,
        'fee_transfer' => null,
        'fees' => null,
        'fraud' => null,
        'from_account' => null,
        'gpa' => null,
        'gpa_order' => null,
        'gpa_order_unload' => null,
        'identifier' => null,
        'incremental_authorization_transaction_tokens' => null,
        'interchange_rate_descriptor' => null,
        'is_final_clearing' => null,
        'is_preauthorization' => null,
        'isa_indicator' => null,
        'issuer_interchange_amount' => null,
        'issuer_payment_node' => null,
        'issuer_received_time' => null,
        'local_transaction_date' => 'date-time',
        'merchant' => null,
        'merchant_initiated_original_trace_id' => null,
        'msa_order_unload' => null,
        'multi_clearing_sequence_count' => null,
        'multi_clearing_sequence_number' => null,
        'national_net_cpd_of_original' => null,
        'network' => null,
        'network_metadata' => null,
        'network_reference_id' => null,
        'original_credit' => null,
        'peer_transfer' => null,
        'polarity' => null,
        'pos' => null,
        'preceding_related_transaction_token' => null,
        'preceding_transaction' => null,
        'program' => null,
        'program_transfer' => null,
        'real_time_fee_group' => null,
        'request_amount' => null,
        'response' => null,
        'settlement_date' => 'date-time',
        'settlement_indicator' => null,
        'standin_approved_by' => null,
        'standin_by' => null,
        'standin_reason' => null,
        'state' => null,
        'store' => null,
        'subnetwork' => null,
        'token' => null,
        'transaction_attributes' => null,
        'transaction_metadata' => null,
        'type' => null,
        'user' => null,
        'user_token' => null,
        'user_transaction_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_funding' => 'account_funding',
        'account_name_verification' => 'account_name_verification',
        'acquirer' => 'acquirer',
        'acquirer_fee_amount' => 'acquirer_fee_amount',
        'acquirer_reference_data' => 'acquirer_reference_data',
        'acquirer_reference_id' => 'acquirer_reference_id',
        'acting_user_token' => 'acting_user_token',
        'address_verification' => 'address_verification',
        'advice_reason_code' => 'advice_reason_code',
        'advice_reason_details' => 'advice_reason_details',
        'amount' => 'amount',
        'amount_to_be_released' => 'amount_to_be_released',
        'approval_code' => 'approval_code',
        'atc_information' => 'atc_information',
        'auto_reload' => 'auto_reload',
        'bank_transfer_token' => 'bank_transfer_token',
        'batch_number' => 'batch_number',
        'billpay' => 'billpay',
        'business' => 'business',
        'business_token' => 'business_token',
        'card' => 'card',
        'card_acceptor' => 'card_acceptor',
        'card_holder_model' => 'card_holder_model',
        'card_product_token' => 'card_product_token',
        'card_security_code_verification' => 'card_security_code_verification',
        'card_token' => 'card_token',
        'cardholder_authentication_data' => 'cardholder_authentication_data',
        'cash_back_amount' => 'cash_back_amount',
        'chargeback' => 'chargeback',
        'clearing_record_sequence_number' => 'clearing_record_sequence_number',
        'created_time' => 'created_time',
        'currency_code' => 'currency_code',
        'currency_conversion' => 'currency_conversion',
        'deferred_settlement_days' => 'deferred_settlement_days',
        'digital_wallet_token' => 'digital_wallet_token',
        'digital_wallet_token_transaction_service_provider_info' => 'digital_wallet_token_transaction_service_provider_info',
        'direct_deposit' => 'direct_deposit',
        'dispute' => 'dispute',
        'duration' => 'duration',
        'enhanced_data_token' => 'enhanced_data_token',
        'fee' => 'fee',
        'fee_transfer' => 'fee_transfer',
        'fees' => 'fees',
        'fraud' => 'fraud',
        'from_account' => 'from_account',
        'gpa' => 'gpa',
        'gpa_order' => 'gpa_order',
        'gpa_order_unload' => 'gpa_order_unload',
        'identifier' => 'identifier',
        'incremental_authorization_transaction_tokens' => 'incremental_authorization_transaction_tokens',
        'interchange_rate_descriptor' => 'interchange_rate_descriptor',
        'is_final_clearing' => 'is_final_clearing',
        'is_preauthorization' => 'is_preauthorization',
        'isa_indicator' => 'isaIndicator',
        'issuer_interchange_amount' => 'issuer_interchange_amount',
        'issuer_payment_node' => 'issuer_payment_node',
        'issuer_received_time' => 'issuer_received_time',
        'local_transaction_date' => 'local_transaction_date',
        'merchant' => 'merchant',
        'merchant_initiated_original_trace_id' => 'merchant_initiated_original_trace_id',
        'msa_order_unload' => 'msa_order_unload',
        'multi_clearing_sequence_count' => 'multi_clearing_sequence_count',
        'multi_clearing_sequence_number' => 'multi_clearing_sequence_number',
        'national_net_cpd_of_original' => 'national_net_cpd_of_original',
        'network' => 'network',
        'network_metadata' => 'network_metadata',
        'network_reference_id' => 'network_reference_id',
        'original_credit' => 'original_credit',
        'peer_transfer' => 'peer_transfer',
        'polarity' => 'polarity',
        'pos' => 'pos',
        'preceding_related_transaction_token' => 'preceding_related_transaction_token',
        'preceding_transaction' => 'preceding_transaction',
        'program' => 'program',
        'program_transfer' => 'program_transfer',
        'real_time_fee_group' => 'real_time_fee_group',
        'request_amount' => 'request_amount',
        'response' => 'response',
        'settlement_date' => 'settlement_date',
        'settlement_indicator' => 'settlement_indicator',
        'standin_approved_by' => 'standin_approved_by',
        'standin_by' => 'standin_by',
        'standin_reason' => 'standin_reason',
        'state' => 'state',
        'store' => 'store',
        'subnetwork' => 'subnetwork',
        'token' => 'token',
        'transaction_attributes' => 'transaction_attributes',
        'transaction_metadata' => 'transaction_metadata',
        'type' => 'type',
        'user' => 'user',
        'user_token' => 'user_token',
        'user_transaction_time' => 'user_transaction_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_funding' => 'setAccountFunding',
        'account_name_verification' => 'setAccountNameVerification',
        'acquirer' => 'setAcquirer',
        'acquirer_fee_amount' => 'setAcquirerFeeAmount',
        'acquirer_reference_data' => 'setAcquirerReferenceData',
        'acquirer_reference_id' => 'setAcquirerReferenceId',
        'acting_user_token' => 'setActingUserToken',
        'address_verification' => 'setAddressVerification',
        'advice_reason_code' => 'setAdviceReasonCode',
        'advice_reason_details' => 'setAdviceReasonDetails',
        'amount' => 'setAmount',
        'amount_to_be_released' => 'setAmountToBeReleased',
        'approval_code' => 'setApprovalCode',
        'atc_information' => 'setAtcInformation',
        'auto_reload' => 'setAutoReload',
        'bank_transfer_token' => 'setBankTransferToken',
        'batch_number' => 'setBatchNumber',
        'billpay' => 'setBillpay',
        'business' => 'setBusiness',
        'business_token' => 'setBusinessToken',
        'card' => 'setCard',
        'card_acceptor' => 'setCardAcceptor',
        'card_holder_model' => 'setCardHolderModel',
        'card_product_token' => 'setCardProductToken',
        'card_security_code_verification' => 'setCardSecurityCodeVerification',
        'card_token' => 'setCardToken',
        'cardholder_authentication_data' => 'setCardholderAuthenticationData',
        'cash_back_amount' => 'setCashBackAmount',
        'chargeback' => 'setChargeback',
        'clearing_record_sequence_number' => 'setClearingRecordSequenceNumber',
        'created_time' => 'setCreatedTime',
        'currency_code' => 'setCurrencyCode',
        'currency_conversion' => 'setCurrencyConversion',
        'deferred_settlement_days' => 'setDeferredSettlementDays',
        'digital_wallet_token' => 'setDigitalWalletToken',
        'digital_wallet_token_transaction_service_provider_info' => 'setDigitalWalletTokenTransactionServiceProviderInfo',
        'direct_deposit' => 'setDirectDeposit',
        'dispute' => 'setDispute',
        'duration' => 'setDuration',
        'enhanced_data_token' => 'setEnhancedDataToken',
        'fee' => 'setFee',
        'fee_transfer' => 'setFeeTransfer',
        'fees' => 'setFees',
        'fraud' => 'setFraud',
        'from_account' => 'setFromAccount',
        'gpa' => 'setGpa',
        'gpa_order' => 'setGpaOrder',
        'gpa_order_unload' => 'setGpaOrderUnload',
        'identifier' => 'setIdentifier',
        'incremental_authorization_transaction_tokens' => 'setIncrementalAuthorizationTransactionTokens',
        'interchange_rate_descriptor' => 'setInterchangeRateDescriptor',
        'is_final_clearing' => 'setIsFinalClearing',
        'is_preauthorization' => 'setIsPreauthorization',
        'isa_indicator' => 'setIsaIndicator',
        'issuer_interchange_amount' => 'setIssuerInterchangeAmount',
        'issuer_payment_node' => 'setIssuerPaymentNode',
        'issuer_received_time' => 'setIssuerReceivedTime',
        'local_transaction_date' => 'setLocalTransactionDate',
        'merchant' => 'setMerchant',
        'merchant_initiated_original_trace_id' => 'setMerchantInitiatedOriginalTraceId',
        'msa_order_unload' => 'setMsaOrderUnload',
        'multi_clearing_sequence_count' => 'setMultiClearingSequenceCount',
        'multi_clearing_sequence_number' => 'setMultiClearingSequenceNumber',
        'national_net_cpd_of_original' => 'setNationalNetCpdOfOriginal',
        'network' => 'setNetwork',
        'network_metadata' => 'setNetworkMetadata',
        'network_reference_id' => 'setNetworkReferenceId',
        'original_credit' => 'setOriginalCredit',
        'peer_transfer' => 'setPeerTransfer',
        'polarity' => 'setPolarity',
        'pos' => 'setPos',
        'preceding_related_transaction_token' => 'setPrecedingRelatedTransactionToken',
        'preceding_transaction' => 'setPrecedingTransaction',
        'program' => 'setProgram',
        'program_transfer' => 'setProgramTransfer',
        'real_time_fee_group' => 'setRealTimeFeeGroup',
        'request_amount' => 'setRequestAmount',
        'response' => 'setResponse',
        'settlement_date' => 'setSettlementDate',
        'settlement_indicator' => 'setSettlementIndicator',
        'standin_approved_by' => 'setStandinApprovedBy',
        'standin_by' => 'setStandinBy',
        'standin_reason' => 'setStandinReason',
        'state' => 'setState',
        'store' => 'setStore',
        'subnetwork' => 'setSubnetwork',
        'token' => 'setToken',
        'transaction_attributes' => 'setTransactionAttributes',
        'transaction_metadata' => 'setTransactionMetadata',
        'type' => 'setType',
        'user' => 'setUser',
        'user_token' => 'setUserToken',
        'user_transaction_time' => 'setUserTransactionTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_funding' => 'getAccountFunding',
        'account_name_verification' => 'getAccountNameVerification',
        'acquirer' => 'getAcquirer',
        'acquirer_fee_amount' => 'getAcquirerFeeAmount',
        'acquirer_reference_data' => 'getAcquirerReferenceData',
        'acquirer_reference_id' => 'getAcquirerReferenceId',
        'acting_user_token' => 'getActingUserToken',
        'address_verification' => 'getAddressVerification',
        'advice_reason_code' => 'getAdviceReasonCode',
        'advice_reason_details' => 'getAdviceReasonDetails',
        'amount' => 'getAmount',
        'amount_to_be_released' => 'getAmountToBeReleased',
        'approval_code' => 'getApprovalCode',
        'atc_information' => 'getAtcInformation',
        'auto_reload' => 'getAutoReload',
        'bank_transfer_token' => 'getBankTransferToken',
        'batch_number' => 'getBatchNumber',
        'billpay' => 'getBillpay',
        'business' => 'getBusiness',
        'business_token' => 'getBusinessToken',
        'card' => 'getCard',
        'card_acceptor' => 'getCardAcceptor',
        'card_holder_model' => 'getCardHolderModel',
        'card_product_token' => 'getCardProductToken',
        'card_security_code_verification' => 'getCardSecurityCodeVerification',
        'card_token' => 'getCardToken',
        'cardholder_authentication_data' => 'getCardholderAuthenticationData',
        'cash_back_amount' => 'getCashBackAmount',
        'chargeback' => 'getChargeback',
        'clearing_record_sequence_number' => 'getClearingRecordSequenceNumber',
        'created_time' => 'getCreatedTime',
        'currency_code' => 'getCurrencyCode',
        'currency_conversion' => 'getCurrencyConversion',
        'deferred_settlement_days' => 'getDeferredSettlementDays',
        'digital_wallet_token' => 'getDigitalWalletToken',
        'digital_wallet_token_transaction_service_provider_info' => 'getDigitalWalletTokenTransactionServiceProviderInfo',
        'direct_deposit' => 'getDirectDeposit',
        'dispute' => 'getDispute',
        'duration' => 'getDuration',
        'enhanced_data_token' => 'getEnhancedDataToken',
        'fee' => 'getFee',
        'fee_transfer' => 'getFeeTransfer',
        'fees' => 'getFees',
        'fraud' => 'getFraud',
        'from_account' => 'getFromAccount',
        'gpa' => 'getGpa',
        'gpa_order' => 'getGpaOrder',
        'gpa_order_unload' => 'getGpaOrderUnload',
        'identifier' => 'getIdentifier',
        'incremental_authorization_transaction_tokens' => 'getIncrementalAuthorizationTransactionTokens',
        'interchange_rate_descriptor' => 'getInterchangeRateDescriptor',
        'is_final_clearing' => 'getIsFinalClearing',
        'is_preauthorization' => 'getIsPreauthorization',
        'isa_indicator' => 'getIsaIndicator',
        'issuer_interchange_amount' => 'getIssuerInterchangeAmount',
        'issuer_payment_node' => 'getIssuerPaymentNode',
        'issuer_received_time' => 'getIssuerReceivedTime',
        'local_transaction_date' => 'getLocalTransactionDate',
        'merchant' => 'getMerchant',
        'merchant_initiated_original_trace_id' => 'getMerchantInitiatedOriginalTraceId',
        'msa_order_unload' => 'getMsaOrderUnload',
        'multi_clearing_sequence_count' => 'getMultiClearingSequenceCount',
        'multi_clearing_sequence_number' => 'getMultiClearingSequenceNumber',
        'national_net_cpd_of_original' => 'getNationalNetCpdOfOriginal',
        'network' => 'getNetwork',
        'network_metadata' => 'getNetworkMetadata',
        'network_reference_id' => 'getNetworkReferenceId',
        'original_credit' => 'getOriginalCredit',
        'peer_transfer' => 'getPeerTransfer',
        'polarity' => 'getPolarity',
        'pos' => 'getPos',
        'preceding_related_transaction_token' => 'getPrecedingRelatedTransactionToken',
        'preceding_transaction' => 'getPrecedingTransaction',
        'program' => 'getProgram',
        'program_transfer' => 'getProgramTransfer',
        'real_time_fee_group' => 'getRealTimeFeeGroup',
        'request_amount' => 'getRequestAmount',
        'response' => 'getResponse',
        'settlement_date' => 'getSettlementDate',
        'settlement_indicator' => 'getSettlementIndicator',
        'standin_approved_by' => 'getStandinApprovedBy',
        'standin_by' => 'getStandinBy',
        'standin_reason' => 'getStandinReason',
        'state' => 'getState',
        'store' => 'getStore',
        'subnetwork' => 'getSubnetwork',
        'token' => 'getToken',
        'transaction_attributes' => 'getTransactionAttributes',
        'transaction_metadata' => 'getTransactionMetadata',
        'type' => 'getType',
        'user' => 'getUser',
        'user_token' => 'getUserToken',
        'user_transaction_time' => 'getUserTransactionTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ISA_INDICATOR_MULTI_CURRENCY = 'MULTI_CURRENCY';
    const ISA_INDICATOR_SINGLE_CURRENCY = 'SINGLE_CURRENCY';
    const ISA_INDICATOR_REBATE_CANCELLED = 'REBATE_CANCELLED';
    const ISA_INDICATOR_MULTI_CURRENCY_NON_US_COUNTRIES = 'MULTI_CURRENCY_NON_US_COUNTRIES';
    const ISA_INDICATOR_SINGLE_CURRENCY_PAID_BY_ISSUER = 'SINGLE_CURRENCY_PAID_BY_ISSUER';
    const ISA_INDICATOR_NO_CHARGE_ASSESSED = 'NO_CHARGE_ASSESSED';
    const POLARITY_CREDIT = 'CREDIT';
    const POLARITY_DEBIT = 'DEBIT';
    const POLARITY_PENDING_CREDIT = 'PENDING_CREDIT';
    const POLARITY_PENDING_DEBIT = 'PENDING_DEBIT';
    const STATE_PENDING = 'PENDING';
    const STATE_CLEARED = 'CLEARED';
    const STATE_COMPLETION = 'COMPLETION';
    const STATE_DECLINED = 'DECLINED';
    const STATE_ERROR = 'ERROR';
    const TYPE_GPA_CREDIT = 'gpa.credit';
    const TYPE_GPA_CREDIT_PENDING = 'gpa.credit.pending';
    const TYPE_GPA_CREDIT_PENDING_REVERSAL = 'gpa.credit.pending.reversal';
    const TYPE_GPA_CREDIT_REVERSAL = 'gpa.credit.reversal';
    const TYPE_GPA_CREDIT_NETWORKLOAD = 'gpa.credit.networkload';
    const TYPE_GPA_CREDIT_NETWORKLOAD_REVERSAL = 'gpa.credit.networkload.reversal';
    const TYPE_GPA_DEBIT_NETWORKLOAD = 'gpa.debit.networkload';
    const TYPE_GPA_DEBIT = 'gpa.debit';
    const TYPE_GPA_DEBIT_PENDING = 'gpa.debit.pending';
    const TYPE_GPA_DEBIT_PENDING_REVERSAL = 'gpa.debit.pending.reversal';
    const TYPE_GPA_GRANT = 'gpa.grant';
    const TYPE_GPA_CREDIT_ISSUEROPERATOR = 'gpa.credit.issueroperator';
    const TYPE_GPA_DEBIT_ISSUEROPERATOR = 'gpa.debit.issueroperator';
    const TYPE_GPA_CREDIT_CHARGEBACK = 'gpa.credit.chargeback';
    const TYPE_GPA_CREDIT_CHARGEBACK_REVERSAL = 'gpa.credit.chargeback.reversal';
    const TYPE_GPA_CREDIT_BILLPAYMENT = 'gpa.credit.billpayment';
    const TYPE_GPA_CREDIT_AUTHORIZATION_BILLPAYMENT = 'gpa.credit.authorization.billpayment';
    const TYPE_GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL = 'gpa.credit.authorization.billpayment.reversal';
    const TYPE_MSA_CREDIT_PENDING = 'msa.credit.pending';
    const TYPE_MSA_CREDIT_PENDING_REVERSAL = 'msa.credit.pending.reversal';
    const TYPE_MSA_CREDIT_REVERSAL = 'msa.credit.reversal';
    const TYPE_MSA_CREDIT = 'msa.credit';
    const TYPE_MSA_DEBIT_PENDING = 'msa.debit.pending';
    const TYPE_MSA_DEBIT_PENDING_REVERSAL = 'msa.debit.pending.reversal';
    const TYPE_MSA_DEBIT = 'msa.debit';
    const TYPE_MSA_CREDIT_CHARGEBACK = 'msa.credit.chargeback';
    const TYPE_MSA_CREDIT_CHARGEBACK_REVERSAL = 'msa.credit.chargeback.reversal';
    const TYPE_AUTHORIZATION = 'authorization';
    const TYPE_AUTHORIZATION_ADVICE = 'authorization.advice';
    const TYPE_AUTHORIZATION_REVERSAL = 'authorization.reversal';
    const TYPE_AUTHORIZATION_CLEARING = 'authorization.clearing';
    const TYPE_AUTHORIZATION_REVERSAL_ISSUEREXPIRATION = 'authorization.reversal.issuerexpiration';
    const TYPE_DISPUTE_CREDIT = 'dispute.credit';
    const TYPE_DISPUTE_DEBIT = 'dispute.debit';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK = 'authorization.clearing.chargeback';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL = 'authorization.clearing.chargeback.reversal';
    const TYPE_REFUND = 'refund';
    const TYPE_PINDEBIT_ATM_WITHDRAWAL = 'pindebit.atm.withdrawal';
    const TYPE_PINDEBIT_BALANCEINQUIRY = 'pindebit.balanceinquiry';
    const TYPE_PINDEBIT_CASHBACK = 'pindebit.cashback';
    const TYPE_PINDEBIT_CHECKAVS = 'pindebit.checkavs';
    const TYPE_PINDEBIT = 'pindebit';
    const TYPE_PROGRAMRESERVE_CREDIT = 'programreserve.credit';
    const TYPE_PROGRAMRESERVE_DEBIT = 'programreserve.debit';
    const TYPE_FEE_CHARGE_PENDING = 'fee.charge.pending';
    const TYPE_FEE_CHARGE = 'fee.charge';
    const TYPE_FEE_CHARGE_REFUND = 'fee.charge.refund';
    const TYPE_FEE_CHARGE_REVERSAL = 'fee.charge.reversal';
    const TYPE_FUNDS_EXPIRE = 'funds.expire';
    const TYPE_REWARD_EARN = 'reward.earn';
    const TYPE_TRANSFER_PEER = 'transfer.peer';
    const TYPE_TRANSFER_FEE = 'transfer.fee';
    const TYPE_ACCOUNT_FUNDING_AUTHORIZATION = 'account.funding.authorization';
    const TYPE_ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL = 'account.funding.authorization.reversal';
    const TYPE_ACCOUNT_FUNDING_AUTHORIZATION_CLEARING = 'account.funding.authorization.clearing';
    const TYPE_ACCOUNT_FUNDING_AUTH_PLUS_CAPTURE = 'account.funding.auth_plus_capture';
    const TYPE_ACCOUNT_FUNDING_AUTH_PLUS_CAPTURE_REVERSAL = 'account.funding.auth_plus_capture.reversal';
    const TYPE_ACCOUNT_CREDIT = 'account.credit';
    const TYPE_ACCOUNT_DEBIT = 'account.debit';
    const TYPE_BALANCEINQUIRY = 'balanceinquiry';
    const TYPE_AUTHORIZATION_ATM_WITHDRAWAL = 'authorization.atm.withdrawal';
    const TYPE_AUTHORIZATION_PIN_CHANGE = 'authorization.pin.change';
    const TYPE_AUTHORIZATION_PIN_UNBLOCK = 'authorization.pin.unblock';
    const TYPE_AUTHORIZATION_CLEARING_ATM_WITHDRAWAL = 'authorization.clearing.atm.withdrawal';
    const TYPE_AUTHORIZATION_CASHBACK = 'authorization.cashback';
    const TYPE_AUTHORIZATION_CLEARING_CASHBACK = 'authorization.clearing.cashback';
    const TYPE_TRANSFER_PROGRAM = 'transfer.program';
    const TYPE_AUTHORIZATION_QUASI_CASH = 'authorization.quasi.cash';
    const TYPE_AUTHORIZATION_CLEARING_QUASI_CASH = 'authorization.clearing.quasi.cash';
    const TYPE_AUTHORIZATION_INCREMENTAL = 'authorization.incremental';
    const TYPE_GPA_CREDIT_AUTHORIZATION = 'gpa.credit.authorization';
    const TYPE_GPA_CREDIT_AUTHORIZATION_REVERSAL = 'gpa.credit.authorization.reversal';
    const TYPE_GPA_DEBIT_AUTHORIZATION = 'gpa.debit.authorization';
    const TYPE_GPA_DEBIT_REVERSAL = 'gpa.debit.reversal';
    const TYPE_ORIGINAL_CREDIT_AUTHORIZATION = 'original.credit.authorization';
    const TYPE_ORIGINAL_CREDIT_AUTHORIZATION_REVERSAL = 'original.credit.authorization.reversal';
    const TYPE_ORIGINAL_CREDIT_AUTHORIZATION_CLEARING = 'original.credit.authorization.clearing';
    const TYPE_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE = 'original.credit.auth_plus_capture';
    const TYPE_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE_REVERSAL = 'original.credit.auth_plus_capture.reversal';
    const TYPE_REFUND_AUTHORIZATION = 'refund.authorization';
    const TYPE_REFUND_AUTHORIZATION_ADVICE = 'refund.authorization.advice';
    const TYPE_REFUND_AUTHORIZATION_CLEARING = 'refund.authorization.clearing';
    const TYPE_REFUND_AUTHORIZATION_REVERSAL = 'refund.authorization.reversal';
    const TYPE_TOKEN_ACTIVATION_REQUEST = 'token.activation-request';
    const TYPE_TOKEN_ADVICE = 'token.advice';
    const TYPE_PINDEBIT_AUTHORIZATION = 'pindebit.authorization';
    const TYPE_PINDEBIT_AUTHORIZATION_CLEARING = 'pindebit.authorization.clearing';
    const TYPE_PINDEBIT_AUTHORIZATION_REVERSAL = 'pindebit.authorization.reversal';
    const TYPE_PINDEBIT_AUTHORIZATION_REVERSAL_ISSUEREXPIRATION = 'pindebit.authorization.reversal.issuerexpiration';
    const TYPE_AUTHORIZATION_STANDIN = 'authorization.standin';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED = 'authorization.clearing.chargeback.completed';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT = 'authorization.clearing.chargeback.provisional.credit';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT = 'authorization.clearing.chargeback.provisional.debit';
    const TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF = 'authorization.clearing.chargeback.writeoff';
    const TYPE_DIRECTDEPOSIT_CREDIT = 'directdeposit.credit';
    const TYPE_DIRECTDEPOSIT_CREDIT_PENDING = 'directdeposit.credit.pending';
    const TYPE_DIRECTDEPOSIT_CREDIT_REJECT = 'directdeposit.credit.reject';
    const TYPE_DIRECTDEPOSIT_CREDIT_PENDING_REVERSAL = 'directdeposit.credit.pending.reversal';
    const TYPE_DIRECTDEPOSIT_CREDIT_REVERSAL = 'directdeposit.credit.reversal';
    const TYPE_DIRECTDEPOSIT_DEBIT = 'directdeposit.debit';
    const TYPE_DIRECTDEPOSIT_DEBIT_PENDING = 'directdeposit.debit.pending';
    const TYPE_DIRECTDEPOSIT_DEBIT_REJECT = 'directdeposit.debit.reject';
    const TYPE_DIRECTDEPOSIT_DEBIT_REVERSAL = 'directdeposit.debit.reversal';
    const TYPE_PIN_CHANGE_REVERSAL = 'pin.change.reversal';
    const TYPE_PIN_CHANGE_REVERSAL_ADVICE = 'pin.change.reversal.advice';
    const TYPE_DIRECTDEPOSIT_DEBIT_PENDING_REVERSAL = 'directdeposit.debit.pending.reversal';
    const TYPE_PINDEBIT_CHARGEBACK = 'pindebit.chargeback';
    const TYPE_PINDEBIT_CHARGEBACK_COMPLETED = 'pindebit.chargeback.completed';
    const TYPE_PINDEBIT_CHARGEBACK_PROVISIONAL_CREDIT = 'pindebit.chargeback.provisional.credit';
    const TYPE_PINDEBIT_CHARGEBACK_PROVISIONAL_DEBIT = 'pindebit.chargeback.provisional.debit';
    const TYPE_PINDEBIT_CHARGEBACK_REVERSAL = 'pindebit.chargeback.reversal';
    const TYPE_PINDEBIT_CHARGEBACK_WRITEOFF = 'pindebit.chargeback.writeoff';
    const TYPE_PINDEBIT_PIN_CHANGE = 'pindebit.pin.change';
    const TYPE_PINDEBIT_PIN_UNBLOCK = 'pindebit.pin.unblock';
    const TYPE_PINDEBIT_CREDIT_ADJUSTMENT = 'pindebit.credit.adjustment';
    const TYPE_PINDEBIT_QUASICASH = 'pindebit.quasicash';
    const TYPE_PINDEBIT_QUASI_CASH = 'pindebit.quasi.cash';
    const TYPE_PINDEBIT_REFUND = 'pindebit.refund';
    const TYPE_PINDEBIT_REFUND_REVERSAL = 'pindebit.refund.reversal';
    const TYPE_PINDEBIT_REVERSAL = 'pindebit.reversal';
    const TYPE_PINDEBIT_TRANSFER = 'pindebit.transfer';
    const TYPE_PUSHTOCARD_DEBIT = 'pushtocard.debit';
    const TYPE_PUSHTOCARD_REVERSAL = 'pushtocard.reversal';
    const TYPE_CREDIT_ADJUSTMENT = 'credit.adjustment';
    const TYPE_DEBIT_ADJUSTMENT = 'debit.adjustment';
    const TYPE_PIN_CHANGE_VIA_API = 'pin.change.via.api';
    const TYPE_UNKNOWN = 'unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsaIndicatorAllowableValues()
    {
        return [
            self::ISA_INDICATOR_MULTI_CURRENCY,
            self::ISA_INDICATOR_SINGLE_CURRENCY,
            self::ISA_INDICATOR_REBATE_CANCELLED,
            self::ISA_INDICATOR_MULTI_CURRENCY_NON_US_COUNTRIES,
            self::ISA_INDICATOR_SINGLE_CURRENCY_PAID_BY_ISSUER,
            self::ISA_INDICATOR_NO_CHARGE_ASSESSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolarityAllowableValues()
    {
        return [
            self::POLARITY_CREDIT,
            self::POLARITY_DEBIT,
            self::POLARITY_PENDING_CREDIT,
            self::POLARITY_PENDING_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_CLEARED,
            self::STATE_COMPLETION,
            self::STATE_DECLINED,
            self::STATE_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GPA_CREDIT,
            self::TYPE_GPA_CREDIT_PENDING,
            self::TYPE_GPA_CREDIT_PENDING_REVERSAL,
            self::TYPE_GPA_CREDIT_REVERSAL,
            self::TYPE_GPA_CREDIT_NETWORKLOAD,
            self::TYPE_GPA_CREDIT_NETWORKLOAD_REVERSAL,
            self::TYPE_GPA_DEBIT_NETWORKLOAD,
            self::TYPE_GPA_DEBIT,
            self::TYPE_GPA_DEBIT_PENDING,
            self::TYPE_GPA_DEBIT_PENDING_REVERSAL,
            self::TYPE_GPA_GRANT,
            self::TYPE_GPA_CREDIT_ISSUEROPERATOR,
            self::TYPE_GPA_DEBIT_ISSUEROPERATOR,
            self::TYPE_GPA_CREDIT_CHARGEBACK,
            self::TYPE_GPA_CREDIT_CHARGEBACK_REVERSAL,
            self::TYPE_GPA_CREDIT_BILLPAYMENT,
            self::TYPE_GPA_CREDIT_AUTHORIZATION_BILLPAYMENT,
            self::TYPE_GPA_CREDIT_AUTHORIZATION_BILLPAYMENT_REVERSAL,
            self::TYPE_MSA_CREDIT_PENDING,
            self::TYPE_MSA_CREDIT_PENDING_REVERSAL,
            self::TYPE_MSA_CREDIT_REVERSAL,
            self::TYPE_MSA_CREDIT,
            self::TYPE_MSA_DEBIT_PENDING,
            self::TYPE_MSA_DEBIT_PENDING_REVERSAL,
            self::TYPE_MSA_DEBIT,
            self::TYPE_MSA_CREDIT_CHARGEBACK,
            self::TYPE_MSA_CREDIT_CHARGEBACK_REVERSAL,
            self::TYPE_AUTHORIZATION,
            self::TYPE_AUTHORIZATION_ADVICE,
            self::TYPE_AUTHORIZATION_REVERSAL,
            self::TYPE_AUTHORIZATION_CLEARING,
            self::TYPE_AUTHORIZATION_REVERSAL_ISSUEREXPIRATION,
            self::TYPE_DISPUTE_CREDIT,
            self::TYPE_DISPUTE_DEBIT,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_REVERSAL,
            self::TYPE_REFUND,
            self::TYPE_PINDEBIT_ATM_WITHDRAWAL,
            self::TYPE_PINDEBIT_BALANCEINQUIRY,
            self::TYPE_PINDEBIT_CASHBACK,
            self::TYPE_PINDEBIT_CHECKAVS,
            self::TYPE_PINDEBIT,
            self::TYPE_PROGRAMRESERVE_CREDIT,
            self::TYPE_PROGRAMRESERVE_DEBIT,
            self::TYPE_FEE_CHARGE_PENDING,
            self::TYPE_FEE_CHARGE,
            self::TYPE_FEE_CHARGE_REFUND,
            self::TYPE_FEE_CHARGE_REVERSAL,
            self::TYPE_FUNDS_EXPIRE,
            self::TYPE_REWARD_EARN,
            self::TYPE_TRANSFER_PEER,
            self::TYPE_TRANSFER_FEE,
            self::TYPE_ACCOUNT_FUNDING_AUTHORIZATION,
            self::TYPE_ACCOUNT_FUNDING_AUTHORIZATION_REVERSAL,
            self::TYPE_ACCOUNT_FUNDING_AUTHORIZATION_CLEARING,
            self::TYPE_ACCOUNT_FUNDING_AUTH_PLUS_CAPTURE,
            self::TYPE_ACCOUNT_FUNDING_AUTH_PLUS_CAPTURE_REVERSAL,
            self::TYPE_ACCOUNT_CREDIT,
            self::TYPE_ACCOUNT_DEBIT,
            self::TYPE_BALANCEINQUIRY,
            self::TYPE_AUTHORIZATION_ATM_WITHDRAWAL,
            self::TYPE_AUTHORIZATION_PIN_CHANGE,
            self::TYPE_AUTHORIZATION_PIN_UNBLOCK,
            self::TYPE_AUTHORIZATION_CLEARING_ATM_WITHDRAWAL,
            self::TYPE_AUTHORIZATION_CASHBACK,
            self::TYPE_AUTHORIZATION_CLEARING_CASHBACK,
            self::TYPE_TRANSFER_PROGRAM,
            self::TYPE_AUTHORIZATION_QUASI_CASH,
            self::TYPE_AUTHORIZATION_CLEARING_QUASI_CASH,
            self::TYPE_AUTHORIZATION_INCREMENTAL,
            self::TYPE_GPA_CREDIT_AUTHORIZATION,
            self::TYPE_GPA_CREDIT_AUTHORIZATION_REVERSAL,
            self::TYPE_GPA_DEBIT_AUTHORIZATION,
            self::TYPE_GPA_DEBIT_REVERSAL,
            self::TYPE_ORIGINAL_CREDIT_AUTHORIZATION,
            self::TYPE_ORIGINAL_CREDIT_AUTHORIZATION_REVERSAL,
            self::TYPE_ORIGINAL_CREDIT_AUTHORIZATION_CLEARING,
            self::TYPE_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE,
            self::TYPE_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE_REVERSAL,
            self::TYPE_REFUND_AUTHORIZATION,
            self::TYPE_REFUND_AUTHORIZATION_ADVICE,
            self::TYPE_REFUND_AUTHORIZATION_CLEARING,
            self::TYPE_REFUND_AUTHORIZATION_REVERSAL,
            self::TYPE_TOKEN_ACTIVATION_REQUEST,
            self::TYPE_TOKEN_ADVICE,
            self::TYPE_PINDEBIT_AUTHORIZATION,
            self::TYPE_PINDEBIT_AUTHORIZATION_CLEARING,
            self::TYPE_PINDEBIT_AUTHORIZATION_REVERSAL,
            self::TYPE_PINDEBIT_AUTHORIZATION_REVERSAL_ISSUEREXPIRATION,
            self::TYPE_AUTHORIZATION_STANDIN,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_COMPLETED,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_CREDIT,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_PROVISIONAL_DEBIT,
            self::TYPE_AUTHORIZATION_CLEARING_CHARGEBACK_WRITEOFF,
            self::TYPE_DIRECTDEPOSIT_CREDIT,
            self::TYPE_DIRECTDEPOSIT_CREDIT_PENDING,
            self::TYPE_DIRECTDEPOSIT_CREDIT_REJECT,
            self::TYPE_DIRECTDEPOSIT_CREDIT_PENDING_REVERSAL,
            self::TYPE_DIRECTDEPOSIT_CREDIT_REVERSAL,
            self::TYPE_DIRECTDEPOSIT_DEBIT,
            self::TYPE_DIRECTDEPOSIT_DEBIT_PENDING,
            self::TYPE_DIRECTDEPOSIT_DEBIT_REJECT,
            self::TYPE_DIRECTDEPOSIT_DEBIT_REVERSAL,
            self::TYPE_PIN_CHANGE_REVERSAL,
            self::TYPE_PIN_CHANGE_REVERSAL_ADVICE,
            self::TYPE_DIRECTDEPOSIT_DEBIT_PENDING_REVERSAL,
            self::TYPE_PINDEBIT_CHARGEBACK,
            self::TYPE_PINDEBIT_CHARGEBACK_COMPLETED,
            self::TYPE_PINDEBIT_CHARGEBACK_PROVISIONAL_CREDIT,
            self::TYPE_PINDEBIT_CHARGEBACK_PROVISIONAL_DEBIT,
            self::TYPE_PINDEBIT_CHARGEBACK_REVERSAL,
            self::TYPE_PINDEBIT_CHARGEBACK_WRITEOFF,
            self::TYPE_PINDEBIT_PIN_CHANGE,
            self::TYPE_PINDEBIT_PIN_UNBLOCK,
            self::TYPE_PINDEBIT_CREDIT_ADJUSTMENT,
            self::TYPE_PINDEBIT_QUASICASH,
            self::TYPE_PINDEBIT_QUASI_CASH,
            self::TYPE_PINDEBIT_REFUND,
            self::TYPE_PINDEBIT_REFUND_REVERSAL,
            self::TYPE_PINDEBIT_REVERSAL,
            self::TYPE_PINDEBIT_TRANSFER,
            self::TYPE_PUSHTOCARD_DEBIT,
            self::TYPE_PUSHTOCARD_REVERSAL,
            self::TYPE_CREDIT_ADJUSTMENT,
            self::TYPE_DEBIT_ADJUSTMENT,
            self::TYPE_PIN_CHANGE_VIA_API,
            self::TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_funding'] = $data['account_funding'] ?? null;
        $this->container['account_name_verification'] = $data['account_name_verification'] ?? null;
        $this->container['acquirer'] = $data['acquirer'] ?? null;
        $this->container['acquirer_fee_amount'] = $data['acquirer_fee_amount'] ?? null;
        $this->container['acquirer_reference_data'] = $data['acquirer_reference_data'] ?? null;
        $this->container['acquirer_reference_id'] = $data['acquirer_reference_id'] ?? null;
        $this->container['acting_user_token'] = $data['acting_user_token'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['advice_reason_code'] = $data['advice_reason_code'] ?? null;
        $this->container['advice_reason_details'] = $data['advice_reason_details'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['amount_to_be_released'] = $data['amount_to_be_released'] ?? null;
        $this->container['approval_code'] = $data['approval_code'] ?? null;
        $this->container['atc_information'] = $data['atc_information'] ?? null;
        $this->container['auto_reload'] = $data['auto_reload'] ?? null;
        $this->container['bank_transfer_token'] = $data['bank_transfer_token'] ?? null;
        $this->container['batch_number'] = $data['batch_number'] ?? null;
        $this->container['billpay'] = $data['billpay'] ?? null;
        $this->container['business'] = $data['business'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['card'] = $data['card'] ?? null;
        $this->container['card_acceptor'] = $data['card_acceptor'] ?? null;
        $this->container['card_holder_model'] = $data['card_holder_model'] ?? null;
        $this->container['card_product_token'] = $data['card_product_token'] ?? null;
        $this->container['card_security_code_verification'] = $data['card_security_code_verification'] ?? null;
        $this->container['card_token'] = $data['card_token'] ?? null;
        $this->container['cardholder_authentication_data'] = $data['cardholder_authentication_data'] ?? null;
        $this->container['cash_back_amount'] = $data['cash_back_amount'] ?? null;
        $this->container['chargeback'] = $data['chargeback'] ?? null;
        $this->container['clearing_record_sequence_number'] = $data['clearing_record_sequence_number'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['currency_conversion'] = $data['currency_conversion'] ?? null;
        $this->container['deferred_settlement_days'] = $data['deferred_settlement_days'] ?? null;
        $this->container['digital_wallet_token'] = $data['digital_wallet_token'] ?? null;
        $this->container['digital_wallet_token_transaction_service_provider_info'] = $data['digital_wallet_token_transaction_service_provider_info'] ?? null;
        $this->container['direct_deposit'] = $data['direct_deposit'] ?? null;
        $this->container['dispute'] = $data['dispute'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['enhanced_data_token'] = $data['enhanced_data_token'] ?? null;
        $this->container['fee'] = $data['fee'] ?? null;
        $this->container['fee_transfer'] = $data['fee_transfer'] ?? null;
        $this->container['fees'] = $data['fees'] ?? null;
        $this->container['fraud'] = $data['fraud'] ?? null;
        $this->container['from_account'] = $data['from_account'] ?? null;
        $this->container['gpa'] = $data['gpa'] ?? null;
        $this->container['gpa_order'] = $data['gpa_order'] ?? null;
        $this->container['gpa_order_unload'] = $data['gpa_order_unload'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['incremental_authorization_transaction_tokens'] = $data['incremental_authorization_transaction_tokens'] ?? null;
        $this->container['interchange_rate_descriptor'] = $data['interchange_rate_descriptor'] ?? null;
        $this->container['is_final_clearing'] = $data['is_final_clearing'] ?? null;
        $this->container['is_preauthorization'] = $data['is_preauthorization'] ?? false;
        $this->container['isa_indicator'] = $data['isa_indicator'] ?? null;
        $this->container['issuer_interchange_amount'] = $data['issuer_interchange_amount'] ?? null;
        $this->container['issuer_payment_node'] = $data['issuer_payment_node'] ?? null;
        $this->container['issuer_received_time'] = $data['issuer_received_time'] ?? null;
        $this->container['local_transaction_date'] = $data['local_transaction_date'] ?? null;
        $this->container['merchant'] = $data['merchant'] ?? null;
        $this->container['merchant_initiated_original_trace_id'] = $data['merchant_initiated_original_trace_id'] ?? null;
        $this->container['msa_order_unload'] = $data['msa_order_unload'] ?? null;
        $this->container['multi_clearing_sequence_count'] = $data['multi_clearing_sequence_count'] ?? null;
        $this->container['multi_clearing_sequence_number'] = $data['multi_clearing_sequence_number'] ?? null;
        $this->container['national_net_cpd_of_original'] = $data['national_net_cpd_of_original'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['network_metadata'] = $data['network_metadata'] ?? null;
        $this->container['network_reference_id'] = $data['network_reference_id'] ?? null;
        $this->container['original_credit'] = $data['original_credit'] ?? null;
        $this->container['peer_transfer'] = $data['peer_transfer'] ?? null;
        $this->container['polarity'] = $data['polarity'] ?? null;
        $this->container['pos'] = $data['pos'] ?? null;
        $this->container['preceding_related_transaction_token'] = $data['preceding_related_transaction_token'] ?? null;
        $this->container['preceding_transaction'] = $data['preceding_transaction'] ?? null;
        $this->container['program'] = $data['program'] ?? null;
        $this->container['program_transfer'] = $data['program_transfer'] ?? null;
        $this->container['real_time_fee_group'] = $data['real_time_fee_group'] ?? null;
        $this->container['request_amount'] = $data['request_amount'] ?? null;
        $this->container['response'] = $data['response'] ?? null;
        $this->container['settlement_date'] = $data['settlement_date'] ?? null;
        $this->container['settlement_indicator'] = $data['settlement_indicator'] ?? null;
        $this->container['standin_approved_by'] = $data['standin_approved_by'] ?? null;
        $this->container['standin_by'] = $data['standin_by'] ?? null;
        $this->container['standin_reason'] = $data['standin_reason'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['store'] = $data['store'] ?? null;
        $this->container['subnetwork'] = $data['subnetwork'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transaction_attributes'] = $data['transaction_attributes'] ?? null;
        $this->container['transaction_metadata'] = $data['transaction_metadata'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
        $this->container['user_transaction_time'] = $data['user_transaction_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['acting_user_token'] === null) {
            $invalidProperties[] = "'acting_user_token' can't be null";
        }
        if ((mb_strlen($this->container['acting_user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'acting_user_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['acting_user_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'acting_user_token', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (!is_null($this->container['business_token']) && (mb_strlen($this->container['business_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'business_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['business_token']) && (mb_strlen($this->container['business_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['card_product_token']) && (mb_strlen($this->container['card_product_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['card_product_token']) && (mb_strlen($this->container['card_product_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['card_token']) && (mb_strlen($this->container['card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['card_token']) && (mb_strlen($this->container['card_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIsaIndicatorAllowableValues();
        if (!is_null($this->container['isa_indicator']) && !in_array($this->container['isa_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isa_indicator', must be one of '%s'",
                $this->container['isa_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPolarityAllowableValues();
        if (!is_null($this->container['polarity']) && !in_array($this->container['polarity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'polarity', must be one of '%s'",
                $this->container['polarity'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['user_token']) && (mb_strlen($this->container['user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['user_token']) && (mb_strlen($this->container['user_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_funding
     *
     * @return \OpenAPI\Client\Model\AccountFunding|null
     */
    public function getAccountFunding()
    {
        return $this->container['account_funding'];
    }

    /**
     * Sets account_funding
     *
     * @param \OpenAPI\Client\Model\AccountFunding|null $account_funding account_funding
     *
     * @return self
     */
    public function setAccountFunding($account_funding)
    {
        $this->container['account_funding'] = $account_funding;

        return $this;
    }

    /**
     * Gets account_name_verification
     *
     * @return \OpenAPI\Client\Model\AccountNameVerificationModel|null
     */
    public function getAccountNameVerification()
    {
        return $this->container['account_name_verification'];
    }

    /**
     * Sets account_name_verification
     *
     * @param \OpenAPI\Client\Model\AccountNameVerificationModel|null $account_name_verification account_name_verification
     *
     * @return self
     */
    public function setAccountNameVerification($account_name_verification)
    {
        $this->container['account_name_verification'] = $account_name_verification;

        return $this;
    }

    /**
     * Gets acquirer
     *
     * @return \OpenAPI\Client\Model\Acquirer|null
     */
    public function getAcquirer()
    {
        return $this->container['acquirer'];
    }

    /**
     * Sets acquirer
     *
     * @param \OpenAPI\Client\Model\Acquirer|null $acquirer acquirer
     *
     * @return self
     */
    public function setAcquirer($acquirer)
    {
        $this->container['acquirer'] = $acquirer;

        return $this;
    }

    /**
     * Gets acquirer_fee_amount
     *
     * @return float|null
     */
    public function getAcquirerFeeAmount()
    {
        return $this->container['acquirer_fee_amount'];
    }

    /**
     * Sets acquirer_fee_amount
     *
     * @param float|null $acquirer_fee_amount Indicates the amount of the acquirer fee. Account holders are sometimes charged an acquirer fee for card use at ATMs, fuel dispensers, and so on.
     *
     * @return self
     */
    public function setAcquirerFeeAmount($acquirer_fee_amount)
    {
        $this->container['acquirer_fee_amount'] = $acquirer_fee_amount;

        return $this;
    }

    /**
     * Gets acquirer_reference_data
     *
     * @return string|null
     */
    public function getAcquirerReferenceData()
    {
        return $this->container['acquirer_reference_data'];
    }

    /**
     * Sets acquirer_reference_data
     *
     * @param string|null $acquirer_reference_data acquirer_reference_data
     *
     * @return self
     */
    public function setAcquirerReferenceData($acquirer_reference_data)
    {
        $this->container['acquirer_reference_data'] = $acquirer_reference_data;

        return $this;
    }

    /**
     * Gets acquirer_reference_id
     *
     * @return string|null
     */
    public function getAcquirerReferenceId()
    {
        return $this->container['acquirer_reference_id'];
    }

    /**
     * Sets acquirer_reference_id
     *
     * @param string|null $acquirer_reference_id Acquirer-assigned unique identifier of the transaction. Useful for settlement and reconciliation.
     *
     * @return self
     */
    public function setAcquirerReferenceId($acquirer_reference_id)
    {
        $this->container['acquirer_reference_id'] = $acquirer_reference_id;

        return $this;
    }

    /**
     * Gets acting_user_token
     *
     * @return string
     */
    public function getActingUserToken()
    {
        return $this->container['acting_user_token'];
    }

    /**
     * Sets acting_user_token
     *
     * @param string $acting_user_token Unique identifier of the user who conducted the transaction. This might be a child user configured to share its parent's account balance.
     *
     * @return self
     */
    public function setActingUserToken($acting_user_token)
    {
        if ((mb_strlen($acting_user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $acting_user_token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($acting_user_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $acting_user_token when calling TransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['acting_user_token'] = $acting_user_token;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return \OpenAPI\Client\Model\AddressVerificationModel|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param \OpenAPI\Client\Model\AddressVerificationModel|null $address_verification address_verification
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets advice_reason_code
     *
     * @return string|null
     */
    public function getAdviceReasonCode()
    {
        return $this->container['advice_reason_code'];
    }

    /**
     * Sets advice_reason_code
     *
     * @param string|null $advice_reason_code advice_reason_code
     *
     * @return self
     */
    public function setAdviceReasonCode($advice_reason_code)
    {
        $this->container['advice_reason_code'] = $advice_reason_code;

        return $this;
    }

    /**
     * Gets advice_reason_details
     *
     * @return string|null
     */
    public function getAdviceReasonDetails()
    {
        return $this->container['advice_reason_details'];
    }

    /**
     * Sets advice_reason_details
     *
     * @param string|null $advice_reason_details advice_reason_details
     *
     * @return self
     */
    public function setAdviceReasonDetails($advice_reason_details)
    {
        $this->container['advice_reason_details'] = $advice_reason_details;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of the transaction.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_to_be_released
     *
     * @return float|null
     */
    public function getAmountToBeReleased()
    {
        return $this->container['amount_to_be_released'];
    }

    /**
     * Sets amount_to_be_released
     *
     * @param float|null $amount_to_be_released Amount of original authorization to be released. This field appears in final clearing transactions where the clearing amount is lower than the authorization amount.
     *
     * @return self
     */
    public function setAmountToBeReleased($amount_to_be_released)
    {
        $this->container['amount_to_be_released'] = $amount_to_be_released;

        return $this;
    }

    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code Unique identifier assigned to an authorization, printed on the receipt at point of sale.
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets atc_information
     *
     * @return \OpenAPI\Client\Model\AtcInformation|null
     */
    public function getAtcInformation()
    {
        return $this->container['atc_information'];
    }

    /**
     * Sets atc_information
     *
     * @param \OpenAPI\Client\Model\AtcInformation|null $atc_information atc_information
     *
     * @return self
     */
    public function setAtcInformation($atc_information)
    {
        $this->container['atc_information'] = $atc_information;

        return $this;
    }

    /**
     * Gets auto_reload
     *
     * @return \OpenAPI\Client\Model\AutoReloadModel|null
     */
    public function getAutoReload()
    {
        return $this->container['auto_reload'];
    }

    /**
     * Sets auto_reload
     *
     * @param \OpenAPI\Client\Model\AutoReloadModel|null $auto_reload auto_reload
     *
     * @return self
     */
    public function setAutoReload($auto_reload)
    {
        $this->container['auto_reload'] = $auto_reload;

        return $this;
    }

    /**
     * Gets bank_transfer_token
     *
     * @return string|null
     */
    public function getBankTransferToken()
    {
        return $this->container['bank_transfer_token'];
    }

    /**
     * Sets bank_transfer_token
     *
     * @param string|null $bank_transfer_token bank_transfer_token
     *
     * @return self
     */
    public function setBankTransferToken($bank_transfer_token)
    {
        $this->container['bank_transfer_token'] = $bank_transfer_token;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number The batch number of the transaction.
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets billpay
     *
     * @return \OpenAPI\Client\Model\BillPayResponse|null
     */
    public function getBillpay()
    {
        return $this->container['billpay'];
    }

    /**
     * Sets billpay
     *
     * @param \OpenAPI\Client\Model\BillPayResponse|null $billpay billpay
     *
     * @return self
     */
    public function setBillpay($billpay)
    {
        $this->container['billpay'] = $billpay;

        return $this;
    }

    /**
     * Gets business
     *
     * @return \OpenAPI\Client\Model\BusinessMetadata|null
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param \OpenAPI\Client\Model\BusinessMetadata|null $business business
     *
     * @return self
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token Unique identifier of the business that owns the account that funded the transaction.
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        if (!is_null($business_token) && (mb_strlen($business_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $business_token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if (!is_null($business_token) && (mb_strlen($business_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_token when calling TransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \OpenAPI\Client\Model\CardResponse|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \OpenAPI\Client\Model\CardResponse|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets card_acceptor
     *
     * @return \OpenAPI\Client\Model\TransactionCardAcceptor|null
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     *
     * @param \OpenAPI\Client\Model\TransactionCardAcceptor|null $card_acceptor card_acceptor
     *
     * @return self
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets card_holder_model
     *
     * @return \OpenAPI\Client\Model\UserCardHolderResponse|null
     */
    public function getCardHolderModel()
    {
        return $this->container['card_holder_model'];
    }

    /**
     * Sets card_holder_model
     *
     * @param \OpenAPI\Client\Model\UserCardHolderResponse|null $card_holder_model card_holder_model
     *
     * @return self
     */
    public function setCardHolderModel($card_holder_model)
    {
        $this->container['card_holder_model'] = $card_holder_model;

        return $this;
    }

    /**
     * Gets card_product_token
     *
     * @return string|null
     */
    public function getCardProductToken()
    {
        return $this->container['card_product_token'];
    }

    /**
     * Sets card_product_token
     *
     * @param string|null $card_product_token Unique identifier of the card product.
     *
     * @return self
     */
    public function setCardProductToken($card_product_token)
    {
        if (!is_null($card_product_token) && (mb_strlen($card_product_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if (!is_null($card_product_token) && (mb_strlen($card_product_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling TransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['card_product_token'] = $card_product_token;

        return $this;
    }

    /**
     * Gets card_security_code_verification
     *
     * @return \OpenAPI\Client\Model\CardSecurityCodeVerification|null
     */
    public function getCardSecurityCodeVerification()
    {
        return $this->container['card_security_code_verification'];
    }

    /**
     * Sets card_security_code_verification
     *
     * @param \OpenAPI\Client\Model\CardSecurityCodeVerification|null $card_security_code_verification card_security_code_verification
     *
     * @return self
     */
    public function setCardSecurityCodeVerification($card_security_code_verification)
    {
        $this->container['card_security_code_verification'] = $card_security_code_verification;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string|null
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string|null $card_token Unique identifier of the card. Useful when a single account holder has multiple cards.
     *
     * @return self
     */
    public function setCardToken($card_token)
    {
        if (!is_null($card_token) && (mb_strlen($card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if (!is_null($card_token) && (mb_strlen($card_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling TransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets cardholder_authentication_data
     *
     * @return \OpenAPI\Client\Model\CardholderAuthenticationData|null
     */
    public function getCardholderAuthenticationData()
    {
        return $this->container['cardholder_authentication_data'];
    }

    /**
     * Sets cardholder_authentication_data
     *
     * @param \OpenAPI\Client\Model\CardholderAuthenticationData|null $cardholder_authentication_data cardholder_authentication_data
     *
     * @return self
     */
    public function setCardholderAuthenticationData($cardholder_authentication_data)
    {
        $this->container['cardholder_authentication_data'] = $cardholder_authentication_data;

        return $this;
    }

    /**
     * Gets cash_back_amount
     *
     * @return float|null
     */
    public function getCashBackAmount()
    {
        return $this->container['cash_back_amount'];
    }

    /**
     * Sets cash_back_amount
     *
     * @param float|null $cash_back_amount Amount of cash back requested by the cardholder during the transaction. Included in the total transaction amount.
     *
     * @return self
     */
    public function setCashBackAmount($cash_back_amount)
    {
        $this->container['cash_back_amount'] = $cash_back_amount;

        return $this;
    }

    /**
     * Gets chargeback
     *
     * @return \OpenAPI\Client\Model\ChargebackResponse|null
     */
    public function getChargeback()
    {
        return $this->container['chargeback'];
    }

    /**
     * Sets chargeback
     *
     * @param \OpenAPI\Client\Model\ChargebackResponse|null $chargeback chargeback
     *
     * @return self
     */
    public function setChargeback($chargeback)
    {
        $this->container['chargeback'] = $chargeback;

        return $this;
    }

    /**
     * Gets clearing_record_sequence_number
     *
     * @return string|null
     */
    public function getClearingRecordSequenceNumber()
    {
        return $this->container['clearing_record_sequence_number'];
    }

    /**
     * Sets clearing_record_sequence_number
     *
     * @param string|null $clearing_record_sequence_number A sequence number that identifies a specific clearing message among multiple clearing messages for an authorization.
     *
     * @return self
     */
    public function setClearingRecordSequenceNumber($clearing_record_sequence_number)
    {
        $this->container['clearing_record_sequence_number'] = $clearing_record_sequence_number;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Date and time when the Marqeta platform created the transaction entry, in UTC format. For example, when Marqeta processed the clearing record for a refund.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency type of the transaction.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_conversion
     *
     * @return \OpenAPI\Client\Model\CurrencyConversion|null
     */
    public function getCurrencyConversion()
    {
        return $this->container['currency_conversion'];
    }

    /**
     * Sets currency_conversion
     *
     * @param \OpenAPI\Client\Model\CurrencyConversion|null $currency_conversion currency_conversion
     *
     * @return self
     */
    public function setCurrencyConversion($currency_conversion)
    {
        $this->container['currency_conversion'] = $currency_conversion;

        return $this;
    }

    /**
     * Gets deferred_settlement_days
     *
     * @return string|null
     */
    public function getDeferredSettlementDays()
    {
        return $this->container['deferred_settlement_days'];
    }

    /**
     * Sets deferred_settlement_days
     *
     * @param string|null $deferred_settlement_days deferred_settlement_days
     *
     * @return self
     */
    public function setDeferredSettlementDays($deferred_settlement_days)
    {
        $this->container['deferred_settlement_days'] = $deferred_settlement_days;

        return $this;
    }

    /**
     * Gets digital_wallet_token
     *
     * @return \OpenAPI\Client\Model\DigitalWalletToken|null
     */
    public function getDigitalWalletToken()
    {
        return $this->container['digital_wallet_token'];
    }

    /**
     * Sets digital_wallet_token
     *
     * @param \OpenAPI\Client\Model\DigitalWalletToken|null $digital_wallet_token digital_wallet_token
     *
     * @return self
     */
    public function setDigitalWalletToken($digital_wallet_token)
    {
        $this->container['digital_wallet_token'] = $digital_wallet_token;

        return $this;
    }

    /**
     * Gets digital_wallet_token_transaction_service_provider_info
     *
     * @return \OpenAPI\Client\Model\DigitalServiceProvider|null
     */
    public function getDigitalWalletTokenTransactionServiceProviderInfo()
    {
        return $this->container['digital_wallet_token_transaction_service_provider_info'];
    }

    /**
     * Sets digital_wallet_token_transaction_service_provider_info
     *
     * @param \OpenAPI\Client\Model\DigitalServiceProvider|null $digital_wallet_token_transaction_service_provider_info digital_wallet_token_transaction_service_provider_info
     *
     * @return self
     */
    public function setDigitalWalletTokenTransactionServiceProviderInfo($digital_wallet_token_transaction_service_provider_info)
    {
        $this->container['digital_wallet_token_transaction_service_provider_info'] = $digital_wallet_token_transaction_service_provider_info;

        return $this;
    }

    /**
     * Gets direct_deposit
     *
     * @return \OpenAPI\Client\Model\DepositDepositResponse|null
     */
    public function getDirectDeposit()
    {
        return $this->container['direct_deposit'];
    }

    /**
     * Sets direct_deposit
     *
     * @param \OpenAPI\Client\Model\DepositDepositResponse|null $direct_deposit direct_deposit
     *
     * @return self
     */
    public function setDirectDeposit($direct_deposit)
    {
        $this->container['direct_deposit'] = $direct_deposit;

        return $this;
    }

    /**
     * Gets dispute
     *
     * @return \OpenAPI\Client\Model\DisputeModel|null
     */
    public function getDispute()
    {
        return $this->container['dispute'];
    }

    /**
     * Sets dispute
     *
     * @param \OpenAPI\Client\Model\DisputeModel|null $dispute dispute
     *
     * @return self
     */
    public function setDispute($dispute)
    {
        $this->container['dispute'] = $dispute;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Duration of the transaction on Marqeta's servers, in milliseconds.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets enhanced_data_token
     *
     * @return string|null
     */
    public function getEnhancedDataToken()
    {
        return $this->container['enhanced_data_token'];
    }

    /**
     * Sets enhanced_data_token
     *
     * @param string|null $enhanced_data_token The enhanced commercial card data token for the transaction.
     *
     * @return self
     */
    public function setEnhancedDataToken($enhanced_data_token)
    {
        $this->container['enhanced_data_token'] = $enhanced_data_token;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \OpenAPI\Client\Model\Fee|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \OpenAPI\Client\Model\Fee|null $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets fee_transfer
     *
     * @return \OpenAPI\Client\Model\FeeTransferResponse|null
     */
    public function getFeeTransfer()
    {
        return $this->container['fee_transfer'];
    }

    /**
     * Sets fee_transfer
     *
     * @param \OpenAPI\Client\Model\FeeTransferResponse|null $fee_transfer fee_transfer
     *
     * @return self
     */
    public function setFeeTransfer($fee_transfer)
    {
        $this->container['fee_transfer'] = $fee_transfer;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\NetworkFeeModel[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\NetworkFeeModel[]|null $fees List of fees associated with the transaction.  This array is returned if it exists in the resource.
     *
     * @return self
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets fraud
     *
     * @return \OpenAPI\Client\Model\FraudView|null
     */
    public function getFraud()
    {
        return $this->container['fraud'];
    }

    /**
     * Sets fraud
     *
     * @param \OpenAPI\Client\Model\FraudView|null $fraud fraud
     *
     * @return self
     */
    public function setFraud($fraud)
    {
        $this->container['fraud'] = $fraud;

        return $this;
    }

    /**
     * Gets from_account
     *
     * @return string|null
     */
    public function getFromAccount()
    {
        return $this->container['from_account'];
    }

    /**
     * Sets from_account
     *
     * @param string|null $from_account Specifies the account type for ATM transactions.
     *
     * @return self
     */
    public function setFromAccount($from_account)
    {
        $this->container['from_account'] = $from_account;

        return $this;
    }

    /**
     * Gets gpa
     *
     * @return \OpenAPI\Client\Model\CardholderBalance|null
     */
    public function getGpa()
    {
        return $this->container['gpa'];
    }

    /**
     * Sets gpa
     *
     * @param \OpenAPI\Client\Model\CardholderBalance|null $gpa gpa
     *
     * @return self
     */
    public function setGpa($gpa)
    {
        $this->container['gpa'] = $gpa;

        return $this;
    }

    /**
     * Gets gpa_order
     *
     * @return \OpenAPI\Client\Model\GpaResponse|null
     */
    public function getGpaOrder()
    {
        return $this->container['gpa_order'];
    }

    /**
     * Sets gpa_order
     *
     * @param \OpenAPI\Client\Model\GpaResponse|null $gpa_order gpa_order
     *
     * @return self
     */
    public function setGpaOrder($gpa_order)
    {
        $this->container['gpa_order'] = $gpa_order;

        return $this;
    }

    /**
     * Gets gpa_order_unload
     *
     * @return \OpenAPI\Client\Model\GpaReturns|null
     */
    public function getGpaOrderUnload()
    {
        return $this->container['gpa_order_unload'];
    }

    /**
     * Sets gpa_order_unload
     *
     * @param \OpenAPI\Client\Model\GpaReturns|null $gpa_order_unload gpa_order_unload
     *
     * @return self
     */
    public function setGpaOrderUnload($gpa_order_unload)
    {
        $this->container['gpa_order_unload'] = $gpa_order_unload;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier Sequential identifier of the transaction.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets incremental_authorization_transaction_tokens
     *
     * @return string[]|null
     */
    public function getIncrementalAuthorizationTransactionTokens()
    {
        return $this->container['incremental_authorization_transaction_tokens'];
    }

    /**
     * Sets incremental_authorization_transaction_tokens
     *
     * @param string[]|null $incremental_authorization_transaction_tokens An array of incremental authorization transaction tokens.
     *
     * @return self
     */
    public function setIncrementalAuthorizationTransactionTokens($incremental_authorization_transaction_tokens)
    {
        $this->container['incremental_authorization_transaction_tokens'] = $incremental_authorization_transaction_tokens;

        return $this;
    }

    /**
     * Gets interchange_rate_descriptor
     *
     * @return string|null
     */
    public function getInterchangeRateDescriptor()
    {
        return $this->container['interchange_rate_descriptor'];
    }

    /**
     * Sets interchange_rate_descriptor
     *
     * @param string|null $interchange_rate_descriptor interchange_rate_descriptor
     *
     * @return self
     */
    public function setInterchangeRateDescriptor($interchange_rate_descriptor)
    {
        $this->container['interchange_rate_descriptor'] = $interchange_rate_descriptor;

        return $this;
    }

    /**
     * Gets is_final_clearing
     *
     * @return bool|null
     */
    public function getIsFinalClearing()
    {
        return $this->container['is_final_clearing'];
    }

    /**
     * Sets is_final_clearing
     *
     * @param bool|null $is_final_clearing Indicates the final clearing event for an authorization. If the final cleared amount is lower than the authorized amount, you must release the hold on the funds per the value in the `amount_to_be_released` field.
     *
     * @return self
     */
    public function setIsFinalClearing($is_final_clearing)
    {
        $this->container['is_final_clearing'] = $is_final_clearing;

        return $this;
    }

    /**
     * Gets is_preauthorization
     *
     * @return bool|null
     */
    public function getIsPreauthorization()
    {
        return $this->container['is_preauthorization'];
    }

    /**
     * Sets is_preauthorization
     *
     * @param bool|null $is_preauthorization Indicates if the transaction is a pre-authorization.
     *
     * @return self
     */
    public function setIsPreauthorization($is_preauthorization)
    {
        $this->container['is_preauthorization'] = $is_preauthorization;

        return $this;
    }

    /**
     * Gets isa_indicator
     *
     * @return string|null
     */
    public function getIsaIndicator()
    {
        return $this->container['isa_indicator'];
    }

    /**
     * Sets isa_indicator
     *
     * @param string|null $isa_indicator The international service assessment indicator indicates if an ISA fee is applicable to the transaction.
     *
     * @return self
     */
    public function setIsaIndicator($isa_indicator)
    {
        $allowedValues = $this->getIsaIndicatorAllowableValues();
        if (!is_null($isa_indicator) && !in_array($isa_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isa_indicator', must be one of '%s'",
                    $isa_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isa_indicator'] = $isa_indicator;

        return $this;
    }

    /**
     * Gets issuer_interchange_amount
     *
     * @return float|null
     */
    public function getIssuerInterchangeAmount()
    {
        return $this->container['issuer_interchange_amount'];
    }

    /**
     * Sets issuer_interchange_amount
     *
     * @param float|null $issuer_interchange_amount The amount of interchange charged by the card issuer.
     *
     * @return self
     */
    public function setIssuerInterchangeAmount($issuer_interchange_amount)
    {
        $this->container['issuer_interchange_amount'] = $issuer_interchange_amount;

        return $this;
    }

    /**
     * Gets issuer_payment_node
     *
     * @return string|null
     */
    public function getIssuerPaymentNode()
    {
        return $this->container['issuer_payment_node'];
    }

    /**
     * Sets issuer_payment_node
     *
     * @param string|null $issuer_payment_node Unique identifier of the Marqeta platform server that received the transaction from the card network.
     *
     * @return self
     */
    public function setIssuerPaymentNode($issuer_payment_node)
    {
        $this->container['issuer_payment_node'] = $issuer_payment_node;

        return $this;
    }

    /**
     * Gets issuer_received_time
     *
     * @return string|null
     */
    public function getIssuerReceivedTime()
    {
        return $this->container['issuer_received_time'];
    }

    /**
     * Sets issuer_received_time
     *
     * @param string|null $issuer_received_time Date and time when the Marqeta platform received the transaction from the card network, in UTC.
     *
     * @return self
     */
    public function setIssuerReceivedTime($issuer_received_time)
    {
        $this->container['issuer_received_time'] = $issuer_received_time;

        return $this;
    }

    /**
     * Gets local_transaction_date
     *
     * @return \DateTime|null
     */
    public function getLocalTransactionDate()
    {
        return $this->container['local_transaction_date'];
    }

    /**
     * Sets local_transaction_date
     *
     * @param \DateTime|null $local_transaction_date Indicates the local time of the transaction at the card acceptor's location. You can use this field to determine the correct time of the transaction when filing a dispute.
     *
     * @return self
     */
    public function setLocalTransactionDate($local_transaction_date)
    {
        $this->container['local_transaction_date'] = $local_transaction_date;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \OpenAPI\Client\Model\MerchantResponseModel|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \OpenAPI\Client\Model\MerchantResponseModel|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets merchant_initiated_original_trace_id
     *
     * @return string|null
     */
    public function getMerchantInitiatedOriginalTraceId()
    {
        return $this->container['merchant_initiated_original_trace_id'];
    }

    /**
     * Sets merchant_initiated_original_trace_id
     *
     * @param string|null $merchant_initiated_original_trace_id Unique network identification value formed by combining the 6- to 9-character Mastercard Banknet Reference Number and the 4-digit settlement date for recurring payments and other merchant-initiated transactions.
     *
     * @return self
     */
    public function setMerchantInitiatedOriginalTraceId($merchant_initiated_original_trace_id)
    {
        $this->container['merchant_initiated_original_trace_id'] = $merchant_initiated_original_trace_id;

        return $this;
    }

    /**
     * Gets msa_order_unload
     *
     * @return \OpenAPI\Client\Model\MsaReturns|null
     */
    public function getMsaOrderUnload()
    {
        return $this->container['msa_order_unload'];
    }

    /**
     * Sets msa_order_unload
     *
     * @param \OpenAPI\Client\Model\MsaReturns|null $msa_order_unload msa_order_unload
     *
     * @return self
     */
    public function setMsaOrderUnload($msa_order_unload)
    {
        $this->container['msa_order_unload'] = $msa_order_unload;

        return $this;
    }

    /**
     * Gets multi_clearing_sequence_count
     *
     * @return string|null
     */
    public function getMultiClearingSequenceCount()
    {
        return $this->container['multi_clearing_sequence_count'];
    }

    /**
     * Sets multi_clearing_sequence_count
     *
     * @param string|null $multi_clearing_sequence_count If an authorization has multiple clearing transactions, this field displays their total number. For example, if an authorization has four clearing transactions, the sequence count is `04`.
     *
     * @return self
     */
    public function setMultiClearingSequenceCount($multi_clearing_sequence_count)
    {
        $this->container['multi_clearing_sequence_count'] = $multi_clearing_sequence_count;

        return $this;
    }

    /**
     * Gets multi_clearing_sequence_number
     *
     * @return string|null
     */
    public function getMultiClearingSequenceNumber()
    {
        return $this->container['multi_clearing_sequence_number'];
    }

    /**
     * Sets multi_clearing_sequence_number
     *
     * @param string|null $multi_clearing_sequence_number If an authorization has multiple clearing transactions, this field displays the sequence number for the clearing transaction. For example, if this is the second clearing transaction of four, the sequence number is `02`.
     *
     * @return self
     */
    public function setMultiClearingSequenceNumber($multi_clearing_sequence_number)
    {
        $this->container['multi_clearing_sequence_number'] = $multi_clearing_sequence_number;

        return $this;
    }

    /**
     * Gets national_net_cpd_of_original
     *
     * @return string|null
     */
    public function getNationalNetCpdOfOriginal()
    {
        return $this->container['national_net_cpd_of_original'];
    }

    /**
     * Sets national_net_cpd_of_original
     *
     * @param string|null $national_net_cpd_of_original national_net_cpd_of_original
     *
     * @return self
     */
    public function setNationalNetCpdOfOriginal($national_net_cpd_of_original)
    {
        $this->container['national_net_cpd_of_original'] = $national_net_cpd_of_original;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network Indicates which card network was used to complete the transactions.
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets network_metadata
     *
     * @return \OpenAPI\Client\Model\NetworkMetadata|null
     */
    public function getNetworkMetadata()
    {
        return $this->container['network_metadata'];
    }

    /**
     * Sets network_metadata
     *
     * @param \OpenAPI\Client\Model\NetworkMetadata|null $network_metadata network_metadata
     *
     * @return self
     */
    public function setNetworkMetadata($network_metadata)
    {
        $this->container['network_metadata'] = $network_metadata;

        return $this;
    }

    /**
     * Gets network_reference_id
     *
     * @return string|null
     */
    public function getNetworkReferenceId()
    {
        return $this->container['network_reference_id'];
    }

    /**
     * Sets network_reference_id
     *
     * @param string|null $network_reference_id Network-assigned unique identifier of the transaction. Useful for settlement and reconciliation.
     *
     * @return self
     */
    public function setNetworkReferenceId($network_reference_id)
    {
        $this->container['network_reference_id'] = $network_reference_id;

        return $this;
    }

    /**
     * Gets original_credit
     *
     * @return \OpenAPI\Client\Model\OriginalCredit|null
     */
    public function getOriginalCredit()
    {
        return $this->container['original_credit'];
    }

    /**
     * Sets original_credit
     *
     * @param \OpenAPI\Client\Model\OriginalCredit|null $original_credit original_credit
     *
     * @return self
     */
    public function setOriginalCredit($original_credit)
    {
        $this->container['original_credit'] = $original_credit;

        return $this;
    }

    /**
     * Gets peer_transfer
     *
     * @return \OpenAPI\Client\Model\PeerTransferResponse|null
     */
    public function getPeerTransfer()
    {
        return $this->container['peer_transfer'];
    }

    /**
     * Sets peer_transfer
     *
     * @param \OpenAPI\Client\Model\PeerTransferResponse|null $peer_transfer peer_transfer
     *
     * @return self
     */
    public function setPeerTransfer($peer_transfer)
    {
        $this->container['peer_transfer'] = $peer_transfer;

        return $this;
    }

    /**
     * Gets polarity
     *
     * @return string|null
     */
    public function getPolarity()
    {
        return $this->container['polarity'];
    }

    /**
     * Sets polarity
     *
     * @param string|null $polarity Indicates whether the transaction is credit or debit.
     *
     * @return self
     */
    public function setPolarity($polarity)
    {
        $allowedValues = $this->getPolarityAllowableValues();
        if (!is_null($polarity) && !in_array($polarity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'polarity', must be one of '%s'",
                    $polarity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['polarity'] = $polarity;

        return $this;
    }

    /**
     * Gets pos
     *
     * @return \OpenAPI\Client\Model\Pos|null
     */
    public function getPos()
    {
        return $this->container['pos'];
    }

    /**
     * Sets pos
     *
     * @param \OpenAPI\Client\Model\Pos|null $pos pos
     *
     * @return self
     */
    public function setPos($pos)
    {
        $this->container['pos'] = $pos;

        return $this;
    }

    /**
     * Gets preceding_related_transaction_token
     *
     * @return string|null
     */
    public function getPrecedingRelatedTransactionToken()
    {
        return $this->container['preceding_related_transaction_token'];
    }

    /**
     * Sets preceding_related_transaction_token
     *
     * @param string|null $preceding_related_transaction_token Returned for final transaction types.  Unique identifier of the preceding related transaction. Useful for identifying the transaction that preceded the current one.  For example, `authorization`, a temporary transaction type, precedes and is completed by `authorization.clearing`, a final transaction type. In this case, the `authorization` token is returned with this field. For which transaction types are temporary or final, see <</core-api/event-types#_transaction_events, Transaction events in Event Types>>.
     *
     * @return self
     */
    public function setPrecedingRelatedTransactionToken($preceding_related_transaction_token)
    {
        $this->container['preceding_related_transaction_token'] = $preceding_related_transaction_token;

        return $this;
    }

    /**
     * Gets preceding_transaction
     *
     * @return \OpenAPI\Client\Model\PrecedingTransaction|null
     */
    public function getPrecedingTransaction()
    {
        return $this->container['preceding_transaction'];
    }

    /**
     * Sets preceding_transaction
     *
     * @param \OpenAPI\Client\Model\PrecedingTransaction|null $preceding_transaction preceding_transaction
     *
     * @return self
     */
    public function setPrecedingTransaction($preceding_transaction)
    {
        $this->container['preceding_transaction'] = $preceding_transaction;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \OpenAPI\Client\Model\Program|null
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \OpenAPI\Client\Model\Program|null $program program
     *
     * @return self
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets program_transfer
     *
     * @return \OpenAPI\Client\Model\ProgramTransferResponse|null
     */
    public function getProgramTransfer()
    {
        return $this->container['program_transfer'];
    }

    /**
     * Sets program_transfer
     *
     * @param \OpenAPI\Client\Model\ProgramTransferResponse|null $program_transfer program_transfer
     *
     * @return self
     */
    public function setProgramTransfer($program_transfer)
    {
        $this->container['program_transfer'] = $program_transfer;

        return $this;
    }

    /**
     * Gets real_time_fee_group
     *
     * @return \OpenAPI\Client\Model\RealTimeFeeGroup|null
     */
    public function getRealTimeFeeGroup()
    {
        return $this->container['real_time_fee_group'];
    }

    /**
     * Sets real_time_fee_group
     *
     * @param \OpenAPI\Client\Model\RealTimeFeeGroup|null $real_time_fee_group real_time_fee_group
     *
     * @return self
     */
    public function setRealTimeFeeGroup($real_time_fee_group)
    {
        $this->container['real_time_fee_group'] = $real_time_fee_group;

        return $this;
    }

    /**
     * Gets request_amount
     *
     * @return float|null
     */
    public function getRequestAmount()
    {
        return $this->container['request_amount'];
    }

    /**
     * Sets request_amount
     *
     * @param float|null $request_amount Merchant-requested amount, including any fees.
     *
     * @return self
     */
    public function setRequestAmount($request_amount)
    {
        $this->container['request_amount'] = $request_amount;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \OpenAPI\Client\Model\Response|null
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \OpenAPI\Client\Model\Response|null $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return \DateTime|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param \DateTime|null $settlement_date Date and time when funds were moved for a transaction, in UTC. For example, in the case of a refund, when funds were credited to the cardholder.
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets settlement_indicator
     *
     * @return string|null
     */
    public function getSettlementIndicator()
    {
        return $this->container['settlement_indicator'];
    }

    /**
     * Sets settlement_indicator
     *
     * @param string|null $settlement_indicator Indicates the settlement service used for the transaction.
     *
     * @return self
     */
    public function setSettlementIndicator($settlement_indicator)
    {
        $this->container['settlement_indicator'] = $settlement_indicator;

        return $this;
    }

    /**
     * Gets standin_approved_by
     *
     * @return string|null
     */
    public function getStandinApprovedBy()
    {
        return $this->container['standin_approved_by'];
    }

    /**
     * Sets standin_approved_by
     *
     * @param string|null $standin_approved_by Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode. Returned only when a transaction is approved.
     *
     * @return self
     */
    public function setStandinApprovedBy($standin_approved_by)
    {
        $this->container['standin_approved_by'] = $standin_approved_by;

        return $this;
    }

    /**
     * Gets standin_by
     *
     * @return string|null
     */
    public function getStandinBy()
    {
        return $this->container['standin_by'];
    }

    /**
     * Sets standin_by
     *
     * @param string|null $standin_by Indicates which party approved a transaction: the card network using stand-in processing, or Marqeta using Commando Mode.
     *
     * @return self
     */
    public function setStandinBy($standin_by)
    {
        $this->container['standin_by'] = $standin_by;

        return $this;
    }

    /**
     * Gets standin_reason
     *
     * @return string|null
     */
    public function getStandinReason()
    {
        return $this->container['standin_reason'];
    }

    /**
     * Sets standin_reason
     *
     * @param string|null $standin_reason Indicates why the card network handled a transaction requiring stand-in processing.
     *
     * @return self
     */
    public function setStandinReason($standin_reason)
    {
        $this->container['standin_reason'] = $standin_reason;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Current state of the transaction. For more information about the `state` field, see <</developer-guides/about-transactions#_the_transaction_lifecycle, The transaction lifecycle>>.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets store
     *
     * @return \OpenAPI\Client\Model\StoreResponseModel|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \OpenAPI\Client\Model\StoreResponseModel|null $store store
     *
     * @return self
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets subnetwork
     *
     * @return string|null
     */
    public function getSubnetwork()
    {
        return $this->container['subnetwork'];
    }

    /**
     * Sets subnetwork
     *
     * @param string|null $subnetwork Indicates which subnetwork was used to complete the transaction. Possible values include the following:  * *VISANET* – Used for VisaNet signature-based transactions. * *VISANETDEBIT* – Used for VisaNet Debit PIN-based transaction. * *VISAINTERLINK* – Used for Visa Interlink PIN-based transactions. * *VISAPLUS* – Used for ATM withdrawals on Visa. * *MAESTRO* – Used for PIN-based transactions on Mastercard. * *CIRRUS* – Used for ATM withdrawals on Mastercard. * *MASTERCARDDEBIT* – Used for signature-based transactions on Mastercard. * *GATEWAY_JIT* – Used for Gateway JIT Funding transactions. * *MANAGED_JIT* – Used for Managed JIT Funding transactions or for transactions that occur while Commando Mode is enabled.
     *
     * @return self
     */
    public function setSubnetwork($subnetwork)
    {
        $this->container['subnetwork'] = $subnetwork;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the transaction, formatted as a UUID.  *NOTE:* For subsequent related transactions, this token value appears as the `preceding_related_transaction_token`.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling TransactionModel., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transaction_attributes
     *
     * @return array<string,string>|null
     */
    public function getTransactionAttributes()
    {
        return $this->container['transaction_attributes'];
    }

    /**
     * Sets transaction_attributes
     *
     * @param array<string,string>|null $transaction_attributes Additional transaction attributes.
     *
     * @return self
     */
    public function setTransactionAttributes($transaction_attributes)
    {
        $this->container['transaction_attributes'] = $transaction_attributes;

        return $this;
    }

    /**
     * Gets transaction_metadata
     *
     * @return \OpenAPI\Client\Model\TransactionMetadata|null
     */
    public function getTransactionMetadata()
    {
        return $this->container['transaction_metadata'];
    }

    /**
     * Sets transaction_metadata
     *
     * @param \OpenAPI\Client\Model\TransactionMetadata|null $transaction_metadata transaction_metadata
     *
     * @return self
     */
    public function setTransactionMetadata($transaction_metadata)
    {
        $this->container['transaction_metadata'] = $transaction_metadata;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Transaction event type. For more information about the `type` field, see <</core-api/event-types#_transaction_events, Transaction events>>.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\CardholderMetadata|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\CardholderMetadata|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token Unique identifier of the user who owns the account that funded the transaction; subsequent related transactions retain the same `user_token`, even if the card used to complete the transaction moves to another user.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        if (!is_null($user_token) && (mb_strlen($user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling TransactionModel., must be smaller than or equal to 36.');
        }
        if (!is_null($user_token) && (mb_strlen($user_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling TransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['user_token'] = $user_token;

        return $this;
    }

    /**
     * Gets user_transaction_time
     *
     * @return \DateTime|null
     */
    public function getUserTransactionTime()
    {
        return $this->container['user_transaction_time'];
    }

    /**
     * Sets user_transaction_time
     *
     * @param \DateTime|null $user_transaction_time Date and time when the user initiated the transaction, in UTC. For example, when a merchant performed the original authorization for a refund.
     *
     * @return self
     */
    public function setUserTransactionTime($user_transaction_time)
    {
        $this->container['user_transaction_time'] = $user_transaction_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


