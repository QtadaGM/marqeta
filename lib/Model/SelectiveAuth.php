<?php
/**
 * SelectiveAuth
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SelectiveAuth Class Doc Comment
 *
 * @category Class
 * @description Contains information about authorization decisions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SelectiveAuth implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'selective_auth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dmd_location_sensitivity' => 'int',
        'enable_regex_search_chain' => 'bool',
        'sa_mode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dmd_location_sensitivity' => 'int32',
        'enable_regex_search_chain' => null,
        'sa_mode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dmd_location_sensitivity' => 'dmd_location_sensitivity',
        'enable_regex_search_chain' => 'enable_regex_search_chain',
        'sa_mode' => 'sa_mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dmd_location_sensitivity' => 'setDmdLocationSensitivity',
        'enable_regex_search_chain' => 'setEnableRegexSearchChain',
        'sa_mode' => 'setSaMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dmd_location_sensitivity' => 'getDmdLocationSensitivity',
        'enable_regex_search_chain' => 'getEnableRegexSearchChain',
        'sa_mode' => 'getSaMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DMD_LOCATION_SENSITIVITY_0 = 0;
    const DMD_LOCATION_SENSITIVITY_1 = 1;
    const DMD_LOCATION_SENSITIVITY_2 = 2;
    const DMD_LOCATION_SENSITIVITY_3 = 3;
    const DMD_LOCATION_SENSITIVITY_4 = 4;
    const SA_MODE_0 = 0;
    const SA_MODE_1 = 1;
    const SA_MODE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDmdLocationSensitivityAllowableValues()
    {
        return [
            self::DMD_LOCATION_SENSITIVITY_0,
            self::DMD_LOCATION_SENSITIVITY_1,
            self::DMD_LOCATION_SENSITIVITY_2,
            self::DMD_LOCATION_SENSITIVITY_3,
            self::DMD_LOCATION_SENSITIVITY_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaModeAllowableValues()
    {
        return [
            self::SA_MODE_0,
            self::SA_MODE_1,
            self::SA_MODE_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dmd_location_sensitivity'] = $data['dmd_location_sensitivity'] ?? self::DMD_LOCATION_SENSITIVITY_0;
        $this->container['enable_regex_search_chain'] = $data['enable_regex_search_chain'] ?? false;
        $this->container['sa_mode'] = $data['sa_mode'] ?? self::SA_MODE_1;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDmdLocationSensitivityAllowableValues();
        if (!is_null($this->container['dmd_location_sensitivity']) && !in_array($this->container['dmd_location_sensitivity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dmd_location_sensitivity', must be one of '%s'",
                $this->container['dmd_location_sensitivity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSaModeAllowableValues();
        if (!is_null($this->container['sa_mode']) && !in_array($this->container['sa_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sa_mode', must be one of '%s'",
                $this->container['sa_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dmd_location_sensitivity
     *
     * @return int|null
     */
    public function getDmdLocationSensitivity()
    {
        return $this->container['dmd_location_sensitivity'];
    }

    /**
     * Sets dmd_location_sensitivity
     *
     * @param int|null $dmd_location_sensitivity Determines what type of merchant information is required for a match (authorization). Not relevant if `enable_regex_search_chain = false`.  * *0* – Requires exact match on card acceptor name and postal code to existing entry in Marqeta Merchant database (most restrictive). * *1* – Partial match on card acceptor name (least restrictive). * *2* – Partial match on card acceptor name; exact match on card acceptor city. * *3* – Partial match on card acceptor name; exact match on card acceptor postal code. * *4* – Partial match on card acceptor name; exact match on street address 1 and postal code.
     *
     * @return self
     */
    public function setDmdLocationSensitivity($dmd_location_sensitivity)
    {
        $allowedValues = $this->getDmdLocationSensitivityAllowableValues();
        if (!is_null($dmd_location_sensitivity) && !in_array($dmd_location_sensitivity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dmd_location_sensitivity', must be one of '%s'",
                    $dmd_location_sensitivity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dmd_location_sensitivity'] = $dmd_location_sensitivity;

        return $this;
    }

    /**
     * Gets enable_regex_search_chain
     *
     * @return bool|null
     */
    public function getEnableRegexSearchChain()
    {
        return $this->container['enable_regex_search_chain'];
    }

    /**
     * Sets enable_regex_search_chain
     *
     * @param bool|null $enable_regex_search_chain Set to `true` to perform regular expression checking on the description received in the authorization.
     *
     * @return self
     */
    public function setEnableRegexSearchChain($enable_regex_search_chain)
    {
        $this->container['enable_regex_search_chain'] = $enable_regex_search_chain;

        return $this;
    }

    /**
     * Gets sa_mode
     *
     * @return int|null
     */
    public function getSaMode()
    {
        return $this->container['sa_mode'];
    }

    /**
     * Sets sa_mode
     *
     * @param int|null $sa_mode Specifies the selective authorization mode.  * *0* — Inactive * *1* — Active (attempts to authorize a merchant that does not have a recognized MID by matching other pieces of information) * *2* — Logging and notification (checks the transaction and logs results, but does not authorize)  Selective authorization applies to transactions that are limited to specific merchants. Matching requirements for authorization are set by the `dmd_location_sensitivity` field.
     *
     * @return self
     */
    public function setSaMode($sa_mode)
    {
        $allowedValues = $this->getSaModeAllowableValues();
        if (!is_null($sa_mode) && !in_array($sa_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sa_mode', must be one of '%s'",
                    $sa_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sa_mode'] = $sa_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


