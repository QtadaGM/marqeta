<?php
/**
 * VelocityControlBalance
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VelocityControlBalance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VelocityControlBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VelocityControlBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'amount_limit' => 'float',
        'association' => '\OpenAPI\Client\Model\Association',
        'currency_code' => 'string',
        'merchant_scope' => '\OpenAPI\Client\Model\MerchantScope',
        'name' => 'string',
        'token' => 'string',
        'usage_limit' => 'int',
        'velocity_window' => '\OpenAPI\Client\Model\VelocityWindow',
        'velocity_window_start_day' => 'int',
        'available' => '\OpenAPI\Client\Model\VelocityControlBalanceAllOfAvailable'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'amount_limit' => null,
        'association' => null,
        'currency_code' => null,
        'merchant_scope' => null,
        'name' => null,
        'token' => null,
        'usage_limit' => 'int32',
        'velocity_window' => null,
        'velocity_window_start_day' => 'int32',
        'available' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'amount_limit' => 'amount_limit',
        'association' => 'association',
        'currency_code' => 'currency_code',
        'merchant_scope' => 'merchant_scope',
        'name' => 'name',
        'token' => 'token',
        'usage_limit' => 'usage_limit',
        'velocity_window' => 'velocity_window',
        'velocity_window_start_day' => 'velocity_window_start_day',
        'available' => 'available'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'amount_limit' => 'setAmountLimit',
        'association' => 'setAssociation',
        'currency_code' => 'setCurrencyCode',
        'merchant_scope' => 'setMerchantScope',
        'name' => 'setName',
        'token' => 'setToken',
        'usage_limit' => 'setUsageLimit',
        'velocity_window' => 'setVelocityWindow',
        'velocity_window_start_day' => 'setVelocityWindowStartDay',
        'available' => 'setAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'amount_limit' => 'getAmountLimit',
        'association' => 'getAssociation',
        'currency_code' => 'getCurrencyCode',
        'merchant_scope' => 'getMerchantScope',
        'name' => 'getName',
        'token' => 'getToken',
        'usage_limit' => 'getUsageLimit',
        'velocity_window' => 'getVelocityWindow',
        'velocity_window_start_day' => 'getVelocityWindowStartDay',
        'available' => 'getAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? false;
        $this->container['amount_limit'] = $data['amount_limit'] ?? null;
        $this->container['association'] = $data['association'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['merchant_scope'] = $data['merchant_scope'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['usage_limit'] = $data['usage_limit'] ?? null;
        $this->container['velocity_window'] = $data['velocity_window'] ?? null;
        $this->container['velocity_window_start_day'] = $data['velocity_window_start_day'] ?? null;
        $this->container['available'] = $data['available'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount_limit'] === null) {
            $invalidProperties[] = "'amount_limit' can't be null";
        }
        if (($this->container['amount_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount_limit', must be bigger than or equal to 0.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['usage_limit']) && ($this->container['usage_limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'usage_limit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['velocity_window_start_day']) && ($this->container['velocity_window_start_day'] < 1)) {
            $invalidProperties[] = "invalid value for 'velocity_window_start_day', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates whether the velocity control is active.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets amount_limit
     *
     * @return float
     */
    public function getAmountLimit()
    {
        return $this->container['amount_limit'];
    }

    /**
     * Sets amount_limit
     *
     * @param float $amount_limit Maximum monetary sum that can be cleared within the time period defined by velocity period.
     *
     * @return self
     */
    public function setAmountLimit($amount_limit)
    {

        if (($amount_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount_limit when calling VelocityControlBalance., must be bigger than or equal to 0.');
        }

        $this->container['amount_limit'] = $amount_limit;

        return $this;
    }

    /**
     * Gets association
     *
     * @return \OpenAPI\Client\Model\Association|null
     */
    public function getAssociation()
    {
        return $this->container['association'];
    }

    /**
     * Sets association
     *
     * @param \OpenAPI\Client\Model\Association|null $association association
     *
     * @return self
     */
    public function setAssociation($association)
    {
        $this->container['association'] = $association;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Three-character ISO 4217 currency code.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets merchant_scope
     *
     * @return \OpenAPI\Client\Model\MerchantScope|null
     */
    public function getMerchantScope()
    {
        return $this->container['merchant_scope'];
    }

    /**
     * Sets merchant_scope
     *
     * @param \OpenAPI\Client\Model\MerchantScope|null $merchant_scope merchant_scope
     *
     * @return self
     */
    public function setMerchantScope($merchant_scope)
    {
        $this->container['merchant_scope'] = $merchant_scope;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Description of how the velocity control restricts spending. For example, \"Max spend of $500 per day\" or \"Max spend of $5000 per month for non-exempt employees\".
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VelocityControlBalance., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VelocityControlBalance., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the velocity control.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling VelocityControlBalance., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling VelocityControlBalance., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets usage_limit
     *
     * @return int|null
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     *
     * @param int|null $usage_limit Maximum number of times a card can be used within the time period defined by the `velocity_window` field.  Leave `null` to indicate that the card can be used an unlimited number of times.
     *
     * @return self
     */
    public function setUsageLimit($usage_limit)
    {

        if (!is_null($usage_limit) && ($usage_limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $usage_limit when calling VelocityControlBalance., must be bigger than or equal to 1.');
        }

        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }

    /**
     * Gets velocity_window
     *
     * @return \OpenAPI\Client\Model\VelocityWindow|null
     */
    public function getVelocityWindow()
    {
        return $this->container['velocity_window'];
    }

    /**
     * Sets velocity_window
     *
     * @param \OpenAPI\Client\Model\VelocityWindow|null $velocity_window velocity_window
     *
     * @return self
     */
    public function setVelocityWindow($velocity_window)
    {
        $this->container['velocity_window'] = $velocity_window;

        return $this;
    }

    /**
     * Gets velocity_window_start_day
     *
     * @return int|null
     */
    public function getVelocityWindowStartDay()
    {
        return $this->container['velocity_window_start_day'];
    }

    /**
     * Sets velocity_window_start_day
     *
     * @param int|null $velocity_window_start_day Start day of the velocity window defined by the `velocity_window` field. Default value is `1`
     *
     * @return self
     */
    public function setVelocityWindowStartDay($velocity_window_start_day)
    {

        if (!is_null($velocity_window_start_day) && ($velocity_window_start_day < 1)) {
            throw new \InvalidArgumentException('invalid value for $velocity_window_start_day when calling VelocityControlBalance., must be bigger than or equal to 1.');
        }

        $this->container['velocity_window_start_day'] = $velocity_window_start_day;

        return $this;
    }

    /**
     * Gets available
     *
     * @return \OpenAPI\Client\Model\VelocityControlBalanceAllOfAvailable|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param \OpenAPI\Client\Model\VelocityControlBalanceAllOfAvailable|null $available available
     *
     * @return self
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


