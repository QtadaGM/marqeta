<?php
/**
 * FraudFeedbackRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FraudFeedbackRequest Class Doc Comment
 *
 * @category Class
 * @description of the fraud object
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FraudFeedbackRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FraudFeedbackRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actor' => 'string',
        'amount' => 'string',
        'is_fraud' => 'bool',
        'status' => 'string',
        'transaction_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actor' => null,
        'amount' => null,
        'is_fraud' => null,
        'status' => null,
        'transaction_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actor' => 'actor',
        'amount' => 'amount',
        'is_fraud' => 'is_fraud',
        'status' => 'status',
        'transaction_token' => 'transaction_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actor' => 'setActor',
        'amount' => 'setAmount',
        'is_fraud' => 'setIsFraud',
        'status' => 'setStatus',
        'transaction_token' => 'setTransactionToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actor' => 'getActor',
        'amount' => 'getAmount',
        'is_fraud' => 'getIsFraud',
        'status' => 'getStatus',
        'transaction_token' => 'getTransactionToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACTOR_UNKNOWN = 'UNKNOWN';
    const ACTOR_THIRD_PARTY_FRAUD = 'THIRD_PARTY_FRAUD';
    const ACTOR_CARD_USER_FRAUD = 'CARD_USER_FRAUD';
    const STATUS_CONFIRMED = 'CONFIRMED';
    const STATUS_DISPUTED = 'DISPUTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActorAllowableValues()
    {
        return [
            self::ACTOR_UNKNOWN,
            self::ACTOR_THIRD_PARTY_FRAUD,
            self::ACTOR_CARD_USER_FRAUD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CONFIRMED,
            self::STATUS_DISPUTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actor'] = $data['actor'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['is_fraud'] = $data['is_fraud'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actor'] === null) {
            $invalidProperties[] = "'actor' can't be null";
        }
        $allowedValues = $this->getActorAllowableValues();
        if (!is_null($this->container['actor']) && !in_array($this->container['actor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actor', must be one of '%s'",
                $this->container['actor'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['is_fraud'] === null) {
            $invalidProperties[] = "'is_fraud' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_token'] === null) {
            $invalidProperties[] = "'transaction_token' can't be null";
        }
        if ((mb_strlen($this->container['transaction_token']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_token', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['transaction_token']) < 3)) {
            $invalidProperties[] = "invalid value for 'transaction_token', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actor
     *
     * @return string
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param string $actor This is the party making a call.
     *
     * @return self
     */
    public function setActor($actor)
    {
        $allowedValues = $this->getActorAllowableValues();
        if (!in_array($actor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actor', must be one of '%s'",
                    $actor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets is_fraud
     *
     * @return bool
     */
    public function getIsFraud()
    {
        return $this->container['is_fraud'];
    }

    /**
     * Sets is_fraud
     *
     * @param bool $is_fraud is_fraud
     *
     * @return self
     */
    public function setIsFraud($is_fraud)
    {
        $this->container['is_fraud'] = $is_fraud;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status This is the value of the status of the fraud.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string $transaction_token transaction_token
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        if ((mb_strlen($transaction_token) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_token when calling FraudFeedbackRequest., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($transaction_token) < 3)) {
            throw new \InvalidArgumentException('invalid length for $transaction_token when calling FraudFeedbackRequest., must be bigger than or equal to 3.');
        }

        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


