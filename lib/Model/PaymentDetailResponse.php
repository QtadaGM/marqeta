<?php
/**
 * PaymentDetailResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentDetailResponse Class Doc Comment
 *
 * @category Class
 * @description Response containing payment details with transition history
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentDetailResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_token' => 'string',
        'allocations' => '\OpenAPI\Client\Model\PaymentAllocationResponse[]',
        'amount' => 'float',
        'created_time' => '\DateTime',
        'currency_code' => '\OpenAPI\Client\Model\CurrencyCode',
        'description' => 'string',
        'hold_days' => 'int',
        'hold_end_time' => '\DateTime',
        'is_manually_released' => 'bool',
        'metadata' => 'string',
        'method' => 'string',
        'on_hold' => 'bool',
        'payment_schedule_token' => 'string',
        'payment_source_token' => 'string',
        'refund_details' => '\OpenAPI\Client\Model\RefundDetailsResponse',
        'returned_details' => '\OpenAPI\Client\Model\ReturnedDetails',
        'status' => '\OpenAPI\Client\Model\PaymentStatus',
        'token' => 'string',
        'transitions' => '\OpenAPI\Client\Model\PaymentTransitionResponse[]',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_token' => null,
        'allocations' => null,
        'amount' => null,
        'created_time' => 'date-time',
        'currency_code' => null,
        'description' => null,
        'hold_days' => null,
        'hold_end_time' => 'date-time',
        'is_manually_released' => null,
        'metadata' => null,
        'method' => null,
        'on_hold' => null,
        'payment_schedule_token' => null,
        'payment_source_token' => null,
        'refund_details' => null,
        'returned_details' => null,
        'status' => null,
        'token' => null,
        'transitions' => null,
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_token' => 'account_token',
        'allocations' => 'allocations',
        'amount' => 'amount',
        'created_time' => 'created_time',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'hold_days' => 'hold_days',
        'hold_end_time' => 'hold_end_time',
        'is_manually_released' => 'is_manually_released',
        'metadata' => 'metadata',
        'method' => 'method',
        'on_hold' => 'on_hold',
        'payment_schedule_token' => 'payment_schedule_token',
        'payment_source_token' => 'payment_source_token',
        'refund_details' => 'refund_details',
        'returned_details' => 'returned_details',
        'status' => 'status',
        'token' => 'token',
        'transitions' => 'transitions',
        'updated_time' => 'updated_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_token' => 'setAccountToken',
        'allocations' => 'setAllocations',
        'amount' => 'setAmount',
        'created_time' => 'setCreatedTime',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'hold_days' => 'setHoldDays',
        'hold_end_time' => 'setHoldEndTime',
        'is_manually_released' => 'setIsManuallyReleased',
        'metadata' => 'setMetadata',
        'method' => 'setMethod',
        'on_hold' => 'setOnHold',
        'payment_schedule_token' => 'setPaymentScheduleToken',
        'payment_source_token' => 'setPaymentSourceToken',
        'refund_details' => 'setRefundDetails',
        'returned_details' => 'setReturnedDetails',
        'status' => 'setStatus',
        'token' => 'setToken',
        'transitions' => 'setTransitions',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_token' => 'getAccountToken',
        'allocations' => 'getAllocations',
        'amount' => 'getAmount',
        'created_time' => 'getCreatedTime',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'hold_days' => 'getHoldDays',
        'hold_end_time' => 'getHoldEndTime',
        'is_manually_released' => 'getIsManuallyReleased',
        'metadata' => 'getMetadata',
        'method' => 'getMethod',
        'on_hold' => 'getOnHold',
        'payment_schedule_token' => 'getPaymentScheduleToken',
        'payment_source_token' => 'getPaymentSourceToken',
        'refund_details' => 'getRefundDetails',
        'returned_details' => 'getReturnedDetails',
        'status' => 'getStatus',
        'token' => 'getToken',
        'transitions' => 'getTransitions',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const METHOD_ACH = 'ACH';
    const METHOD_CHECK = 'CHECK';
    const METHOD_DEBIT = 'DEBIT';
    const METHOD_CASH = 'CASH';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_ACH,
            self::METHOD_CHECK,
            self::METHOD_DEBIT,
            self::METHOD_CASH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['allocations'] = $data['allocations'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['hold_days'] = $data['hold_days'] ?? 0;
        $this->container['hold_end_time'] = $data['hold_end_time'] ?? null;
        $this->container['is_manually_released'] = $data['is_manually_released'] ?? false;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['on_hold'] = $data['on_hold'] ?? false;
        $this->container['payment_schedule_token'] = $data['payment_schedule_token'] ?? null;
        $this->container['payment_source_token'] = $data['payment_source_token'] ?? null;
        $this->container['refund_details'] = $data['refund_details'] ?? null;
        $this->container['returned_details'] = $data['returned_details'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transitions'] = $data['transitions'] ?? null;
        $this->container['updated_time'] = $data['updated_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ((mb_strlen($this->container['account_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['hold_days'] === null) {
            $invalidProperties[] = "'hold_days' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['transitions'] === null) {
            $invalidProperties[] = "'transitions' can't be null";
        }
        if ($this->container['updated_time'] === null) {
            $invalidProperties[] = "'updated_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account on which the payment is made.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        if ((mb_strlen($account_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_token when calling PaymentDetailResponse., must be smaller than or equal to 36.');
        }

        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets allocations
     *
     * @return \OpenAPI\Client\Model\PaymentAllocationResponse[]|null
     */
    public function getAllocations()
    {
        return $this->container['allocations'];
    }

    /**
     * Sets allocations
     *
     * @param \OpenAPI\Client\Model\PaymentAllocationResponse[]|null $allocations List of objects which contain information on how payment is allocated.
     *
     * @return self
     */
    public function setAllocations($allocations)
    {
        $this->container['allocations'] = $allocations;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Total amount of the payment.
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling PaymentDetailResponse., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the payment was created on Marqeta's credit platform, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return \OpenAPI\Client\Model\CurrencyCode
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param \OpenAPI\Client\Model\CurrencyCode $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the payment.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hold_days
     *
     * @return int
     */
    public function getHoldDays()
    {
        return $this->container['hold_days'];
    }

    /**
     * Sets hold_days
     *
     * @param int $hold_days After a payment completes, the number of days to hold the available credit on the account before increasing it.
     *
     * @return self
     */
    public function setHoldDays($hold_days)
    {
        $this->container['hold_days'] = $hold_days;

        return $this;
    }

    /**
     * Gets hold_end_time
     *
     * @return \DateTime|null
     */
    public function getHoldEndTime()
    {
        return $this->container['hold_end_time'];
    }

    /**
     * Sets hold_end_time
     *
     * @param \DateTime|null $hold_end_time Date and time when the available credit hold is released.
     *
     * @return self
     */
    public function setHoldEndTime($hold_end_time)
    {
        $this->container['hold_end_time'] = $hold_end_time;

        return $this;
    }

    /**
     * Gets is_manually_released
     *
     * @return bool|null
     */
    public function getIsManuallyReleased()
    {
        return $this->container['is_manually_released'];
    }

    /**
     * Sets is_manually_released
     *
     * @param bool|null $is_manually_released Whether the available credit hold was manually released for this payment.
     *
     * @return self
     */
    public function setIsManuallyReleased($is_manually_released)
    {
        $this->container['is_manually_released'] = $is_manually_released;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Customer-defined additional information about the payment (for example, a check number).
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Method of payment.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return bool|null
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param bool|null $on_hold Whether the available credit is on hold for this payment.
     *
     * @return self
     */
    public function setOnHold($on_hold)
    {
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets payment_schedule_token
     *
     * @return string|null
     */
    public function getPaymentScheduleToken()
    {
        return $this->container['payment_schedule_token'];
    }

    /**
     * Sets payment_schedule_token
     *
     * @param string|null $payment_schedule_token Unique identifier of the payment schedule.
     *
     * @return self
     */
    public function setPaymentScheduleToken($payment_schedule_token)
    {
        $this->container['payment_schedule_token'] = $payment_schedule_token;

        return $this;
    }

    /**
     * Gets payment_source_token
     *
     * @return string|null
     */
    public function getPaymentSourceToken()
    {
        return $this->container['payment_source_token'];
    }

    /**
     * Sets payment_source_token
     *
     * @param string|null $payment_source_token Unique identifier of the payment source. Required for ACH payments.
     *
     * @return self
     */
    public function setPaymentSourceToken($payment_source_token)
    {
        $this->container['payment_source_token'] = $payment_source_token;

        return $this;
    }

    /**
     * Gets refund_details
     *
     * @return \OpenAPI\Client\Model\RefundDetailsResponse|null
     */
    public function getRefundDetails()
    {
        return $this->container['refund_details'];
    }

    /**
     * Sets refund_details
     *
     * @param \OpenAPI\Client\Model\RefundDetailsResponse|null $refund_details refund_details
     *
     * @return self
     */
    public function setRefundDetails($refund_details)
    {
        $this->container['refund_details'] = $refund_details;

        return $this;
    }

    /**
     * Gets returned_details
     *
     * @return \OpenAPI\Client\Model\ReturnedDetails|null
     */
    public function getReturnedDetails()
    {
        return $this->container['returned_details'];
    }

    /**
     * Sets returned_details
     *
     * @param \OpenAPI\Client\Model\ReturnedDetails|null $returned_details returned_details
     *
     * @return self
     */
    public function setReturnedDetails($returned_details)
    {
        $this->container['returned_details'] = $returned_details;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\PaymentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\PaymentStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the payment.  If in the `detail_object`, unique identifier of the detail object.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transitions
     *
     * @return \OpenAPI\Client\Model\PaymentTransitionResponse[]
     */
    public function getTransitions()
    {
        return $this->container['transitions'];
    }

    /**
     * Sets transitions
     *
     * @param \OpenAPI\Client\Model\PaymentTransitionResponse[] $transitions Contains one or more `transitions` objects, which contain information on a payment status transition.
     *
     * @return self
     */
    public function setTransitions($transitions)
    {
        $this->container['transitions'] = $transitions;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime $updated_time Date and time when the payment was last updated on Marqeta's credit platform, in UTC.
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


