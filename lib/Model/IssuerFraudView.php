<?php
/**
 * IssuerFraudView
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IssuerFraudView Class Doc Comment
 *
 * @category Class
 * @description Contains one or more fraud determinations by the card network that apply to either the transaction or the cardholder&#39;s account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class IssuerFraudView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'issuer_fraud_view';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fraud_score_reasons' => 'string[]',
        'recommended_action' => 'string',
        'risk_level' => 'string',
        'riskcontrol_tags' => '\OpenAPI\Client\Model\RiskcontrolTags[]',
        'rule_violations' => 'string[]',
        'score' => 'int',
        'triggered_rules' => '\OpenAPI\Client\Model\TriggeredRule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fraud_score_reasons' => null,
        'recommended_action' => null,
        'risk_level' => null,
        'riskcontrol_tags' => null,
        'rule_violations' => null,
        'score' => 'int32',
        'triggered_rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fraud_score_reasons' => 'fraud_score_reasons',
        'recommended_action' => 'recommended_action',
        'risk_level' => 'risk_level',
        'riskcontrol_tags' => 'riskcontrol_tags',
        'rule_violations' => 'rule_violations',
        'score' => 'score',
        'triggered_rules' => 'triggered_rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fraud_score_reasons' => 'setFraudScoreReasons',
        'recommended_action' => 'setRecommendedAction',
        'risk_level' => 'setRiskLevel',
        'riskcontrol_tags' => 'setRiskcontrolTags',
        'rule_violations' => 'setRuleViolations',
        'score' => 'setScore',
        'triggered_rules' => 'setTriggeredRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fraud_score_reasons' => 'getFraudScoreReasons',
        'recommended_action' => 'getRecommendedAction',
        'risk_level' => 'getRiskLevel',
        'riskcontrol_tags' => 'getRiskcontrolTags',
        'rule_violations' => 'getRuleViolations',
        'score' => 'getScore',
        'triggered_rules' => 'getTriggeredRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fraud_score_reasons'] = $data['fraud_score_reasons'] ?? null;
        $this->container['recommended_action'] = $data['recommended_action'] ?? null;
        $this->container['risk_level'] = $data['risk_level'] ?? null;
        $this->container['riskcontrol_tags'] = $data['riskcontrol_tags'] ?? null;
        $this->container['rule_violations'] = $data['rule_violations'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['triggered_rules'] = $data['triggered_rules'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fraud_score_reasons
     *
     * @return string[]|null
     */
    public function getFraudScoreReasons()
    {
        return $this->container['fraud_score_reasons'];
    }

    /**
     * Sets fraud_score_reasons
     *
     * @param string[]|null $fraud_score_reasons fraud_score_reasons
     *
     * @return self
     */
    public function setFraudScoreReasons($fraud_score_reasons)
    {
        $this->container['fraud_score_reasons'] = $fraud_score_reasons;

        return $this;
    }

    /**
     * Gets recommended_action
     *
     * @return string|null
     */
    public function getRecommendedAction()
    {
        return $this->container['recommended_action'];
    }

    /**
     * Sets recommended_action
     *
     * @param string|null $recommended_action The action recommended based on the fraud score.
     *
     * @return self
     */
    public function setRecommendedAction($recommended_action)
    {
        $this->container['recommended_action'] = $recommended_action;

        return $this;
    }

    /**
     * Gets risk_level
     *
     * @return string|null
     */
    public function getRiskLevel()
    {
        return $this->container['risk_level'];
    }

    /**
     * Sets risk_level
     *
     * @param string|null $risk_level The fraud rating, or level of risk associated with the transaction.
     *
     * @return self
     */
    public function setRiskLevel($risk_level)
    {
        $this->container['risk_level'] = $risk_level;

        return $this;
    }

    /**
     * Gets riskcontrol_tags
     *
     * @return \OpenAPI\Client\Model\RiskcontrolTags[]|null
     */
    public function getRiskcontrolTags()
    {
        return $this->container['riskcontrol_tags'];
    }

    /**
     * Sets riskcontrol_tags
     *
     * @param \OpenAPI\Client\Model\RiskcontrolTags[]|null $riskcontrol_tags The RiskControl tags that were triggered by the transaction.
     *
     * @return self
     */
    public function setRiskcontrolTags($riskcontrol_tags)
    {
        $this->container['riskcontrol_tags'] = $riskcontrol_tags;

        return $this;
    }

    /**
     * Gets rule_violations
     *
     * @return string[]|null
     */
    public function getRuleViolations()
    {
        return $this->container['rule_violations'];
    }

    /**
     * Sets rule_violations
     *
     * @param string[]|null $rule_violations The rules violated by the transaction.
     *
     * @return self
     */
    public function setRuleViolations($rule_violations)
    {
        $this->container['rule_violations'] = $rule_violations;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score The risk score generated by RiskControl. This is either the Mastercard Decision Intelligence or Visa Advance Authorization transaction risk score.
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets triggered_rules
     *
     * @return \OpenAPI\Client\Model\TriggeredRule[]|null
     */
    public function getTriggeredRules()
    {
        return $this->container['triggered_rules'];
    }

    /**
     * Sets triggered_rules
     *
     * @param \OpenAPI\Client\Model\TriggeredRule[]|null $triggered_rules Provides a list of rules triggered by a fraud event, along with the information on tags and rule characteristics.
     *
     * @return self
     */
    public function setTriggeredRules($triggered_rules)
    {
        $this->container['triggered_rules'] = $triggered_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


