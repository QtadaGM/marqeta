<?php
/**
 * ShippingInformationResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShippingInformationResponse Class Doc Comment
 *
 * @category Class
 * @description Specifies shipping details for the order.  This object is returned if it exists in the resource.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShippingInformationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'care_of_line' => 'string',
        'method' => 'string',
        'recipient_address' => '\OpenAPI\Client\Model\FulfillmentAddressResponse',
        'return_address' => '\OpenAPI\Client\Model\FulfillmentAddressResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'care_of_line' => null,
        'method' => null,
        'recipient_address' => null,
        'return_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'care_of_line' => 'care_of_line',
        'method' => 'method',
        'recipient_address' => 'recipient_address',
        'return_address' => 'return_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'care_of_line' => 'setCareOfLine',
        'method' => 'setMethod',
        'recipient_address' => 'setRecipientAddress',
        'return_address' => 'setReturnAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'care_of_line' => 'getCareOfLine',
        'method' => 'getMethod',
        'recipient_address' => 'getRecipientAddress',
        'return_address' => 'getReturnAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const METHOD_LOCAL_MAIL = 'LOCAL_MAIL';
    const METHOD_LOCAL_MAIL_PACKAGE = 'LOCAL_MAIL_PACKAGE';
    const METHOD_GROUND = 'GROUND';
    const METHOD_TWO_DAY = 'TWO_DAY';
    const METHOD_OVERNIGHT = 'OVERNIGHT';
    const METHOD_INTERNATIONAL = 'INTERNATIONAL';
    const METHOD_INTERNATIONAL_PRIORITY = 'INTERNATIONAL_PRIORITY';
    const METHOD_LOCAL_PRIORITY = 'LOCAL_PRIORITY';
    const METHOD_FEDEX_EXPEDITED = 'FEDEX_EXPEDITED';
    const METHOD_FEDEX_REGULAR = 'FEDEX_REGULAR';
    const METHOD_UPS_EXPEDITED = 'UPS_EXPEDITED';
    const METHOD_UPS_REGULAR = 'UPS_REGULAR';
    const METHOD_USPS_EXPEDITED = 'USPS_EXPEDITED';
    const METHOD_USPS_REGULAR = 'USPS_REGULAR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_LOCAL_MAIL,
            self::METHOD_LOCAL_MAIL_PACKAGE,
            self::METHOD_GROUND,
            self::METHOD_TWO_DAY,
            self::METHOD_OVERNIGHT,
            self::METHOD_INTERNATIONAL,
            self::METHOD_INTERNATIONAL_PRIORITY,
            self::METHOD_LOCAL_PRIORITY,
            self::METHOD_FEDEX_EXPEDITED,
            self::METHOD_FEDEX_REGULAR,
            self::METHOD_UPS_EXPEDITED,
            self::METHOD_UPS_REGULAR,
            self::METHOD_USPS_EXPEDITED,
            self::METHOD_USPS_REGULAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['care_of_line'] = $data['care_of_line'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['recipient_address'] = $data['recipient_address'] ?? null;
        $this->container['return_address'] = $data['return_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets care_of_line
     *
     * @return string|null
     */
    public function getCareOfLine()
    {
        return $this->container['care_of_line'];
    }

    /**
     * Sets care_of_line
     *
     * @param string|null $care_of_line Specifies the value of the care of (C/O) line on the mailing carrier.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setCareOfLine($care_of_line)
    {
        $this->container['care_of_line'] = $care_of_line;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method Specifies the shipping service.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets recipient_address
     *
     * @return \OpenAPI\Client\Model\FulfillmentAddressResponse|null
     */
    public function getRecipientAddress()
    {
        return $this->container['recipient_address'];
    }

    /**
     * Sets recipient_address
     *
     * @param \OpenAPI\Client\Model\FulfillmentAddressResponse|null $recipient_address recipient_address
     *
     * @return self
     */
    public function setRecipientAddress($recipient_address)
    {
        $this->container['recipient_address'] = $recipient_address;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \OpenAPI\Client\Model\FulfillmentAddressResponse|null
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \OpenAPI\Client\Model\FulfillmentAddressResponse|null $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        $this->container['return_address'] = $return_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


