<?php
/**
 * InterestCalculation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InterestCalculation Class Doc Comment
 *
 * @category Class
 * @description Contains the configurations for interest calculation.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InterestCalculation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InterestCalculation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_of_credits' => '\OpenAPI\Client\Model\ApplicationOfCredits',
        'day_count' => 'string',
        'exclude_tran_types' => 'string[]',
        'grace_days_application' => 'string',
        'interest_application' => 'string[]',
        'interest_on_grace_reactivation' => '\OpenAPI\Client\Model\InterestOnGraceReactivationEnum',
        'method' => 'string',
        'minimum_interest' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_of_credits' => null,
        'day_count' => null,
        'exclude_tran_types' => null,
        'grace_days_application' => null,
        'interest_application' => null,
        'interest_on_grace_reactivation' => null,
        'method' => null,
        'minimum_interest' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_of_credits' => 'application_of_credits',
        'day_count' => 'day_count',
        'exclude_tran_types' => 'exclude_tran_types',
        'grace_days_application' => 'grace_days_application',
        'interest_application' => 'interest_application',
        'interest_on_grace_reactivation' => 'interest_on_grace_reactivation',
        'method' => 'method',
        'minimum_interest' => 'minimum_interest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_of_credits' => 'setApplicationOfCredits',
        'day_count' => 'setDayCount',
        'exclude_tran_types' => 'setExcludeTranTypes',
        'grace_days_application' => 'setGraceDaysApplication',
        'interest_application' => 'setInterestApplication',
        'interest_on_grace_reactivation' => 'setInterestOnGraceReactivation',
        'method' => 'setMethod',
        'minimum_interest' => 'setMinimumInterest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_of_credits' => 'getApplicationOfCredits',
        'day_count' => 'getDayCount',
        'exclude_tran_types' => 'getExcludeTranTypes',
        'grace_days_application' => 'getGraceDaysApplication',
        'interest_application' => 'getInterestApplication',
        'interest_on_grace_reactivation' => 'getInterestOnGraceReactivation',
        'method' => 'getMethod',
        'minimum_interest' => 'getMinimumInterest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DAY_COUNT_ACTUAL = 'ACTUAL';
    const EXCLUDE_TRAN_TYPES_LATE_PAYMENT_FEE = 'LATE_PAYMENT_FEE';
    const EXCLUDE_TRAN_TYPES_ANNUAL_FEE = 'ANNUAL_FEE';
    const EXCLUDE_TRAN_TYPES_MONTHLY_FEE = 'MONTHLY_FEE';
    const EXCLUDE_TRAN_TYPES_CASH_BACK_STATEMENT_CREDIT = 'CASH_BACK_STATEMENT_CREDIT';
    const EXCLUDE_TRAN_TYPES_RETURNED_PAYMENT_FEE = 'RETURNED_PAYMENT_FEE';
    const EXCLUDE_TRAN_TYPES_FOREIGN_TRANSACTION_FEE = 'FOREIGN_TRANSACTION_FEE';
    const GRACE_DAYS_APPLICATION_NEXT_CYCLE_DATE = 'NEXT_CYCLE_DATE';
    const INTEREST_APPLICATION_PRINCIPAL = 'PRINCIPAL';
    const INTEREST_APPLICATION_FEES = 'FEES';
    const INTEREST_APPLICATION_INTEREST = 'INTEREST';
    const METHOD_AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS = 'AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDayCountAllowableValues()
    {
        return [
            self::DAY_COUNT_ACTUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludeTranTypesAllowableValues()
    {
        return [
            self::EXCLUDE_TRAN_TYPES_LATE_PAYMENT_FEE,
            self::EXCLUDE_TRAN_TYPES_ANNUAL_FEE,
            self::EXCLUDE_TRAN_TYPES_MONTHLY_FEE,
            self::EXCLUDE_TRAN_TYPES_CASH_BACK_STATEMENT_CREDIT,
            self::EXCLUDE_TRAN_TYPES_RETURNED_PAYMENT_FEE,
            self::EXCLUDE_TRAN_TYPES_FOREIGN_TRANSACTION_FEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGraceDaysApplicationAllowableValues()
    {
        return [
            self::GRACE_DAYS_APPLICATION_NEXT_CYCLE_DATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestApplicationAllowableValues()
    {
        return [
            self::INTEREST_APPLICATION_PRINCIPAL,
            self::INTEREST_APPLICATION_FEES,
            self::INTEREST_APPLICATION_INTEREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_AVG_DAILY_BALANCE_WITH_NEW_TRANSACTIONS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_of_credits'] = $data['application_of_credits'] ?? null;
        $this->container['day_count'] = $data['day_count'] ?? null;
        $this->container['exclude_tran_types'] = $data['exclude_tran_types'] ?? null;
        $this->container['grace_days_application'] = $data['grace_days_application'] ?? null;
        $this->container['interest_application'] = $data['interest_application'] ?? null;
        $this->container['interest_on_grace_reactivation'] = $data['interest_on_grace_reactivation'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['minimum_interest'] = $data['minimum_interest'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['application_of_credits'] === null) {
            $invalidProperties[] = "'application_of_credits' can't be null";
        }
        if ($this->container['day_count'] === null) {
            $invalidProperties[] = "'day_count' can't be null";
        }
        $allowedValues = $this->getDayCountAllowableValues();
        if (!is_null($this->container['day_count']) && !in_array($this->container['day_count'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'day_count', must be one of '%s'",
                $this->container['day_count'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['grace_days_application'] === null) {
            $invalidProperties[] = "'grace_days_application' can't be null";
        }
        $allowedValues = $this->getGraceDaysApplicationAllowableValues();
        if (!is_null($this->container['grace_days_application']) && !in_array($this->container['grace_days_application'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'grace_days_application', must be one of '%s'",
                $this->container['grace_days_application'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['interest_application'] === null) {
            $invalidProperties[] = "'interest_application' can't be null";
        }
        if ((count($this->container['interest_application']) < 1)) {
            $invalidProperties[] = "invalid value for 'interest_application', number of items must be greater than or equal to 1.";
        }

        if ($this->container['interest_on_grace_reactivation'] === null) {
            $invalidProperties[] = "'interest_on_grace_reactivation' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['minimum_interest'] === null) {
            $invalidProperties[] = "'minimum_interest' can't be null";
        }
        if (($this->container['minimum_interest'] > 999999999999.99)) {
            $invalidProperties[] = "invalid value for 'minimum_interest', must be smaller than or equal to 999999999999.99.";
        }

        if (($this->container['minimum_interest'] < 0)) {
            $invalidProperties[] = "invalid value for 'minimum_interest', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_of_credits
     *
     * @return \OpenAPI\Client\Model\ApplicationOfCredits
     */
    public function getApplicationOfCredits()
    {
        return $this->container['application_of_credits'];
    }

    /**
     * Sets application_of_credits
     *
     * @param \OpenAPI\Client\Model\ApplicationOfCredits $application_of_credits application_of_credits
     *
     * @return self
     */
    public function setApplicationOfCredits($application_of_credits)
    {
        $this->container['application_of_credits'] = $application_of_credits;

        return $this;
    }

    /**
     * Gets day_count
     *
     * @return string
     */
    public function getDayCount()
    {
        return $this->container['day_count'];
    }

    /**
     * Sets day_count
     *
     * @param string $day_count Day-count convention.
     *
     * @return self
     */
    public function setDayCount($day_count)
    {
        $allowedValues = $this->getDayCountAllowableValues();
        if (!in_array($day_count, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'day_count', must be one of '%s'",
                    $day_count,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['day_count'] = $day_count;

        return $this;
    }

    /**
     * Gets exclude_tran_types
     *
     * @return string[]|null
     */
    public function getExcludeTranTypes()
    {
        return $this->container['exclude_tran_types'];
    }

    /**
     * Sets exclude_tran_types
     *
     * @param string[]|null $exclude_tran_types One or more transactions that are excluded from current billing period's interest charge, but included in next.
     *
     * @return self
     */
    public function setExcludeTranTypes($exclude_tran_types)
    {
        $allowedValues = $this->getExcludeTranTypesAllowableValues();
        if (!is_null($exclude_tran_types) && array_diff($exclude_tran_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclude_tran_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exclude_tran_types'] = $exclude_tran_types;

        return $this;
    }

    /**
     * Gets grace_days_application
     *
     * @return string
     */
    public function getGraceDaysApplication()
    {
        return $this->container['grace_days_application'];
    }

    /**
     * Sets grace_days_application
     *
     * @param string $grace_days_application Determines the last day of grace period based on which interest charges are calculated.
     *
     * @return self
     */
    public function setGraceDaysApplication($grace_days_application)
    {
        $allowedValues = $this->getGraceDaysApplicationAllowableValues();
        if (!in_array($grace_days_application, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'grace_days_application', must be one of '%s'",
                    $grace_days_application,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grace_days_application'] = $grace_days_application;

        return $this;
    }

    /**
     * Gets interest_application
     *
     * @return string[]
     */
    public function getInterestApplication()
    {
        return $this->container['interest_application'];
    }

    /**
     * Sets interest_application
     *
     * @param string[] $interest_application One or more balance types on which interest is applied.
     *
     * @return self
     */
    public function setInterestApplication($interest_application)
    {
        $allowedValues = $this->getInterestApplicationAllowableValues();
        if (array_diff($interest_application, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interest_application', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        if ((count($interest_application) < 1)) {
            throw new \InvalidArgumentException('invalid length for $interest_application when calling InterestCalculation., number of items must be greater than or equal to 1.');
        }
        $this->container['interest_application'] = $interest_application;

        return $this;
    }

    /**
     * Gets interest_on_grace_reactivation
     *
     * @return \OpenAPI\Client\Model\InterestOnGraceReactivationEnum
     */
    public function getInterestOnGraceReactivation()
    {
        return $this->container['interest_on_grace_reactivation'];
    }

    /**
     * Sets interest_on_grace_reactivation
     *
     * @param \OpenAPI\Client\Model\InterestOnGraceReactivationEnum $interest_on_grace_reactivation interest_on_grace_reactivation
     *
     * @return self
     */
    public function setInterestOnGraceReactivation($interest_on_grace_reactivation)
    {
        $this->container['interest_on_grace_reactivation'] = $interest_on_grace_reactivation;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Method of interest calculation.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets minimum_interest
     *
     * @return float
     */
    public function getMinimumInterest()
    {
        return $this->container['minimum_interest'];
    }

    /**
     * Sets minimum_interest
     *
     * @param float $minimum_interest When interest is applied, this value determines the minimum amount of interest that can be charged.
     *
     * @return self
     */
    public function setMinimumInterest($minimum_interest)
    {

        if (($minimum_interest > 999999999999.99)) {
            throw new \InvalidArgumentException('invalid value for $minimum_interest when calling InterestCalculation., must be smaller than or equal to 999999999999.99.');
        }
        if (($minimum_interest < 0)) {
            throw new \InvalidArgumentException('invalid value for $minimum_interest when calling InterestCalculation., must be bigger than or equal to 0.');
        }

        $this->container['minimum_interest'] = $minimum_interest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


