<?php
/**
 * PaymentSourceCreateReq
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentSourceCreateReq Class Doc Comment
 *
 * @category Class
 * @description Contains information about a payment source.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentSourceCreateReq implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSourceCreateReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'string',
        'account_token' => 'string',
        'bank_name' => 'string',
        'business_token' => 'string',
        'name' => 'string',
        'owner' => 'string',
        'routing_number' => 'string',
        'source_type' => 'string',
        'token' => 'string',
        'user_token' => 'string',
        'verification_notes' => 'string',
        'verification_override' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'account_token' => null,
        'bank_name' => null,
        'business_token' => null,
        'name' => null,
        'owner' => null,
        'routing_number' => null,
        'source_type' => null,
        'token' => null,
        'user_token' => null,
        'verification_notes' => null,
        'verification_override' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'account_number',
        'account_token' => 'account_token',
        'bank_name' => 'bank_name',
        'business_token' => 'business_token',
        'name' => 'name',
        'owner' => 'owner',
        'routing_number' => 'routing_number',
        'source_type' => 'source_type',
        'token' => 'token',
        'user_token' => 'user_token',
        'verification_notes' => 'verification_notes',
        'verification_override' => 'verification_override'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'account_token' => 'setAccountToken',
        'bank_name' => 'setBankName',
        'business_token' => 'setBusinessToken',
        'name' => 'setName',
        'owner' => 'setOwner',
        'routing_number' => 'setRoutingNumber',
        'source_type' => 'setSourceType',
        'token' => 'setToken',
        'user_token' => 'setUserToken',
        'verification_notes' => 'setVerificationNotes',
        'verification_override' => 'setVerificationOverride'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'account_token' => 'getAccountToken',
        'bank_name' => 'getBankName',
        'business_token' => 'getBusinessToken',
        'name' => 'getName',
        'owner' => 'getOwner',
        'routing_number' => 'getRoutingNumber',
        'source_type' => 'getSourceType',
        'token' => 'getToken',
        'user_token' => 'getUserToken',
        'verification_notes' => 'getVerificationNotes',
        'verification_override' => 'getVerificationOverride'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OWNER_INDIVIDUAL = 'INDIVIDUAL';
    const OWNER_BUSINESS = 'BUSINESS';
    const SOURCE_TYPE_CHECKING = 'CHECKING';
    const SOURCE_TYPE_SAVINGS = 'SAVINGS';
    const SOURCE_TYPE_OTHER = 'OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerAllowableValues()
    {
        return [
            self::OWNER_INDIVIDUAL,
            self::OWNER_BUSINESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceTypeAllowableValues()
    {
        return [
            self::SOURCE_TYPE_CHECKING,
            self::SOURCE_TYPE_SAVINGS,
            self::SOURCE_TYPE_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['bank_name'] = $data['bank_name'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['routing_number'] = $data['routing_number'] ?? null;
        $this->container['source_type'] = $data['source_type'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
        $this->container['verification_notes'] = $data['verification_notes'] ?? null;
        $this->container['verification_override'] = $data['verification_override'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ((mb_strlen($this->container['account_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ((mb_strlen($this->container['account_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['business_token']) && (mb_strlen($this->container['business_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'business_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getOwnerAllowableValues();
        if (!is_null($this->container['owner']) && !in_array($this->container['owner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'owner', must be one of '%s'",
                $this->container['owner'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['routing_number'] === null) {
            $invalidProperties[] = "'routing_number' can't be null";
        }
        if ((mb_strlen($this->container['routing_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'routing_number', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['source_type'] === null) {
            $invalidProperties[] = "'source_type' can't be null";
        }
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!is_null($this->container['source_type']) && !in_array($this->container['source_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_type', must be one of '%s'",
                $this->container['source_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['token']) && !preg_match("/(?!^ +$)^.+$/", $this->container['token'])) {
            $invalidProperties[] = "invalid value for 'token', must be conform to the pattern /(?!^ +$)^.+$/.";
        }

        if (!is_null($this->container['user_token']) && (mb_strlen($this->container['user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['verification_notes']) && (mb_strlen($this->container['verification_notes']) > 255)) {
            $invalidProperties[] = "invalid value for 'verification_notes', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['verification_override'] === null) {
            $invalidProperties[] = "'verification_override' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number Account number of the payment source.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if ((mb_strlen($account_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling PaymentSourceCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account receiving the payment.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        if ((mb_strlen($account_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_token when calling PaymentSourceCreateReq., must be smaller than or equal to 36.');
        }

        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Name of the bank associated with the routing number
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (!is_null($bank_name) && (mb_strlen($bank_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling PaymentSourceCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token Unique identifier of the business making the payment.
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        if (!is_null($business_token) && (mb_strlen($business_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $business_token when calling PaymentSourceCreateReq., must be smaller than or equal to 36.');
        }

        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the individual or business who owns the payment source.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PaymentSourceCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Type of payment source owner.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $allowedValues = $this->getOwnerAllowableValues();
        if (!is_null($owner) && !in_array($owner, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'owner', must be one of '%s'",
                    $owner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string $routing_number Routing number of the payment source.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if ((mb_strlen($routing_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $routing_number when calling PaymentSourceCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string $source_type Type of payment source.
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!in_array($source_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_type', must be one of '%s'",
                    $source_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the payment source.
     *
     * @return self
     */
    public function setToken($token)
    {

        if (!is_null($token) && (!preg_match("/(?!^ +$)^.+$/", $token))) {
            throw new \InvalidArgumentException("invalid value for $token when calling PaymentSourceCreateReq., must conform to the pattern /(?!^ +$)^.+$/.");
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token Unique identifier of the user making the payment.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        if (!is_null($user_token) && (mb_strlen($user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling PaymentSourceCreateReq., must be smaller than or equal to 36.');
        }

        $this->container['user_token'] = $user_token;

        return $this;
    }

    /**
     * Gets verification_notes
     *
     * @return string|null
     */
    public function getVerificationNotes()
    {
        return $this->container['verification_notes'];
    }

    /**
     * Sets verification_notes
     *
     * @param string|null $verification_notes Additional information on the verification.
     *
     * @return self
     */
    public function setVerificationNotes($verification_notes)
    {
        if (!is_null($verification_notes) && (mb_strlen($verification_notes) > 255)) {
            throw new \InvalidArgumentException('invalid length for $verification_notes when calling PaymentSourceCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['verification_notes'] = $verification_notes;

        return $this;
    }

    /**
     * Gets verification_override
     *
     * @return bool
     */
    public function getVerificationOverride()
    {
        return $this->container['verification_override'];
    }

    /**
     * Sets verification_override
     *
     * @param bool $verification_override Whether to override the verification process.
     *
     * @return self
     */
    public function setVerificationOverride($verification_override)
    {
        $this->container['verification_override'] = $verification_override;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


