<?php
/**
 * PrimaryContactInfoModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PrimaryContactInfoModel Class Doc Comment
 *
 * @category Class
 * @description Describes the business&#39; primary contact person.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PrimaryContactInfoModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrimaryContactInfoModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'department' => 'string',
        'email' => 'string',
        'extension' => 'string',
        'fax' => 'string',
        'full_name' => 'string',
        'mobile' => 'string',
        'phone' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'department' => null,
        'email' => null,
        'extension' => null,
        'fax' => null,
        'full_name' => null,
        'mobile' => null,
        'phone' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'department' => 'department',
        'email' => 'email',
        'extension' => 'extension',
        'fax' => 'fax',
        'full_name' => 'full_name',
        'mobile' => 'mobile',
        'phone' => 'phone',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'department' => 'setDepartment',
        'email' => 'setEmail',
        'extension' => 'setExtension',
        'fax' => 'setFax',
        'full_name' => 'setFullName',
        'mobile' => 'setMobile',
        'phone' => 'setPhone',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'department' => 'getDepartment',
        'email' => 'getEmail',
        'extension' => 'getExtension',
        'fax' => 'getFax',
        'full_name' => 'getFullName',
        'mobile' => 'getMobile',
        'phone' => 'getPhone',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['department'] = $data['department'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['extension'] = $data['extension'] ?? null;
        $this->container['fax'] = $data['fax'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['mobile'] = $data['mobile'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 255)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) < 0)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extension']) && (mb_strlen($this->container['extension']) > 255)) {
            $invalidProperties[] = "invalid value for 'extension', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['extension']) && (mb_strlen($this->container['extension']) < 0)) {
            $invalidProperties[] = "invalid value for 'extension', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 255)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) < 0)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) > 255)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Business department of the primary contact.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (!is_null($department) && (mb_strlen($department) > 255)) {
            throw new \InvalidArgumentException('invalid length for $department when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($department) && (mb_strlen($department) < 0)) {
            throw new \InvalidArgumentException('invalid length for $department when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of the primary contact.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($email) && (mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension Phone extension of the primary contact.
     *
     * @return self
     */
    public function setExtension($extension)
    {
        if (!is_null($extension) && (mb_strlen($extension) > 255)) {
            throw new \InvalidArgumentException('invalid length for $extension when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($extension) && (mb_strlen($extension) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extension when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Fax number of the primary contact.
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (!is_null($fax) && (mb_strlen($fax) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($fax) && (mb_strlen($fax) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Full name of the primary contact.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (!is_null($full_name) && (mb_strlen($full_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($full_name) && (mb_strlen($full_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile Mobile phone number of the primary contact.
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        if (!is_null($mobile) && (mb_strlen($mobile) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($mobile) && (mb_strlen($mobile) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number of the primary contact.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the primary contact.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling PrimaryContactInfoModel., must be smaller than or equal to 255.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling PrimaryContactInfoModel., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


