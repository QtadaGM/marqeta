<?php
/**
 * AccountConfigResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountConfigResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information returned when configuring an account&#39;s billing cycle day, payment due day, fees, and more.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountConfigResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountConfigResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_cycle_day' => 'int',
        'card_level' => 'string',
        'e_disclosure_active' => 'bool',
        'fees' => '\OpenAPI\Client\Model\ConfigFeeScheduleResponse[]',
        'min_payment' => '\OpenAPI\Client\Model\AccountConfigMinPayment',
        'payment_due_day' => 'int',
        'payment_holds' => '\OpenAPI\Client\Model\AccountConfigPaymentHolds',
        'rewards' => '\OpenAPI\Client\Model\AccountReward[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_cycle_day' => null,
        'card_level' => null,
        'e_disclosure_active' => null,
        'fees' => null,
        'min_payment' => null,
        'payment_due_day' => null,
        'payment_holds' => null,
        'rewards' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_cycle_day' => 'billing_cycle_day',
        'card_level' => 'card_level',
        'e_disclosure_active' => 'e_disclosure_active',
        'fees' => 'fees',
        'min_payment' => 'min_payment',
        'payment_due_day' => 'payment_due_day',
        'payment_holds' => 'payment_holds',
        'rewards' => 'rewards'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_cycle_day' => 'setBillingCycleDay',
        'card_level' => 'setCardLevel',
        'e_disclosure_active' => 'setEDisclosureActive',
        'fees' => 'setFees',
        'min_payment' => 'setMinPayment',
        'payment_due_day' => 'setPaymentDueDay',
        'payment_holds' => 'setPaymentHolds',
        'rewards' => 'setRewards'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_cycle_day' => 'getBillingCycleDay',
        'card_level' => 'getCardLevel',
        'e_disclosure_active' => 'getEDisclosureActive',
        'fees' => 'getFees',
        'min_payment' => 'getMinPayment',
        'payment_due_day' => 'getPaymentDueDay',
        'payment_holds' => 'getPaymentHolds',
        'rewards' => 'getRewards'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_LEVEL_PREMIUM = 'PREMIUM';
    const CARD_LEVEL_TRADITIONAL = 'TRADITIONAL';
    const CARD_LEVEL_NA = 'NA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardLevelAllowableValues()
    {
        return [
            self::CARD_LEVEL_PREMIUM,
            self::CARD_LEVEL_TRADITIONAL,
            self::CARD_LEVEL_NA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_cycle_day'] = $data['billing_cycle_day'] ?? null;
        $this->container['card_level'] = $data['card_level'] ?? 'NA';
        $this->container['e_disclosure_active'] = $data['e_disclosure_active'] ?? false;
        $this->container['fees'] = $data['fees'] ?? null;
        $this->container['min_payment'] = $data['min_payment'] ?? null;
        $this->container['payment_due_day'] = $data['payment_due_day'] ?? null;
        $this->container['payment_holds'] = $data['payment_holds'] ?? null;
        $this->container['rewards'] = $data['rewards'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billing_cycle_day'] === null) {
            $invalidProperties[] = "'billing_cycle_day' can't be null";
        }
        if (($this->container['billing_cycle_day'] > 28)) {
            $invalidProperties[] = "invalid value for 'billing_cycle_day', must be smaller than or equal to 28.";
        }

        if (($this->container['billing_cycle_day'] < 1)) {
            $invalidProperties[] = "invalid value for 'billing_cycle_day', must be bigger than or equal to 1.";
        }

        if ($this->container['card_level'] === null) {
            $invalidProperties[] = "'card_level' can't be null";
        }
        $allowedValues = $this->getCardLevelAllowableValues();
        if (!is_null($this->container['card_level']) && !in_array($this->container['card_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_level', must be one of '%s'",
                $this->container['card_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['e_disclosure_active'] === null) {
            $invalidProperties[] = "'e_disclosure_active' can't be null";
        }
        if (!is_null($this->container['payment_due_day']) && ($this->container['payment_due_day'] > 31)) {
            $invalidProperties[] = "invalid value for 'payment_due_day', must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['payment_due_day']) && ($this->container['payment_due_day'] < 31)) {
            $invalidProperties[] = "invalid value for 'payment_due_day', must be bigger than or equal to 31.";
        }

        if ($this->container['payment_holds'] === null) {
            $invalidProperties[] = "'payment_holds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_cycle_day
     *
     * @return int
     */
    public function getBillingCycleDay()
    {
        return $this->container['billing_cycle_day'];
    }

    /**
     * Sets billing_cycle_day
     *
     * @param int $billing_cycle_day Day of month the billing cycle starts.  If an override value is not provided, the default value is derived from the bundle.
     *
     * @return self
     */
    public function setBillingCycleDay($billing_cycle_day)
    {

        if (($billing_cycle_day > 28)) {
            throw new \InvalidArgumentException('invalid value for $billing_cycle_day when calling AccountConfigResponse., must be smaller than or equal to 28.');
        }
        if (($billing_cycle_day < 1)) {
            throw new \InvalidArgumentException('invalid value for $billing_cycle_day when calling AccountConfigResponse., must be bigger than or equal to 1.');
        }

        $this->container['billing_cycle_day'] = $billing_cycle_day;

        return $this;
    }

    /**
     * Gets card_level
     *
     * @return string
     */
    public function getCardLevel()
    {
        return $this->container['card_level'];
    }

    /**
     * Sets card_level
     *
     * @param string $card_level Level of the credit card.
     *
     * @return self
     */
    public function setCardLevel($card_level)
    {
        $allowedValues = $this->getCardLevelAllowableValues();
        if (!in_array($card_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_level', must be one of '%s'",
                    $card_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_level'] = $card_level;

        return $this;
    }

    /**
     * Gets e_disclosure_active
     *
     * @return bool
     */
    public function getEDisclosureActive()
    {
        return $this->container['e_disclosure_active'];
    }

    /**
     * Sets e_disclosure_active
     *
     * @param bool $e_disclosure_active A value of `true` indicates that the account holder consents to receiving disclosures and statements electronically.
     *
     * @return self
     */
    public function setEDisclosureActive($e_disclosure_active)
    {
        $this->container['e_disclosure_active'] = $e_disclosure_active;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\ConfigFeeScheduleResponse[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\ConfigFeeScheduleResponse[]|null $fees Contains one or more fees associated with the credit account.
     *
     * @return self
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets min_payment
     *
     * @return \OpenAPI\Client\Model\AccountConfigMinPayment|null
     */
    public function getMinPayment()
    {
        return $this->container['min_payment'];
    }

    /**
     * Sets min_payment
     *
     * @param \OpenAPI\Client\Model\AccountConfigMinPayment|null $min_payment min_payment
     *
     * @return self
     */
    public function setMinPayment($min_payment)
    {
        $this->container['min_payment'] = $min_payment;

        return $this;
    }

    /**
     * Gets payment_due_day
     *
     * @return int|null
     * @deprecated
     */
    public function getPaymentDueDay()
    {
        return $this->container['payment_due_day'];
    }

    /**
     * Sets payment_due_day
     *
     * @param int|null $payment_due_day Day of month the payment for the previous billing cycle is due.
     *
     * @return self
     * @deprecated
     */
    public function setPaymentDueDay($payment_due_day)
    {

        if (!is_null($payment_due_day) && ($payment_due_day > 31)) {
            throw new \InvalidArgumentException('invalid value for $payment_due_day when calling AccountConfigResponse., must be smaller than or equal to 31.');
        }
        if (!is_null($payment_due_day) && ($payment_due_day < 31)) {
            throw new \InvalidArgumentException('invalid value for $payment_due_day when calling AccountConfigResponse., must be bigger than or equal to 31.');
        }

        $this->container['payment_due_day'] = $payment_due_day;

        return $this;
    }

    /**
     * Gets payment_holds
     *
     * @return \OpenAPI\Client\Model\AccountConfigPaymentHolds
     */
    public function getPaymentHolds()
    {
        return $this->container['payment_holds'];
    }

    /**
     * Sets payment_holds
     *
     * @param \OpenAPI\Client\Model\AccountConfigPaymentHolds $payment_holds payment_holds
     *
     * @return self
     */
    public function setPaymentHolds($payment_holds)
    {
        $this->container['payment_holds'] = $payment_holds;

        return $this;
    }

    /**
     * Gets rewards
     *
     * @return \OpenAPI\Client\Model\AccountReward[]|null
     */
    public function getRewards()
    {
        return $this->container['rewards'];
    }

    /**
     * Sets rewards
     *
     * @param \OpenAPI\Client\Model\AccountReward[]|null $rewards Contains one or more rewards associated with the credit account.
     *
     * @return self
     */
    public function setRewards($rewards)
    {
        $this->container['rewards'] = $rewards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


