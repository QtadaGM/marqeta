<?php
/**
 * WalletProviderProfile
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WalletProviderProfile Class Doc Comment
 *
 * @category Class
 * @description Contains information held and provided by the digital wallet provider.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WalletProviderProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'wallet_provider_profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => '\OpenAPI\Client\Model\Account',
        'device_score' => 'string',
        'pan_source' => 'string',
        'reason_code' => 'string',
        'recommendation_reasons' => 'string[]',
        'risk_assessment' => '\OpenAPI\Client\Model\RiskAssessment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'device_score' => null,
        'pan_source' => null,
        'reason_code' => null,
        'recommendation_reasons' => null,
        'risk_assessment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'device_score' => 'device_score',
        'pan_source' => 'pan_source',
        'reason_code' => 'reason_code',
        'recommendation_reasons' => 'recommendation_reasons',
        'risk_assessment' => 'risk_assessment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'device_score' => 'setDeviceScore',
        'pan_source' => 'setPanSource',
        'reason_code' => 'setReasonCode',
        'recommendation_reasons' => 'setRecommendationReasons',
        'risk_assessment' => 'setRiskAssessment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'device_score' => 'getDeviceScore',
        'pan_source' => 'getPanSource',
        'reason_code' => 'getReasonCode',
        'recommendation_reasons' => 'getRecommendationReasons',
        'risk_assessment' => 'getRiskAssessment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = $data['account'] ?? null;
        $this->container['device_score'] = $data['device_score'] ?? null;
        $this->container['pan_source'] = $data['pan_source'] ?? null;
        $this->container['reason_code'] = $data['reason_code'] ?? null;
        $this->container['recommendation_reasons'] = $data['recommendation_reasons'] ?? null;
        $this->container['risk_assessment'] = $data['risk_assessment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\Account|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\Account|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets device_score
     *
     * @return string|null
     */
    public function getDeviceScore()
    {
        return $this->container['device_score'];
    }

    /**
     * Sets device_score
     *
     * @param string|null $device_score Score from the device.
     *
     * @return self
     */
    public function setDeviceScore($device_score)
    {
        $this->container['device_score'] = $device_score;

        return $this;
    }

    /**
     * Gets pan_source
     *
     * @return string|null
     */
    public function getPanSource()
    {
        return $this->container['pan_source'];
    }

    /**
     * Sets pan_source
     *
     * @param string|null $pan_source Source from which the digital wallet provider obtained the card primary account number (PAN).
     *
     * @return self
     */
    public function setPanSource($pan_source)
    {
        $this->container['pan_source'] = $pan_source;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Reason for the wallet provider's provisioning decision.  * *01* – Cardholder's wallet account is too new relative to launch. * *02* – Cardholder's wallet account is too new relative to provisioning request. * *03* – Cardholder's wallet account/card pair is newer than date threshold. * *04* – Changes made to account data within the account threshold. * *05* – Suspicious transactions linked to this account. * *06* – Account has not had activity in the last year. * *07* – Suspended cards in the secure element. * *08* – Device was put in lost mode in the last seven days for longer than the duration threshold. * *09* – The number of provisioning attempts on this device in 24 hours exceeds threshold. * *0A* – There have been more than the threshold number of different cards attempted at provisioning to this phone in 24 hours. * *0B* – The card provisioning attempt contains a distinct name in excess of the threshold. * *0C* – The device score is less than 3. * *0D* – The account score is less than 4. * *0E* – Device provisioning location outside of the cardholder's wallet account home country. * *0G* – Suspect fraud.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets recommendation_reasons
     *
     * @return string[]|null
     */
    public function getRecommendationReasons()
    {
        return $this->container['recommendation_reasons'];
    }

    /**
     * Sets recommendation_reasons
     *
     * @param string[]|null $recommendation_reasons Array of recommendation reasons from the digital wallet provider.
     *
     * @return self
     */
    public function setRecommendationReasons($recommendation_reasons)
    {
        $this->container['recommendation_reasons'] = $recommendation_reasons;

        return $this;
    }

    /**
     * Gets risk_assessment
     *
     * @return \OpenAPI\Client\Model\RiskAssessment|null
     */
    public function getRiskAssessment()
    {
        return $this->container['risk_assessment'];
    }

    /**
     * Sets risk_assessment
     *
     * @param \OpenAPI\Client\Model\RiskAssessment|null $risk_assessment risk_assessment
     *
     * @return self
     */
    public function setRiskAssessment($risk_assessment)
    {
        $this->container['risk_assessment'] = $risk_assessment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


