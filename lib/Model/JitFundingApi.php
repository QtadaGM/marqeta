<?php
/**
 * JitFundingApi
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JitFundingApi Class Doc Comment
 *
 * @category Class
 * @description Contains information about the JIT Funding load event, in which funds are loaded into an account.  This object is returned if your program uses JIT Funding.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class JitFundingApi implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'jit_funding_api';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_name_verification' => '\OpenAPI\Client\Model\JitAccountNameVerification',
        'acting_user_token' => 'string',
        'address_verification' => '\OpenAPI\Client\Model\JitAddressVerification',
        'amount' => 'float',
        'balances' => 'array<string,\OpenAPI\Client\Model\CardholderBalance>',
        'business_token' => 'string',
        'decline_reason' => 'string',
        'incremental_authorization_jit_funding_tokens' => 'string[]',
        'jit_account_name_verification' => '\OpenAPI\Client\Model\JitAccountNameVerification',
        'memo' => 'string',
        'method' => 'string',
        'original_jit_funding_token' => 'string',
        'tags' => 'string',
        'token' => 'string',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_name_verification' => null,
        'acting_user_token' => null,
        'address_verification' => null,
        'amount' => null,
        'balances' => null,
        'business_token' => null,
        'decline_reason' => null,
        'incremental_authorization_jit_funding_tokens' => null,
        'jit_account_name_verification' => null,
        'memo' => null,
        'method' => null,
        'original_jit_funding_token' => null,
        'tags' => null,
        'token' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name_verification' => 'account_name_verification',
        'acting_user_token' => 'acting_user_token',
        'address_verification' => 'address_verification',
        'amount' => 'amount',
        'balances' => 'balances',
        'business_token' => 'business_token',
        'decline_reason' => 'decline_reason',
        'incremental_authorization_jit_funding_tokens' => 'incremental_authorization_jit_funding_tokens',
        'jit_account_name_verification' => 'jit_account_name_verification',
        'memo' => 'memo',
        'method' => 'method',
        'original_jit_funding_token' => 'original_jit_funding_token',
        'tags' => 'tags',
        'token' => 'token',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name_verification' => 'setAccountNameVerification',
        'acting_user_token' => 'setActingUserToken',
        'address_verification' => 'setAddressVerification',
        'amount' => 'setAmount',
        'balances' => 'setBalances',
        'business_token' => 'setBusinessToken',
        'decline_reason' => 'setDeclineReason',
        'incremental_authorization_jit_funding_tokens' => 'setIncrementalAuthorizationJitFundingTokens',
        'jit_account_name_verification' => 'setJitAccountNameVerification',
        'memo' => 'setMemo',
        'method' => 'setMethod',
        'original_jit_funding_token' => 'setOriginalJitFundingToken',
        'tags' => 'setTags',
        'token' => 'setToken',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name_verification' => 'getAccountNameVerification',
        'acting_user_token' => 'getActingUserToken',
        'address_verification' => 'getAddressVerification',
        'amount' => 'getAmount',
        'balances' => 'getBalances',
        'business_token' => 'getBusinessToken',
        'decline_reason' => 'getDeclineReason',
        'incremental_authorization_jit_funding_tokens' => 'getIncrementalAuthorizationJitFundingTokens',
        'jit_account_name_verification' => 'getJitAccountNameVerification',
        'memo' => 'getMemo',
        'method' => 'getMethod',
        'original_jit_funding_token' => 'getOriginalJitFundingToken',
        'tags' => 'getTags',
        'token' => 'getToken',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DECLINE_REASON_INVALID_AMOUNT = 'INVALID_AMOUNT';
    const DECLINE_REASON_INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
    const DECLINE_REASON_TRANSACTION_NOT_PERMITTED = 'TRANSACTION_NOT_PERMITTED';
    const DECLINE_REASON_SUSPECTED_FRAUD = 'SUSPECTED_FRAUD';
    const DECLINE_REASON_AMOUNT_LIMIT_EXCEEDED = 'AMOUNT_LIMIT_EXCEEDED';
    const DECLINE_REASON_TRANSACTION_COUNT_LIMIT_EXCEEDED = 'TRANSACTION_COUNT_LIMIT_EXCEEDED';
    const DECLINE_REASON_DUPLICATE_TRANSACTION = 'DUPLICATE_TRANSACTION';
    const DECLINE_REASON_INVALID_MERCHANT = 'INVALID_MERCHANT';
    const DECLINE_REASON_INVALID_CARD = 'INVALID_CARD';
    const DECLINE_REASON_NO_CREDIT_ACCOUNT = 'NO_CREDIT_ACCOUNT';
    const DECLINE_REASON_EXPIRED_CARD = 'EXPIRED_CARD';
    const DECLINE_REASON_NO_CHECKING_ACCOUNT = 'NO_CHECKING_ACCOUNT';
    const DECLINE_REASON_NO_SAVINGS_ACCOUNT = 'NO_SAVINGS_ACCOUNT';
    const DECLINE_REASON_STOP_PAYMENT = 'STOP_PAYMENT';
    const DECLINE_REASON_REVOCATION_AUTHORIZATION_ORDER = 'REVOCATION_AUTHORIZATION_ORDER';
    const DECLINE_REASON_REVOCATION_ALL_AUTHORIZATION_ORDER = 'REVOCATION_ALL_AUTHORIZATION_ORDER';
    const DECLINE_REASON_SOFT_DECLINE_AUTHENTICATION_REQUIRED = 'SOFT_DECLINE_AUTHENTICATION_REQUIRED';
    const DECLINE_REASON_CLOSED_ACCOUNT = 'CLOSED_ACCOUNT';
    const DECLINE_REASON_SOFT_DECLINE_PIN_REQUIRED = 'SOFT_DECLINE_PIN_REQUIRED';
    const DECLINE_REASON_CARD_NOT_ACTIVE = 'CARD_NOT_ACTIVE';
    const DECLINE_REASON_CARDHOLDER_NOT_ACTIVE = 'CARDHOLDER_NOT_ACTIVE';
    const METHOD_AUTHORIZATION = 'pgfs.authorization';
    const METHOD_AUTHORIZATION_CLEARING = 'pgfs.authorization.clearing';
    const METHOD_AUTHORIZATION_ADVICE = 'pgfs.authorization.advice';
    const METHOD_AUTHORIZATION_INCREMENTAL = 'pgfs.authorization.incremental';
    const METHOD_AUTHORIZATION_CAPTURE = 'pgfs.authorization.capture';
    const METHOD_AUTHORIZATION_REVERSAL = 'pgfs.authorization.reversal';
    const METHOD_AUTHORIZATION_CASHBACK = 'pgfs.authorization.cashback';
    const METHOD_BALANCEINQUIRY = 'pgfs.balanceinquiry';
    const METHOD_AUTH_PLUS_CAPTURE = 'pgfs.auth_plus_capture';
    const METHOD_REFUND = 'pgfs.refund';
    const METHOD_REFUND_AUTHORIZATION = 'pgfs.refund.authorization';
    const METHOD_REFUND_AUTHORIZATION_REVERSAL = 'pgfs.refund.authorization.reversal';
    const METHOD_REFUND_AUTHORIZATION_CLEARING = 'pgfs.refund.authorization.clearing';
    const METHOD_FORCE_CAPTURE = 'pgfs.force_capture';
    const METHOD_AUTHORIZATION_CAPTURE_CHARGEBACK = 'pgfs.authorization.capture.chargeback';
    const METHOD_AUTHORIZATION_CAPTURE_CHARGEBACK_REVERSAL = 'pgfs.authorization.capture.chargeback.reversal';
    const METHOD_PINDEBIT = 'pgfs.pindebit';
    const METHOD_PINDEBIT_CHARGEBACK = 'pgfs.pindebit.chargeback';
    const METHOD_PINDEBIT_CHARGEBACK_REVERSAL = 'pgfs.pindebit.chargeback.reversal';
    const METHOD_PINDEBIT_CASHBACK = 'pgfs.pindebit.cashback';
    const METHOD_PINDEBIT_REFUND = 'pgfs.pindebit.refund';
    const METHOD_PINDEBIT_AUTHORIZATION = 'pgfs.pindebit.authorization';
    const METHOD_PINDEBIT_AUTHORIZATION_CLEARING = 'pgfs.pindebit.authorization.clearing';
    const METHOD_PINDEBIT_AUTHORIZATION_REVERSAL = 'pgfs.pindebit.authorization.reversal';
    const METHOD_PINDEBIT_ATM_WITHDRAWAL = 'pgfs.pindebit.atm.withdrawal';
    const METHOD_PINDEBIT_BALANCEINQUIRY = 'pgfs.pindebit.balanceinquiry';
    const METHOD_PINDEBIT_QUASI_CASH = 'pgfs.pindebit.quasi.cash';
    const METHOD_DISPUTE_CREDIT = 'pgfs.dispute.credit';
    const METHOD_DISPUTE_DEBIT = 'pgfs.dispute.debit';
    const METHOD_DIRECTDEPOSIT_CREDIT = 'pgfs.directdeposit.credit';
    const METHOD_DIRECTDEPOSIT_DEBIT = 'pgfs.directdeposit.debit';
    const METHOD_DIRECTDEPOSIT_CREDIT_REVERSAL = 'pgfs.directdeposit.credit.reversal';
    const METHOD_DIRECTDEPOSIT_DEBIT_REVERSAL = 'pgfs.directdeposit.debit.reversal';
    const METHOD_ADJUSTMENT_CREDIT = 'pgfs.adjustment.credit';
    const METHOD_ADJUSTMENT_DEBIT = 'pgfs.adjustment.debit';
    const METHOD_AUTH_PLUS_CAPTURE_STANDIN = 'pgfs.auth_plus_capture.standin';
    const METHOD_AUTHORIZATION_STANDIN = 'pgfs.authorization.standin';
    const METHOD_NETWORK_LOAD = 'pgfs.network.load';
    const METHOD_ORIGINAL_CREDIT_AUTHORIZATION = 'pgfs.original.credit.authorization';
    const METHOD_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE = 'pgfs.original.credit.auth_plus_capture';
    const METHOD_ORIGINAL_CREDIT_AUTHORIZATION_CLEARING = 'pgfs.original.credit.authorization.clearing';
    const METHOD_ORIGINAL_CREDIT_AUTHORIZATION_REVERSAL = 'pgfs.original.credit.authorization.reversal';
    const METHOD_BILLPAYMENT = 'pgfs.billpayment';
    const METHOD_BILLPAYMENT_CAPTURE = 'pgfs.billpayment.capture';
    const METHOD_BILLPAYMENT_REVERSAL = 'pgfs.billpayment.reversal';
    const METHOD_ATM_WITHDRAWAL = 'pgfs.atm.withdrawal';
    const METHOD_ATM_CLEARING_WITHDRAWAL = 'pgfs.atm.clearing.withdrawal';
    const METHOD_AUTHORIZATION_QUASI_CASH = 'pgfs.authorization.quasi.cash';
    const METHOD_AUTHORIZATION_CLEARING_QUASI_CASH = 'pgfs.authorization.clearing.quasi.cash';
    const METHOD_AUTHORIZATION_ACCOUNT_VERIFICATION = 'pgfs.authorization.account_verification';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeclineReasonAllowableValues()
    {
        return [
            self::DECLINE_REASON_INVALID_AMOUNT,
            self::DECLINE_REASON_INSUFFICIENT_FUNDS,
            self::DECLINE_REASON_TRANSACTION_NOT_PERMITTED,
            self::DECLINE_REASON_SUSPECTED_FRAUD,
            self::DECLINE_REASON_AMOUNT_LIMIT_EXCEEDED,
            self::DECLINE_REASON_TRANSACTION_COUNT_LIMIT_EXCEEDED,
            self::DECLINE_REASON_DUPLICATE_TRANSACTION,
            self::DECLINE_REASON_INVALID_MERCHANT,
            self::DECLINE_REASON_INVALID_CARD,
            self::DECLINE_REASON_NO_CREDIT_ACCOUNT,
            self::DECLINE_REASON_EXPIRED_CARD,
            self::DECLINE_REASON_NO_CHECKING_ACCOUNT,
            self::DECLINE_REASON_NO_SAVINGS_ACCOUNT,
            self::DECLINE_REASON_STOP_PAYMENT,
            self::DECLINE_REASON_REVOCATION_AUTHORIZATION_ORDER,
            self::DECLINE_REASON_REVOCATION_ALL_AUTHORIZATION_ORDER,
            self::DECLINE_REASON_SOFT_DECLINE_AUTHENTICATION_REQUIRED,
            self::DECLINE_REASON_CLOSED_ACCOUNT,
            self::DECLINE_REASON_SOFT_DECLINE_PIN_REQUIRED,
            self::DECLINE_REASON_CARD_NOT_ACTIVE,
            self::DECLINE_REASON_CARDHOLDER_NOT_ACTIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_AUTHORIZATION,
            self::METHOD_AUTHORIZATION_CLEARING,
            self::METHOD_AUTHORIZATION_ADVICE,
            self::METHOD_AUTHORIZATION_INCREMENTAL,
            self::METHOD_AUTHORIZATION_CAPTURE,
            self::METHOD_AUTHORIZATION_REVERSAL,
            self::METHOD_AUTHORIZATION_CASHBACK,
            self::METHOD_BALANCEINQUIRY,
            self::METHOD_AUTH_PLUS_CAPTURE,
            self::METHOD_REFUND,
            self::METHOD_REFUND_AUTHORIZATION,
            self::METHOD_REFUND_AUTHORIZATION_REVERSAL,
            self::METHOD_REFUND_AUTHORIZATION_CLEARING,
            self::METHOD_FORCE_CAPTURE,
            self::METHOD_AUTHORIZATION_CAPTURE_CHARGEBACK,
            self::METHOD_AUTHORIZATION_CAPTURE_CHARGEBACK_REVERSAL,
            self::METHOD_PINDEBIT,
            self::METHOD_PINDEBIT_CHARGEBACK,
            self::METHOD_PINDEBIT_CHARGEBACK_REVERSAL,
            self::METHOD_PINDEBIT_CASHBACK,
            self::METHOD_PINDEBIT_REFUND,
            self::METHOD_PINDEBIT_AUTHORIZATION,
            self::METHOD_PINDEBIT_AUTHORIZATION_CLEARING,
            self::METHOD_PINDEBIT_AUTHORIZATION_REVERSAL,
            self::METHOD_PINDEBIT_ATM_WITHDRAWAL,
            self::METHOD_PINDEBIT_BALANCEINQUIRY,
            self::METHOD_PINDEBIT_QUASI_CASH,
            self::METHOD_DISPUTE_CREDIT,
            self::METHOD_DISPUTE_DEBIT,
            self::METHOD_DIRECTDEPOSIT_CREDIT,
            self::METHOD_DIRECTDEPOSIT_DEBIT,
            self::METHOD_DIRECTDEPOSIT_CREDIT_REVERSAL,
            self::METHOD_DIRECTDEPOSIT_DEBIT_REVERSAL,
            self::METHOD_ADJUSTMENT_CREDIT,
            self::METHOD_ADJUSTMENT_DEBIT,
            self::METHOD_AUTH_PLUS_CAPTURE_STANDIN,
            self::METHOD_AUTHORIZATION_STANDIN,
            self::METHOD_NETWORK_LOAD,
            self::METHOD_ORIGINAL_CREDIT_AUTHORIZATION,
            self::METHOD_ORIGINAL_CREDIT_AUTH_PLUS_CAPTURE,
            self::METHOD_ORIGINAL_CREDIT_AUTHORIZATION_CLEARING,
            self::METHOD_ORIGINAL_CREDIT_AUTHORIZATION_REVERSAL,
            self::METHOD_BILLPAYMENT,
            self::METHOD_BILLPAYMENT_CAPTURE,
            self::METHOD_BILLPAYMENT_REVERSAL,
            self::METHOD_ATM_WITHDRAWAL,
            self::METHOD_ATM_CLEARING_WITHDRAWAL,
            self::METHOD_AUTHORIZATION_QUASI_CASH,
            self::METHOD_AUTHORIZATION_CLEARING_QUASI_CASH,
            self::METHOD_AUTHORIZATION_ACCOUNT_VERIFICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name_verification'] = $data['account_name_verification'] ?? null;
        $this->container['acting_user_token'] = $data['acting_user_token'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['balances'] = $data['balances'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['decline_reason'] = $data['decline_reason'] ?? null;
        $this->container['incremental_authorization_jit_funding_tokens'] = $data['incremental_authorization_jit_funding_tokens'] ?? null;
        $this->container['jit_account_name_verification'] = $data['jit_account_name_verification'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['original_jit_funding_token'] = $data['original_jit_funding_token'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['acting_user_token']) && (mb_strlen($this->container['acting_user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'acting_user_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['acting_user_token']) && (mb_strlen($this->container['acting_user_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'acting_user_token', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['business_token']) && (mb_strlen($this->container['business_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'business_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['business_token']) && (mb_strlen($this->container['business_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_token', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDeclineReasonAllowableValues();
        if (!is_null($this->container['decline_reason']) && !in_array($this->container['decline_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'decline_reason', must be one of '%s'",
                $this->container['decline_reason'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 99)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 0)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['original_jit_funding_token']) && (mb_strlen($this->container['original_jit_funding_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'original_jit_funding_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['original_jit_funding_token']) && (mb_strlen($this->container['original_jit_funding_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'original_jit_funding_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) < 0)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['token']) < 0)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['user_token'] === null) {
            $invalidProperties[] = "'user_token' can't be null";
        }
        if ((mb_strlen($this->container['user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['user_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name_verification
     *
     * @return \OpenAPI\Client\Model\JitAccountNameVerification|null
     */
    public function getAccountNameVerification()
    {
        return $this->container['account_name_verification'];
    }

    /**
     * Sets account_name_verification
     *
     * @param \OpenAPI\Client\Model\JitAccountNameVerification|null $account_name_verification account_name_verification
     *
     * @return self
     */
    public function setAccountNameVerification($account_name_verification)
    {
        $this->container['account_name_verification'] = $account_name_verification;

        return $this;
    }

    /**
     * Gets acting_user_token
     *
     * @return string|null
     */
    public function getActingUserToken()
    {
        return $this->container['acting_user_token'];
    }

    /**
     * Sets acting_user_token
     *
     * @param string|null $acting_user_token User who conducted the transaction.  Can be a child user configured to share its parent's account balance.
     *
     * @return self
     */
    public function setActingUserToken($acting_user_token)
    {
        if (!is_null($acting_user_token) && (mb_strlen($acting_user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $acting_user_token when calling JitFundingApi., must be smaller than or equal to 36.');
        }
        if (!is_null($acting_user_token) && (mb_strlen($acting_user_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $acting_user_token when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['acting_user_token'] = $acting_user_token;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return \OpenAPI\Client\Model\JitAddressVerification|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param \OpenAPI\Client\Model\JitAddressVerification|null $address_verification address_verification
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Requested amount of funding.
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return array<string,\OpenAPI\Client\Model\CardholderBalance>|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param array<string,\OpenAPI\Client\Model\CardholderBalance>|null $balances Contains the GPA's balance details.
     *
     * @return self
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token Holder of the business account that was funded.
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        if (!is_null($business_token) && (mb_strlen($business_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $business_token when calling JitFundingApi., must be smaller than or equal to 36.');
        }
        if (!is_null($business_token) && (mb_strlen($business_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_token when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets decline_reason
     *
     * @return string|null
     */
    public function getDeclineReason()
    {
        return $this->container['decline_reason'];
    }

    /**
     * Sets decline_reason
     *
     * @param string|null $decline_reason Reason why the transaction was declined.
     *
     * @return self
     */
    public function setDeclineReason($decline_reason)
    {
        $allowedValues = $this->getDeclineReasonAllowableValues();
        if (!is_null($decline_reason) && !in_array($decline_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'decline_reason', must be one of '%s'",
                    $decline_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['decline_reason'] = $decline_reason;

        return $this;
    }

    /**
     * Gets incremental_authorization_jit_funding_tokens
     *
     * @return string[]|null
     */
    public function getIncrementalAuthorizationJitFundingTokens()
    {
        return $this->container['incremental_authorization_jit_funding_tokens'];
    }

    /**
     * Sets incremental_authorization_jit_funding_tokens
     *
     * @param string[]|null $incremental_authorization_jit_funding_tokens Array of tokens referencing the JIT Funding tokens of all previous associated incremental authorization JIT Funding requests. Useful for ascertaining the final transaction amount when the original amount was incremented.
     *
     * @return self
     */
    public function setIncrementalAuthorizationJitFundingTokens($incremental_authorization_jit_funding_tokens)
    {
        $this->container['incremental_authorization_jit_funding_tokens'] = $incremental_authorization_jit_funding_tokens;

        return $this;
    }

    /**
     * Gets jit_account_name_verification
     *
     * @return \OpenAPI\Client\Model\JitAccountNameVerification|null
     */
    public function getJitAccountNameVerification()
    {
        return $this->container['jit_account_name_verification'];
    }

    /**
     * Sets jit_account_name_verification
     *
     * @param \OpenAPI\Client\Model\JitAccountNameVerification|null $jit_account_name_verification jit_account_name_verification
     *
     * @return self
     */
    public function setJitAccountNameVerification($jit_account_name_verification)
    {
        $this->container['jit_account_name_verification'] = $jit_account_name_verification;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Additional information that describes the JIT Funding transaction.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (!is_null($memo) && (mb_strlen($memo) > 99)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling JitFundingApi., must be smaller than or equal to 99.');
        }
        if (!is_null($memo) && (mb_strlen($memo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method JIT Funding response type. See <</core-api/gateway-jit-funding-messages#_the_jit_funding_object, The jit_funding object>> for the purpose, funding event type, and description of each method.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets original_jit_funding_token
     *
     * @return string|null
     */
    public function getOriginalJitFundingToken()
    {
        return $this->container['original_jit_funding_token'];
    }

    /**
     * Sets original_jit_funding_token
     *
     * @param string|null $original_jit_funding_token Unique identifier of the first associated JIT Funding message. Useful for correlating related JIT Funding messages (that is, those associated with the same GPA order). Not included in the first of any set of related messages.
     *
     * @return self
     */
    public function setOriginalJitFundingToken($original_jit_funding_token)
    {
        if (!is_null($original_jit_funding_token) && (mb_strlen($original_jit_funding_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $original_jit_funding_token when calling JitFundingApi., must be smaller than or equal to 36.');
        }
        if (!is_null($original_jit_funding_token) && (mb_strlen($original_jit_funding_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $original_jit_funding_token when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['original_jit_funding_token'] = $original_jit_funding_token;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Customer-defined tags related to the JIT Funding transaction.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling JitFundingApi., must be smaller than or equal to 255.');
        }
        if (!is_null($tags) && (mb_strlen($tags) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Existing JIT Funding token matching the `funding.gateway_log.transaction_id` field of the associated GPA order.  *NOTE:* The `transaction_id` field updates if a subsequent JIT Funding message associated with that GPA order is sent. If multiple JIT Funding messages are associated with the same GPA order, the `transaction_id` field matches the token of the most recent message.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling JitFundingApi., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $token when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string $user_token Holder of the user account that was funded.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        if ((mb_strlen($user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling JitFundingApi., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($user_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling JitFundingApi., must be bigger than or equal to 0.');
        }

        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


