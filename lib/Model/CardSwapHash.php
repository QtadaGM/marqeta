<?php
/**
 * CardSwapHash
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardSwapHash Class Doc Comment
 *
 * @category Class
 * @description Contains identifiers for swapping digital wallet tokens between cards.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardSwapHash implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_swap_hash';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'new_card_token' => 'string',
        'previous_card_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'new_card_token' => null,
        'previous_card_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_card_token' => 'new_card_token',
        'previous_card_token' => 'previous_card_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_card_token' => 'setNewCardToken',
        'previous_card_token' => 'setPreviousCardToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_card_token' => 'getNewCardToken',
        'previous_card_token' => 'getPreviousCardToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_card_token'] = $data['new_card_token'] ?? null;
        $this->container['previous_card_token'] = $data['previous_card_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_card_token'] === null) {
            $invalidProperties[] = "'new_card_token' can't be null";
        }
        if ((mb_strlen($this->container['new_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'new_card_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['new_card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'new_card_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['previous_card_token'] === null) {
            $invalidProperties[] = "'previous_card_token' can't be null";
        }
        if ((mb_strlen($this->container['previous_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'previous_card_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['previous_card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'previous_card_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_card_token
     *
     * @return string
     */
    public function getNewCardToken()
    {
        return $this->container['new_card_token'];
    }

    /**
     * Sets new_card_token
     *
     * @param string $new_card_token Unique identifier of the new card resource to which the digital wallet tokens are assigned.
     *
     * @return self
     */
    public function setNewCardToken($new_card_token)
    {
        if ((mb_strlen($new_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $new_card_token when calling CardSwapHash., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($new_card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $new_card_token when calling CardSwapHash., must be bigger than or equal to 1.');
        }

        $this->container['new_card_token'] = $new_card_token;

        return $this;
    }

    /**
     * Gets previous_card_token
     *
     * @return string
     */
    public function getPreviousCardToken()
    {
        return $this->container['previous_card_token'];
    }

    /**
     * Sets previous_card_token
     *
     * @param string $previous_card_token Unique identifier of the existing card resource that has digital wallet tokens assigned to it.
     *
     * @return self
     */
    public function setPreviousCardToken($previous_card_token)
    {
        if ((mb_strlen($previous_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $previous_card_token when calling CardSwapHash., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($previous_card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $previous_card_token when calling CardSwapHash., must be bigger than or equal to 1.');
        }

        $this->container['previous_card_token'] = $previous_card_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


