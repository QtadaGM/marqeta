<?php
/**
 * TerminalModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TerminalModel Class Doc Comment
 *
 * @category Class
 * @description Contains information about the point of sale, including details on how the card was presented.  Returned if provided by the card network, and the request uses Transaction Model v1 of the Marqeta Core API. Not returned for Transaction Model v2 requests.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TerminalModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'terminal_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_presence' => 'string',
        'cardholder_presence' => 'string',
        'partial_approval_capable' => 'string',
        'pin_present' => 'string',
        'special_condition_indicator' => 'string',
        'tid' => 'string',
        'transaction_initiated_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_presence' => null,
        'cardholder_presence' => null,
        'partial_approval_capable' => null,
        'pin_present' => null,
        'special_condition_indicator' => null,
        'tid' => null,
        'transaction_initiated_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_presence' => 'card_presence',
        'cardholder_presence' => 'cardholder_presence',
        'partial_approval_capable' => 'partial_approval_capable',
        'pin_present' => 'pin_present',
        'special_condition_indicator' => 'special_condition_indicator',
        'tid' => 'tid',
        'transaction_initiated_by' => 'transaction_initiated_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_presence' => 'setCardPresence',
        'cardholder_presence' => 'setCardholderPresence',
        'partial_approval_capable' => 'setPartialApprovalCapable',
        'pin_present' => 'setPinPresent',
        'special_condition_indicator' => 'setSpecialConditionIndicator',
        'tid' => 'setTid',
        'transaction_initiated_by' => 'setTransactionInitiatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_presence' => 'getCardPresence',
        'cardholder_presence' => 'getCardholderPresence',
        'partial_approval_capable' => 'getPartialApprovalCapable',
        'pin_present' => 'getPinPresent',
        'special_condition_indicator' => 'getSpecialConditionIndicator',
        'tid' => 'getTid',
        'transaction_initiated_by' => 'getTransactionInitiatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SPECIAL_CONDITION_INDICATOR_UNSPECIFIED = 'UNSPECIFIED';
    const SPECIAL_CONDITION_INDICATOR_CRYPTOCURRENCY_PURCHASE = 'CRYPTOCURRENCY_PURCHASE';
    const SPECIAL_CONDITION_INDICATOR_QUASI_CASH = 'QUASI_CASH';
    const SPECIAL_CONDITION_INDICATOR_DEBT_PAYMENT = 'DEBT_PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecialConditionIndicatorAllowableValues()
    {
        return [
            self::SPECIAL_CONDITION_INDICATOR_UNSPECIFIED,
            self::SPECIAL_CONDITION_INDICATOR_CRYPTOCURRENCY_PURCHASE,
            self::SPECIAL_CONDITION_INDICATOR_QUASI_CASH,
            self::SPECIAL_CONDITION_INDICATOR_DEBT_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_presence'] = $data['card_presence'] ?? null;
        $this->container['cardholder_presence'] = $data['cardholder_presence'] ?? null;
        $this->container['partial_approval_capable'] = $data['partial_approval_capable'] ?? null;
        $this->container['pin_present'] = $data['pin_present'] ?? null;
        $this->container['special_condition_indicator'] = $data['special_condition_indicator'] ?? null;
        $this->container['tid'] = $data['tid'] ?? null;
        $this->container['transaction_initiated_by'] = $data['transaction_initiated_by'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSpecialConditionIndicatorAllowableValues();
        if (!is_null($this->container['special_condition_indicator']) && !in_array($this->container['special_condition_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'special_condition_indicator', must be one of '%s'",
                $this->container['special_condition_indicator'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_presence
     *
     * @return string|null
     */
    public function getCardPresence()
    {
        return $this->container['card_presence'];
    }

    /**
     * Sets card_presence
     *
     * @param string|null $card_presence Indicates whether the card was present during the transaction.
     *
     * @return self
     */
    public function setCardPresence($card_presence)
    {
        $this->container['card_presence'] = $card_presence;

        return $this;
    }

    /**
     * Gets cardholder_presence
     *
     * @return string|null
     */
    public function getCardholderPresence()
    {
        return $this->container['cardholder_presence'];
    }

    /**
     * Sets cardholder_presence
     *
     * @param string|null $cardholder_presence Indicates whether the cardholder was present during the transaction.
     *
     * @return self
     */
    public function setCardholderPresence($cardholder_presence)
    {
        $this->container['cardholder_presence'] = $cardholder_presence;

        return $this;
    }

    /**
     * Gets partial_approval_capable
     *
     * @return string|null
     */
    public function getPartialApprovalCapable()
    {
        return $this->container['partial_approval_capable'];
    }

    /**
     * Sets partial_approval_capable
     *
     * @param string|null $partial_approval_capable Indicates whether the card acceptor or terminal supports partial-approval transactions.
     *
     * @return self
     */
    public function setPartialApprovalCapable($partial_approval_capable)
    {
        $this->container['partial_approval_capable'] = $partial_approval_capable;

        return $this;
    }

    /**
     * Gets pin_present
     *
     * @return string|null
     */
    public function getPinPresent()
    {
        return $this->container['pin_present'];
    }

    /**
     * Sets pin_present
     *
     * @param string|null $pin_present Indicates whether the cardholder entered a PIN during the transaction.
     *
     * @return self
     */
    public function setPinPresent($pin_present)
    {
        $this->container['pin_present'] = $pin_present;

        return $this;
    }

    /**
     * Gets special_condition_indicator
     *
     * @return string|null
     */
    public function getSpecialConditionIndicator()
    {
        return $this->container['special_condition_indicator'];
    }

    /**
     * Sets special_condition_indicator
     *
     * @param string|null $special_condition_indicator Indicates a higher-risk operation, such as a quasi-cash or cryptocurrency transaction.  These transactions typically involve non-financial institutions.
     *
     * @return self
     */
    public function setSpecialConditionIndicator($special_condition_indicator)
    {
        $allowedValues = $this->getSpecialConditionIndicatorAllowableValues();
        if (!is_null($special_condition_indicator) && !in_array($special_condition_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'special_condition_indicator', must be one of '%s'",
                    $special_condition_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['special_condition_indicator'] = $special_condition_indicator;

        return $this;
    }

    /**
     * Gets tid
     *
     * @return string|null
     */
    public function getTid()
    {
        return $this->container['tid'];
    }

    /**
     * Sets tid
     *
     * @param string|null $tid Card acceptor or terminal identification number.
     *
     * @return self
     */
    public function setTid($tid)
    {
        $this->container['tid'] = $tid;

        return $this;
    }

    /**
     * Gets transaction_initiated_by
     *
     * @return string|null
     */
    public function getTransactionInitiatedBy()
    {
        return $this->container['transaction_initiated_by'];
    }

    /**
     * Sets transaction_initiated_by
     *
     * @param string|null $transaction_initiated_by Specifies whether the transaction was initiated by a cardholder or a merchant.
     *
     * @return self
     */
    public function setTransactionInitiatedBy($transaction_initiated_by)
    {
        $this->container['transaction_initiated_by'] = $transaction_initiated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


