<?php
/**
 * Pos
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Pos Class Doc Comment
 *
 * @category Class
 * @description Contains information about the point of sale, including details on how the card was presented.  Returned if provided by the card network, and the request uses Transaction Model v2 of the Marqeta Core API. Not returned for Transaction Model v1 requests.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Pos implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pos';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_data_input_capability' => 'string',
        'card_holder_presence' => 'bool',
        'card_presence' => 'bool',
        'cardholder_authentication_method' => 'string',
        'country_code' => 'string',
        'is_installment' => 'bool',
        'is_recurring' => 'bool',
        'pan_entry_mode' => 'string',
        'partial_approval_capable' => 'bool',
        'pin_entry_mode' => 'string',
        'pin_present' => 'bool',
        'purchase_amount_only' => 'bool',
        'special_condition_indicator' => 'string',
        'terminal_attendance' => 'string',
        'terminal_id' => 'string',
        'terminal_location' => 'string',
        'terminal_type' => 'string',
        'transaction_initiated_by' => 'string',
        'zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_data_input_capability' => null,
        'card_holder_presence' => null,
        'card_presence' => null,
        'cardholder_authentication_method' => null,
        'country_code' => null,
        'is_installment' => null,
        'is_recurring' => null,
        'pan_entry_mode' => null,
        'partial_approval_capable' => null,
        'pin_entry_mode' => null,
        'pin_present' => null,
        'purchase_amount_only' => null,
        'special_condition_indicator' => null,
        'terminal_attendance' => null,
        'terminal_id' => null,
        'terminal_location' => null,
        'terminal_type' => null,
        'transaction_initiated_by' => null,
        'zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_data_input_capability' => 'card_data_input_capability',
        'card_holder_presence' => 'card_holder_presence',
        'card_presence' => 'card_presence',
        'cardholder_authentication_method' => 'cardholder_authentication_method',
        'country_code' => 'country_code',
        'is_installment' => 'is_installment',
        'is_recurring' => 'is_recurring',
        'pan_entry_mode' => 'pan_entry_mode',
        'partial_approval_capable' => 'partial_approval_capable',
        'pin_entry_mode' => 'pin_entry_mode',
        'pin_present' => 'pin_present',
        'purchase_amount_only' => 'purchase_amount_only',
        'special_condition_indicator' => 'special_condition_indicator',
        'terminal_attendance' => 'terminal_attendance',
        'terminal_id' => 'terminal_id',
        'terminal_location' => 'terminal_location',
        'terminal_type' => 'terminal_type',
        'transaction_initiated_by' => 'transaction_initiated_by',
        'zip' => 'zip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_data_input_capability' => 'setCardDataInputCapability',
        'card_holder_presence' => 'setCardHolderPresence',
        'card_presence' => 'setCardPresence',
        'cardholder_authentication_method' => 'setCardholderAuthenticationMethod',
        'country_code' => 'setCountryCode',
        'is_installment' => 'setIsInstallment',
        'is_recurring' => 'setIsRecurring',
        'pan_entry_mode' => 'setPanEntryMode',
        'partial_approval_capable' => 'setPartialApprovalCapable',
        'pin_entry_mode' => 'setPinEntryMode',
        'pin_present' => 'setPinPresent',
        'purchase_amount_only' => 'setPurchaseAmountOnly',
        'special_condition_indicator' => 'setSpecialConditionIndicator',
        'terminal_attendance' => 'setTerminalAttendance',
        'terminal_id' => 'setTerminalId',
        'terminal_location' => 'setTerminalLocation',
        'terminal_type' => 'setTerminalType',
        'transaction_initiated_by' => 'setTransactionInitiatedBy',
        'zip' => 'setZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_data_input_capability' => 'getCardDataInputCapability',
        'card_holder_presence' => 'getCardHolderPresence',
        'card_presence' => 'getCardPresence',
        'cardholder_authentication_method' => 'getCardholderAuthenticationMethod',
        'country_code' => 'getCountryCode',
        'is_installment' => 'getIsInstallment',
        'is_recurring' => 'getIsRecurring',
        'pan_entry_mode' => 'getPanEntryMode',
        'partial_approval_capable' => 'getPartialApprovalCapable',
        'pin_entry_mode' => 'getPinEntryMode',
        'pin_present' => 'getPinPresent',
        'purchase_amount_only' => 'getPurchaseAmountOnly',
        'special_condition_indicator' => 'getSpecialConditionIndicator',
        'terminal_attendance' => 'getTerminalAttendance',
        'terminal_id' => 'getTerminalId',
        'terminal_location' => 'getTerminalLocation',
        'terminal_type' => 'getTerminalType',
        'transaction_initiated_by' => 'getTransactionInitiatedBy',
        'zip' => 'getZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_DATA_INPUT_CAPABILITY_UNKNOWN = 'UNKNOWN';
    const CARD_DATA_INPUT_CAPABILITY_NO_TERMINAL = 'NO_TERMINAL';
    const CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE = 'MAG_STRIPE';
    const CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE_CONTACTLESS = 'MAG_STRIPE_CONTACTLESS';
    const CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE_KEY_ENTRY = 'MAG_STRIPE_KEY_ENTRY';
    const CARD_DATA_INPUT_CAPABILITY_CHIP = 'CHIP';
    const CARD_DATA_INPUT_CAPABILITY_CHIP_CONTACTLESS = 'CHIP_CONTACTLESS';
    const CARD_DATA_INPUT_CAPABILITY_CHIP_MAG_STRIPE = 'CHIP_MAG_STRIPE';
    const CARD_DATA_INPUT_CAPABILITY_CHIP_MAG_STRIPE_KEY_ENTRY = 'CHIP_MAG_STRIPE_KEY_ENTRY';
    const CARD_DATA_INPUT_CAPABILITY_KEY_ENTRY = 'KEY_ENTRY';
    const CARD_DATA_INPUT_CAPABILITY_OCR = 'OCR';
    const CARD_DATA_INPUT_CAPABILITY_MICR = 'MICR';
    const CARD_DATA_INPUT_CAPABILITY_BAR_CODE = 'BAR_CODE';
    const CARDHOLDER_AUTHENTICATION_METHOD_UNSPECIFIED = 'UNSPECIFIED';
    const CARDHOLDER_AUTHENTICATION_METHOD_NON_AUTHENTICATED = 'NON_AUTHENTICATED';
    const CARDHOLDER_AUTHENTICATION_METHOD_SIGNATURE = 'SIGNATURE';
    const CARDHOLDER_AUTHENTICATION_METHOD_PIN = 'PIN';
    const CARDHOLDER_AUTHENTICATION_METHOD_ID_VERIFIED = 'ID_VERIFIED';
    const PAN_ENTRY_MODE_UNKNOWN = 'UNKNOWN';
    const PAN_ENTRY_MODE_MANUAL = 'MANUAL';
    const PAN_ENTRY_MODE_MAG_STRIPE = 'MAG_STRIPE';
    const PAN_ENTRY_MODE_MAG_STRIPE_CONTACTLESS = 'MAG_STRIPE_CONTACTLESS';
    const PAN_ENTRY_MODE_BAR_CODE = 'BAR_CODE';
    const PAN_ENTRY_MODE_OCR = 'OCR';
    const PAN_ENTRY_MODE_MICR = 'MICR';
    const PAN_ENTRY_MODE_CHIP = 'CHIP';
    const PAN_ENTRY_MODE_CHIP_CONTACTLESS = 'CHIP_CONTACTLESS';
    const PAN_ENTRY_MODE_CARD_ON_FILE = 'CARD_ON_FILE';
    const PAN_ENTRY_MODE_CHIP_FALLBACK = 'CHIP_FALLBACK';
    const PAN_ENTRY_MODE_OTHER = 'OTHER';
    const PIN_ENTRY_MODE_UNKNOWN = 'UNKNOWN';
    const PIN_ENTRY_MODE_TRUE = 'TRUE';
    const PIN_ENTRY_MODE_FALSE = 'FALSE';
    const PIN_ENTRY_MODE_DEFECTIVE = 'DEFECTIVE';
    const SPECIAL_CONDITION_INDICATOR_UNSPECIFIED = 'UNSPECIFIED';
    const SPECIAL_CONDITION_INDICATOR_CRYPTOCURRENCY_PURCHASE = 'CRYPTOCURRENCY_PURCHASE';
    const SPECIAL_CONDITION_INDICATOR_QUASI_CASH = 'QUASI_CASH';
    const SPECIAL_CONDITION_INDICATOR_DEBT_PAYMENT = 'DEBT_PAYMENT';
    const TERMINAL_ATTENDANCE_UNSPECIFIED = 'UNSPECIFIED';
    const TERMINAL_ATTENDANCE_ATTENDED = 'ATTENDED';
    const TERMINAL_ATTENDANCE_UNATTENDED = 'UNATTENDED';
    const TERMINAL_ATTENDANCE_NO_TERMINAL = 'NO_TERMINAL';
    const TERMINAL_LOCATION_ON_PREMISE = 'ON_PREMISE';
    const TERMINAL_LOCATION_OFF_PREMISE_MERCHANT = 'OFF_PREMISE_MERCHANT';
    const TERMINAL_LOCATION_OFF_PREMISE_CARDHOLDER = 'OFF_PREMISE_CARDHOLDER';
    const TERMINAL_LOCATION_NO_TERMINAL = 'NO_TERMINAL';
    const TERMINAL_TYPE_AUTO_DISPENSER_WITH_PIN = 'AUTO_DISPENSER_WITH_PIN';
    const TERMINAL_TYPE_SELF_SERVICE = 'SELF_SERVICE';
    const TERMINAL_TYPE_LIMITED_AMOUNT = 'LIMITED_AMOUNT';
    const TERMINAL_TYPE_IN_FLIGHT = 'IN_FLIGHT';
    const TERMINAL_TYPE_ECOMMERCE = 'ECOMMERCE';
    const TERMINAL_TYPE_TRANSPONDER = 'TRANSPONDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardDataInputCapabilityAllowableValues()
    {
        return [
            self::CARD_DATA_INPUT_CAPABILITY_UNKNOWN,
            self::CARD_DATA_INPUT_CAPABILITY_NO_TERMINAL,
            self::CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE,
            self::CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE_CONTACTLESS,
            self::CARD_DATA_INPUT_CAPABILITY_MAG_STRIPE_KEY_ENTRY,
            self::CARD_DATA_INPUT_CAPABILITY_CHIP,
            self::CARD_DATA_INPUT_CAPABILITY_CHIP_CONTACTLESS,
            self::CARD_DATA_INPUT_CAPABILITY_CHIP_MAG_STRIPE,
            self::CARD_DATA_INPUT_CAPABILITY_CHIP_MAG_STRIPE_KEY_ENTRY,
            self::CARD_DATA_INPUT_CAPABILITY_KEY_ENTRY,
            self::CARD_DATA_INPUT_CAPABILITY_OCR,
            self::CARD_DATA_INPUT_CAPABILITY_MICR,
            self::CARD_DATA_INPUT_CAPABILITY_BAR_CODE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardholderAuthenticationMethodAllowableValues()
    {
        return [
            self::CARDHOLDER_AUTHENTICATION_METHOD_UNSPECIFIED,
            self::CARDHOLDER_AUTHENTICATION_METHOD_NON_AUTHENTICATED,
            self::CARDHOLDER_AUTHENTICATION_METHOD_SIGNATURE,
            self::CARDHOLDER_AUTHENTICATION_METHOD_PIN,
            self::CARDHOLDER_AUTHENTICATION_METHOD_ID_VERIFIED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPanEntryModeAllowableValues()
    {
        return [
            self::PAN_ENTRY_MODE_UNKNOWN,
            self::PAN_ENTRY_MODE_MANUAL,
            self::PAN_ENTRY_MODE_MAG_STRIPE,
            self::PAN_ENTRY_MODE_MAG_STRIPE_CONTACTLESS,
            self::PAN_ENTRY_MODE_BAR_CODE,
            self::PAN_ENTRY_MODE_OCR,
            self::PAN_ENTRY_MODE_MICR,
            self::PAN_ENTRY_MODE_CHIP,
            self::PAN_ENTRY_MODE_CHIP_CONTACTLESS,
            self::PAN_ENTRY_MODE_CARD_ON_FILE,
            self::PAN_ENTRY_MODE_CHIP_FALLBACK,
            self::PAN_ENTRY_MODE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPinEntryModeAllowableValues()
    {
        return [
            self::PIN_ENTRY_MODE_UNKNOWN,
            self::PIN_ENTRY_MODE_TRUE,
            self::PIN_ENTRY_MODE_FALSE,
            self::PIN_ENTRY_MODE_DEFECTIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpecialConditionIndicatorAllowableValues()
    {
        return [
            self::SPECIAL_CONDITION_INDICATOR_UNSPECIFIED,
            self::SPECIAL_CONDITION_INDICATOR_CRYPTOCURRENCY_PURCHASE,
            self::SPECIAL_CONDITION_INDICATOR_QUASI_CASH,
            self::SPECIAL_CONDITION_INDICATOR_DEBT_PAYMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalAttendanceAllowableValues()
    {
        return [
            self::TERMINAL_ATTENDANCE_UNSPECIFIED,
            self::TERMINAL_ATTENDANCE_ATTENDED,
            self::TERMINAL_ATTENDANCE_UNATTENDED,
            self::TERMINAL_ATTENDANCE_NO_TERMINAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalLocationAllowableValues()
    {
        return [
            self::TERMINAL_LOCATION_ON_PREMISE,
            self::TERMINAL_LOCATION_OFF_PREMISE_MERCHANT,
            self::TERMINAL_LOCATION_OFF_PREMISE_CARDHOLDER,
            self::TERMINAL_LOCATION_NO_TERMINAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalTypeAllowableValues()
    {
        return [
            self::TERMINAL_TYPE_AUTO_DISPENSER_WITH_PIN,
            self::TERMINAL_TYPE_SELF_SERVICE,
            self::TERMINAL_TYPE_LIMITED_AMOUNT,
            self::TERMINAL_TYPE_IN_FLIGHT,
            self::TERMINAL_TYPE_ECOMMERCE,
            self::TERMINAL_TYPE_TRANSPONDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_data_input_capability'] = $data['card_data_input_capability'] ?? null;
        $this->container['card_holder_presence'] = $data['card_holder_presence'] ?? false;
        $this->container['card_presence'] = $data['card_presence'] ?? false;
        $this->container['cardholder_authentication_method'] = $data['cardholder_authentication_method'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['is_installment'] = $data['is_installment'] ?? false;
        $this->container['is_recurring'] = $data['is_recurring'] ?? false;
        $this->container['pan_entry_mode'] = $data['pan_entry_mode'] ?? null;
        $this->container['partial_approval_capable'] = $data['partial_approval_capable'] ?? false;
        $this->container['pin_entry_mode'] = $data['pin_entry_mode'] ?? null;
        $this->container['pin_present'] = $data['pin_present'] ?? false;
        $this->container['purchase_amount_only'] = $data['purchase_amount_only'] ?? false;
        $this->container['special_condition_indicator'] = $data['special_condition_indicator'] ?? null;
        $this->container['terminal_attendance'] = $data['terminal_attendance'] ?? null;
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['terminal_location'] = $data['terminal_location'] ?? null;
        $this->container['terminal_type'] = $data['terminal_type'] ?? null;
        $this->container['transaction_initiated_by'] = $data['transaction_initiated_by'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCardDataInputCapabilityAllowableValues();
        if (!is_null($this->container['card_data_input_capability']) && !in_array($this->container['card_data_input_capability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_data_input_capability', must be one of '%s'",
                $this->container['card_data_input_capability'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardholderAuthenticationMethodAllowableValues();
        if (!is_null($this->container['cardholder_authentication_method']) && !in_array($this->container['cardholder_authentication_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cardholder_authentication_method', must be one of '%s'",
                $this->container['cardholder_authentication_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPanEntryModeAllowableValues();
        if (!is_null($this->container['pan_entry_mode']) && !in_array($this->container['pan_entry_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pan_entry_mode', must be one of '%s'",
                $this->container['pan_entry_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPinEntryModeAllowableValues();
        if (!is_null($this->container['pin_entry_mode']) && !in_array($this->container['pin_entry_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pin_entry_mode', must be one of '%s'",
                $this->container['pin_entry_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpecialConditionIndicatorAllowableValues();
        if (!is_null($this->container['special_condition_indicator']) && !in_array($this->container['special_condition_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'special_condition_indicator', must be one of '%s'",
                $this->container['special_condition_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTerminalAttendanceAllowableValues();
        if (!is_null($this->container['terminal_attendance']) && !in_array($this->container['terminal_attendance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_attendance', must be one of '%s'",
                $this->container['terminal_attendance'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTerminalLocationAllowableValues();
        if (!is_null($this->container['terminal_location']) && !in_array($this->container['terminal_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_location', must be one of '%s'",
                $this->container['terminal_location'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!is_null($this->container['terminal_type']) && !in_array($this->container['terminal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_type', must be one of '%s'",
                $this->container['terminal_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_data_input_capability
     *
     * @return string|null
     */
    public function getCardDataInputCapability()
    {
        return $this->container['card_data_input_capability'];
    }

    /**
     * Sets card_data_input_capability
     *
     * @param string|null $card_data_input_capability How the terminal accepts card data.
     *
     * @return self
     */
    public function setCardDataInputCapability($card_data_input_capability)
    {
        $allowedValues = $this->getCardDataInputCapabilityAllowableValues();
        if (!is_null($card_data_input_capability) && !in_array($card_data_input_capability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_data_input_capability', must be one of '%s'",
                    $card_data_input_capability,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_data_input_capability'] = $card_data_input_capability;

        return $this;
    }

    /**
     * Gets card_holder_presence
     *
     * @return bool|null
     */
    public function getCardHolderPresence()
    {
        return $this->container['card_holder_presence'];
    }

    /**
     * Sets card_holder_presence
     *
     * @param bool|null $card_holder_presence Whether the cardholder was present during the transaction.
     *
     * @return self
     */
    public function setCardHolderPresence($card_holder_presence)
    {
        $this->container['card_holder_presence'] = $card_holder_presence;

        return $this;
    }

    /**
     * Gets card_presence
     *
     * @return bool|null
     */
    public function getCardPresence()
    {
        return $this->container['card_presence'];
    }

    /**
     * Sets card_presence
     *
     * @param bool|null $card_presence Whether the card was present during the transaction.
     *
     * @return self
     */
    public function setCardPresence($card_presence)
    {
        $this->container['card_presence'] = $card_presence;

        return $this;
    }

    /**
     * Gets cardholder_authentication_method
     *
     * @return string|null
     */
    public function getCardholderAuthenticationMethod()
    {
        return $this->container['cardholder_authentication_method'];
    }

    /**
     * Sets cardholder_authentication_method
     *
     * @param string|null $cardholder_authentication_method Method used to authenticate the cardholder.
     *
     * @return self
     */
    public function setCardholderAuthenticationMethod($cardholder_authentication_method)
    {
        $allowedValues = $this->getCardholderAuthenticationMethodAllowableValues();
        if (!is_null($cardholder_authentication_method) && !in_array($cardholder_authentication_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cardholder_authentication_method', must be one of '%s'",
                    $cardholder_authentication_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cardholder_authentication_method'] = $cardholder_authentication_method;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code of the card acceptor or terminal.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets is_installment
     *
     * @return bool|null
     */
    public function getIsInstallment()
    {
        return $this->container['is_installment'];
    }

    /**
     * Sets is_installment
     *
     * @param bool|null $is_installment Whether the transaction is an installment payment.
     *
     * @return self
     */
    public function setIsInstallment($is_installment)
    {
        $this->container['is_installment'] = $is_installment;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool|null
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool|null $is_recurring Whether the transaction is recurring.
     *
     * @return self
     */
    public function setIsRecurring($is_recurring)
    {
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets pan_entry_mode
     *
     * @return string|null
     */
    public function getPanEntryMode()
    {
        return $this->container['pan_entry_mode'];
    }

    /**
     * Sets pan_entry_mode
     *
     * @param string|null $pan_entry_mode Method used for capturing the card primary account number (PAN) during the transaction.
     *
     * @return self
     */
    public function setPanEntryMode($pan_entry_mode)
    {
        $allowedValues = $this->getPanEntryModeAllowableValues();
        if (!is_null($pan_entry_mode) && !in_array($pan_entry_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pan_entry_mode', must be one of '%s'",
                    $pan_entry_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pan_entry_mode'] = $pan_entry_mode;

        return $this;
    }

    /**
     * Gets partial_approval_capable
     *
     * @return bool|null
     */
    public function getPartialApprovalCapable()
    {
        return $this->container['partial_approval_capable'];
    }

    /**
     * Sets partial_approval_capable
     *
     * @param bool|null $partial_approval_capable Indicates whether the card acceptor or terminal supports partial-approval transactions.
     *
     * @return self
     */
    public function setPartialApprovalCapable($partial_approval_capable)
    {
        $this->container['partial_approval_capable'] = $partial_approval_capable;

        return $this;
    }

    /**
     * Gets pin_entry_mode
     *
     * @return string|null
     */
    public function getPinEntryMode()
    {
        return $this->container['pin_entry_mode'];
    }

    /**
     * Sets pin_entry_mode
     *
     * @param string|null $pin_entry_mode Indicates whether the card acceptor or terminal can capture card personal identification numbers (PINs).  *NOTE:* This field does not indicate whether a PIN was entered.
     *
     * @return self
     */
    public function setPinEntryMode($pin_entry_mode)
    {
        $allowedValues = $this->getPinEntryModeAllowableValues();
        if (!is_null($pin_entry_mode) && !in_array($pin_entry_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pin_entry_mode', must be one of '%s'",
                    $pin_entry_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pin_entry_mode'] = $pin_entry_mode;

        return $this;
    }

    /**
     * Gets pin_present
     *
     * @return bool|null
     */
    public function getPinPresent()
    {
        return $this->container['pin_present'];
    }

    /**
     * Sets pin_present
     *
     * @param bool|null $pin_present Indicates whether the cardholder entered a PIN during the transaction.
     *
     * @return self
     */
    public function setPinPresent($pin_present)
    {
        $this->container['pin_present'] = $pin_present;

        return $this;
    }

    /**
     * Gets purchase_amount_only
     *
     * @return bool|null
     */
    public function getPurchaseAmountOnly()
    {
        return $this->container['purchase_amount_only'];
    }

    /**
     * Sets purchase_amount_only
     *
     * @param bool|null $purchase_amount_only Indicates whether the card acceptor or terminal supports purchase-only approvals.
     *
     * @return self
     */
    public function setPurchaseAmountOnly($purchase_amount_only)
    {
        $this->container['purchase_amount_only'] = $purchase_amount_only;

        return $this;
    }

    /**
     * Gets special_condition_indicator
     *
     * @return string|null
     */
    public function getSpecialConditionIndicator()
    {
        return $this->container['special_condition_indicator'];
    }

    /**
     * Sets special_condition_indicator
     *
     * @param string|null $special_condition_indicator Indicates a higher-risk operation, such as a quasi-cash or cryptocurrency transaction.  These transactions typically involve non-financial institutions.
     *
     * @return self
     */
    public function setSpecialConditionIndicator($special_condition_indicator)
    {
        $allowedValues = $this->getSpecialConditionIndicatorAllowableValues();
        if (!is_null($special_condition_indicator) && !in_array($special_condition_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'special_condition_indicator', must be one of '%s'",
                    $special_condition_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['special_condition_indicator'] = $special_condition_indicator;

        return $this;
    }

    /**
     * Gets terminal_attendance
     *
     * @return string|null
     */
    public function getTerminalAttendance()
    {
        return $this->container['terminal_attendance'];
    }

    /**
     * Sets terminal_attendance
     *
     * @param string|null $terminal_attendance Whether the card acceptor/terminal was attended.
     *
     * @return self
     */
    public function setTerminalAttendance($terminal_attendance)
    {
        $allowedValues = $this->getTerminalAttendanceAllowableValues();
        if (!is_null($terminal_attendance) && !in_array($terminal_attendance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_attendance', must be one of '%s'",
                    $terminal_attendance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminal_attendance'] = $terminal_attendance;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id Card acceptor or terminal identification number.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets terminal_location
     *
     * @return string|null
     */
    public function getTerminalLocation()
    {
        return $this->container['terminal_location'];
    }

    /**
     * Sets terminal_location
     *
     * @param string|null $terminal_location Location of the card acceptor/terminal.
     *
     * @return self
     */
    public function setTerminalLocation($terminal_location)
    {
        $allowedValues = $this->getTerminalLocationAllowableValues();
        if (!is_null($terminal_location) && !in_array($terminal_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_location', must be one of '%s'",
                    $terminal_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminal_location'] = $terminal_location;

        return $this;
    }

    /**
     * Gets terminal_type
     *
     * @return string|null
     */
    public function getTerminalType()
    {
        return $this->container['terminal_type'];
    }

    /**
     * Sets terminal_type
     *
     * @param string|null $terminal_type Type of card acceptor/terminal.
     *
     * @return self
     */
    public function setTerminalType($terminal_type)
    {
        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!is_null($terminal_type) && !in_array($terminal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_type', must be one of '%s'",
                    $terminal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminal_type'] = $terminal_type;

        return $this;
    }

    /**
     * Gets transaction_initiated_by
     *
     * @return string|null
     */
    public function getTransactionInitiatedBy()
    {
        return $this->container['transaction_initiated_by'];
    }

    /**
     * Sets transaction_initiated_by
     *
     * @param string|null $transaction_initiated_by Specifies whether the transaction was initiated by a cardholder or a merchant.
     *
     * @return self
     */
    public function setTransactionInitiatedBy($transaction_initiated_by)
    {
        $this->container['transaction_initiated_by'] = $transaction_initiated_by;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip United States ZIP code of the card acceptor or terminal.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


