<?php
/**
 * CardRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activation_actions' => '\OpenAPI\Client\Model\ActivationActions',
        'bulk_issuance_token' => 'string',
        'card_product_token' => 'string',
        'expedite' => 'bool',
        'expiration_offset' => '\OpenAPI\Client\Model\ExpirationOffset',
        'fulfillment' => '\OpenAPI\Client\Model\CardFulfillmentRequest',
        'metadata' => 'array<string,string>',
        'new_pan_from_card_token' => 'string',
        'reissue_pan_from_card_token' => 'string',
        'token' => 'string',
        'translate_pin_from_card_token' => 'string',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activation_actions' => null,
        'bulk_issuance_token' => null,
        'card_product_token' => null,
        'expedite' => null,
        'expiration_offset' => null,
        'fulfillment' => null,
        'metadata' => null,
        'new_pan_from_card_token' => null,
        'reissue_pan_from_card_token' => null,
        'token' => null,
        'translate_pin_from_card_token' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_actions' => 'activation_actions',
        'bulk_issuance_token' => 'bulk_issuance_token',
        'card_product_token' => 'card_product_token',
        'expedite' => 'expedite',
        'expiration_offset' => 'expiration_offset',
        'fulfillment' => 'fulfillment',
        'metadata' => 'metadata',
        'new_pan_from_card_token' => 'new_pan_from_card_token',
        'reissue_pan_from_card_token' => 'reissue_pan_from_card_token',
        'token' => 'token',
        'translate_pin_from_card_token' => 'translate_pin_from_card_token',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation_actions' => 'setActivationActions',
        'bulk_issuance_token' => 'setBulkIssuanceToken',
        'card_product_token' => 'setCardProductToken',
        'expedite' => 'setExpedite',
        'expiration_offset' => 'setExpirationOffset',
        'fulfillment' => 'setFulfillment',
        'metadata' => 'setMetadata',
        'new_pan_from_card_token' => 'setNewPanFromCardToken',
        'reissue_pan_from_card_token' => 'setReissuePanFromCardToken',
        'token' => 'setToken',
        'translate_pin_from_card_token' => 'setTranslatePinFromCardToken',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation_actions' => 'getActivationActions',
        'bulk_issuance_token' => 'getBulkIssuanceToken',
        'card_product_token' => 'getCardProductToken',
        'expedite' => 'getExpedite',
        'expiration_offset' => 'getExpirationOffset',
        'fulfillment' => 'getFulfillment',
        'metadata' => 'getMetadata',
        'new_pan_from_card_token' => 'getNewPanFromCardToken',
        'reissue_pan_from_card_token' => 'getReissuePanFromCardToken',
        'token' => 'getToken',
        'translate_pin_from_card_token' => 'getTranslatePinFromCardToken',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_actions'] = $data['activation_actions'] ?? null;
        $this->container['bulk_issuance_token'] = $data['bulk_issuance_token'] ?? null;
        $this->container['card_product_token'] = $data['card_product_token'] ?? null;
        $this->container['expedite'] = $data['expedite'] ?? false;
        $this->container['expiration_offset'] = $data['expiration_offset'] ?? null;
        $this->container['fulfillment'] = $data['fulfillment'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['new_pan_from_card_token'] = $data['new_pan_from_card_token'] ?? null;
        $this->container['reissue_pan_from_card_token'] = $data['reissue_pan_from_card_token'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['translate_pin_from_card_token'] = $data['translate_pin_from_card_token'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_product_token'] === null) {
            $invalidProperties[] = "'card_product_token' can't be null";
        }
        if ((mb_strlen($this->container['card_product_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['card_product_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['new_pan_from_card_token']) && (mb_strlen($this->container['new_pan_from_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'new_pan_from_card_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['new_pan_from_card_token']) && (mb_strlen($this->container['new_pan_from_card_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'new_pan_from_card_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reissue_pan_from_card_token']) && (mb_strlen($this->container['reissue_pan_from_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'reissue_pan_from_card_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['reissue_pan_from_card_token']) && (mb_strlen($this->container['reissue_pan_from_card_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'reissue_pan_from_card_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['translate_pin_from_card_token']) && (mb_strlen($this->container['translate_pin_from_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'translate_pin_from_card_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['translate_pin_from_card_token']) && (mb_strlen($this->container['translate_pin_from_card_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'translate_pin_from_card_token', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['user_token'] === null) {
            $invalidProperties[] = "'user_token' can't be null";
        }
        if ((mb_strlen($this->container['user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['user_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activation_actions
     *
     * @return \OpenAPI\Client\Model\ActivationActions|null
     */
    public function getActivationActions()
    {
        return $this->container['activation_actions'];
    }

    /**
     * Sets activation_actions
     *
     * @param \OpenAPI\Client\Model\ActivationActions|null $activation_actions activation_actions
     *
     * @return self
     */
    public function setActivationActions($activation_actions)
    {
        $this->container['activation_actions'] = $activation_actions;

        return $this;
    }

    /**
     * Gets bulk_issuance_token
     *
     * @return string|null
     */
    public function getBulkIssuanceToken()
    {
        return $this->container['bulk_issuance_token'];
    }

    /**
     * Sets bulk_issuance_token
     *
     * @param string|null $bulk_issuance_token Associates the card with the specified bulk card order. This field cannot be updated.
     *
     * @return self
     */
    public function setBulkIssuanceToken($bulk_issuance_token)
    {
        $this->container['bulk_issuance_token'] = $bulk_issuance_token;

        return $this;
    }

    /**
     * Gets card_product_token
     *
     * @return string
     */
    public function getCardProductToken()
    {
        return $this->container['card_product_token'];
    }

    /**
     * Sets card_product_token
     *
     * @param string $card_product_token Unique identifier of the card product.
     *
     * @return self
     */
    public function setCardProductToken($card_product_token)
    {
        if ((mb_strlen($card_product_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($card_product_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling CardRequest., must be bigger than or equal to 1.');
        }

        $this->container['card_product_token'] = $card_product_token;

        return $this;
    }

    /**
     * Gets expedite
     *
     * @return bool|null
     */
    public function getExpedite()
    {
        return $this->container['expedite'];
    }

    /**
     * Sets expedite
     *
     * @param bool|null $expedite Set to `true` to request expedited processing of the card by your card fulfillment provider.  This expedited service is available for cards fulfilled by link:http://perfectplastic.com/[Perfect Plastic Printing, window=\"_blank\"], link:http://www.idemia.com[IDEMIA, window=\"_blank\"], and link:https://www.arroweye.com/[Arroweye Solutions, window=\"_blank\"].  *NOTE:* Contact your Marqeta representative for information regarding the cost of expedited service.
     *
     * @return self
     */
    public function setExpedite($expedite)
    {
        $this->container['expedite'] = $expedite;

        return $this;
    }

    /**
     * Gets expiration_offset
     *
     * @return \OpenAPI\Client\Model\ExpirationOffset|null
     */
    public function getExpirationOffset()
    {
        return $this->container['expiration_offset'];
    }

    /**
     * Sets expiration_offset
     *
     * @param \OpenAPI\Client\Model\ExpirationOffset|null $expiration_offset expiration_offset
     *
     * @return self
     */
    public function setExpirationOffset($expiration_offset)
    {
        $this->container['expiration_offset'] = $expiration_offset;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Model\CardFulfillmentRequest|null
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Model\CardFulfillmentRequest|null $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Associates customer-provided metadata with the card.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets new_pan_from_card_token
     *
     * @return string|null
     */
    public function getNewPanFromCardToken()
    {
        return $this->container['new_pan_from_card_token'];
    }

    /**
     * Sets new_pan_from_card_token
     *
     * @param string|null $new_pan_from_card_token Reissues the specified card (known as the \"source\" card) with a new primary account number (PAN).  This field reissues a card with a new PAN from the specified source card. The source card is automatically terminated when the card is reissued with the new PAN. Use this field when reissuing a lost or stolen card.  Send a `GET` request to `/cards/user/{token}` to retrieve card tokens for a particular user.
     *
     * @return self
     */
    public function setNewPanFromCardToken($new_pan_from_card_token)
    {
        if (!is_null($new_pan_from_card_token) && (mb_strlen($new_pan_from_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $new_pan_from_card_token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if (!is_null($new_pan_from_card_token) && (mb_strlen($new_pan_from_card_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $new_pan_from_card_token when calling CardRequest., must be bigger than or equal to 0.');
        }

        $this->container['new_pan_from_card_token'] = $new_pan_from_card_token;

        return $this;
    }

    /**
     * Gets reissue_pan_from_card_token
     *
     * @return string|null
     */
    public function getReissuePanFromCardToken()
    {
        return $this->container['reissue_pan_from_card_token'];
    }

    /**
     * Sets reissue_pan_from_card_token
     *
     * @param string|null $reissue_pan_from_card_token Reissues the specified card (known as the \"source\" card).  This field reissues a card by copying the primary account number (PAN) and personal identification number (PIN) from the specified source card to the newly created card. The reissued card has the same PAN and PIN as the source card but a new expiration date and CVV2 number.  Send a `GET` request to `/cards/user/{token}` to retrieve card tokens for a particular user.  *NOTE:* By default, the source card is automatically terminated when the reissued card is activated. However, if your program is configured for multiple active cards, you can prevent the source card from being automatically terminated by setting the `activation_actions.terminate_reissued_source_card` field to `false`.
     *
     * @return self
     */
    public function setReissuePanFromCardToken($reissue_pan_from_card_token)
    {
        if (!is_null($reissue_pan_from_card_token) && (mb_strlen($reissue_pan_from_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $reissue_pan_from_card_token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if (!is_null($reissue_pan_from_card_token) && (mb_strlen($reissue_pan_from_card_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reissue_pan_from_card_token when calling CardRequest., must be bigger than or equal to 0.');
        }

        $this->container['reissue_pan_from_card_token'] = $reissue_pan_from_card_token;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the card.  If you do not include a token, the system will generate one automatically. Other API calls will require this token, so we recommend creating a token that is easy to remember rather than letting the system generate one. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardRequest., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets translate_pin_from_card_token
     *
     * @return string|null
     */
    public function getTranslatePinFromCardToken()
    {
        return $this->container['translate_pin_from_card_token'];
    }

    /**
     * Sets translate_pin_from_card_token
     *
     * @param string|null $translate_pin_from_card_token Copies the PIN from the specified card to the newly created card.  Both cards must belong to the same user. Populating this field will raise an error if `reissue_pan_from_card_token` is also set.  Send a `GET` request to `/cards/user/{token}` to retrieve card tokens for a particular user.
     *
     * @return self
     */
    public function setTranslatePinFromCardToken($translate_pin_from_card_token)
    {
        if (!is_null($translate_pin_from_card_token) && (mb_strlen($translate_pin_from_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $translate_pin_from_card_token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if (!is_null($translate_pin_from_card_token) && (mb_strlen($translate_pin_from_card_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $translate_pin_from_card_token when calling CardRequest., must be bigger than or equal to 0.');
        }

        $this->container['translate_pin_from_card_token'] = $translate_pin_from_card_token;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string $user_token Unique identifier of the authorized user of the card.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        if ((mb_strlen($user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling CardRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($user_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling CardRequest., must be bigger than or equal to 1.');
        }

        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


