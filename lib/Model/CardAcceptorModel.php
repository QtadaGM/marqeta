<?php
/**
 * CardAcceptorModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardAcceptorModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardAcceptorModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_acceptor_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'city' => 'string',
        'country' => 'string',
        'customer_service_phone' => 'string',
        'ecommerce_security_level_indicator' => 'string',
        'mcc' => 'string',
        'name' => 'string',
        'partial_approval_capable' => 'bool',
        'phone' => 'string',
        'state' => 'string',
        'url' => 'string',
        'zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'city' => null,
        'country' => null,
        'customer_service_phone' => null,
        'ecommerce_security_level_indicator' => null,
        'mcc' => null,
        'name' => null,
        'partial_approval_capable' => null,
        'phone' => null,
        'state' => null,
        'url' => null,
        'zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'city' => 'city',
        'country' => 'country',
        'customer_service_phone' => 'customer_service_phone',
        'ecommerce_security_level_indicator' => 'ecommerce_security_level_indicator',
        'mcc' => 'mcc',
        'name' => 'name',
        'partial_approval_capable' => 'partial_approval_capable',
        'phone' => 'phone',
        'state' => 'state',
        'url' => 'url',
        'zip' => 'zip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'city' => 'setCity',
        'country' => 'setCountry',
        'customer_service_phone' => 'setCustomerServicePhone',
        'ecommerce_security_level_indicator' => 'setEcommerceSecurityLevelIndicator',
        'mcc' => 'setMcc',
        'name' => 'setName',
        'partial_approval_capable' => 'setPartialApprovalCapable',
        'phone' => 'setPhone',
        'state' => 'setState',
        'url' => 'setUrl',
        'zip' => 'setZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'city' => 'getCity',
        'country' => 'getCountry',
        'customer_service_phone' => 'getCustomerServicePhone',
        'ecommerce_security_level_indicator' => 'getEcommerceSecurityLevelIndicator',
        'mcc' => 'getMcc',
        'name' => 'getName',
        'partial_approval_capable' => 'getPartialApprovalCapable',
        'phone' => 'getPhone',
        'state' => 'getState',
        'url' => 'getUrl',
        'zip' => 'getZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = $data['address'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['customer_service_phone'] = $data['customer_service_phone'] ?? null;
        $this->container['ecommerce_security_level_indicator'] = $data['ecommerce_security_level_indicator'] ?? null;
        $this->container['mcc'] = $data['mcc'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['partial_approval_capable'] = $data['partial_approval_capable'] ?? false;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 255)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) < 0)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 40)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mcc']) && (mb_strlen($this->container['mcc']) > 5)) {
            $invalidProperties[] = "invalid value for 'mcc', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['mcc']) && (mb_strlen($this->container['mcc']) < 0)) {
            $invalidProperties[] = "invalid value for 'mcc', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) < 0)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (!is_null($address) && (mb_strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address when calling CardAcceptorModel., must be smaller than or equal to 255.');
        }
        if (!is_null($address) && (mb_strlen($address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address when calling CardAcceptorModel., must be bigger than or equal to 0.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CardAcceptorModel., must be smaller than or equal to 40.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CardAcceptorModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets customer_service_phone
     *
     * @return string|null
     */
    public function getCustomerServicePhone()
    {
        return $this->container['customer_service_phone'];
    }

    /**
     * Sets customer_service_phone
     *
     * @param string|null $customer_service_phone customer_service_phone
     *
     * @return self
     */
    public function setCustomerServicePhone($customer_service_phone)
    {
        $this->container['customer_service_phone'] = $customer_service_phone;

        return $this;
    }

    /**
     * Gets ecommerce_security_level_indicator
     *
     * @return string|null
     */
    public function getEcommerceSecurityLevelIndicator()
    {
        return $this->container['ecommerce_security_level_indicator'];
    }

    /**
     * Sets ecommerce_security_level_indicator
     *
     * @param string|null $ecommerce_security_level_indicator ecommerce_security_level_indicator
     *
     * @return self
     */
    public function setEcommerceSecurityLevelIndicator($ecommerce_security_level_indicator)
    {
        $this->container['ecommerce_security_level_indicator'] = $ecommerce_security_level_indicator;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc mcc
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (!is_null($mcc) && (mb_strlen($mcc) > 5)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling CardAcceptorModel., must be smaller than or equal to 5.');
        }
        if (!is_null($mcc) && (mb_strlen($mcc) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling CardAcceptorModel., must be bigger than or equal to 0.');
        }

        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CardAcceptorModel., must be smaller than or equal to 50.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CardAcceptorModel., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partial_approval_capable
     *
     * @return bool|null
     */
    public function getPartialApprovalCapable()
    {
        return $this->container['partial_approval_capable'];
    }

    /**
     * Sets partial_approval_capable
     *
     * @param bool|null $partial_approval_capable partial_approval_capable
     *
     * @return self
     */
    public function setPartialApprovalCapable($partial_approval_capable)
    {
        $this->container['partial_approval_capable'] = $partial_approval_capable;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (!is_null($zip) && (mb_strlen($zip) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling CardAcceptorModel., must be smaller than or equal to 10.');
        }
        if (!is_null($zip) && (mb_strlen($zip) < 0)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling CardAcceptorModel., must be bigger than or equal to 0.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


