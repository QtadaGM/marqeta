<?php
/**
 * StatementPaymentWarning
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatementPaymentWarning Class Doc Comment
 *
 * @category Class
 * @description Contains information on statement payment warnings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StatementPaymentWarning implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatementPaymentWarning';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'disclosure' => 'string',
        'interest_paid' => 'float',
        'monthly_payment' => 'float',
        'pay_off_period' => 'int',
        'period_type' => 'string',
        'total_paid' => 'float',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'disclosure' => null,
        'interest_paid' => null,
        'monthly_payment' => null,
        'pay_off_period' => null,
        'period_type' => null,
        'total_paid' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disclosure' => 'disclosure',
        'interest_paid' => 'interest_paid',
        'monthly_payment' => 'monthly_payment',
        'pay_off_period' => 'pay_off_period',
        'period_type' => 'period_type',
        'total_paid' => 'total_paid',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disclosure' => 'setDisclosure',
        'interest_paid' => 'setInterestPaid',
        'monthly_payment' => 'setMonthlyPayment',
        'pay_off_period' => 'setPayOffPeriod',
        'period_type' => 'setPeriodType',
        'total_paid' => 'setTotalPaid',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disclosure' => 'getDisclosure',
        'interest_paid' => 'getInterestPaid',
        'monthly_payment' => 'getMonthlyPayment',
        'pay_off_period' => 'getPayOffPeriod',
        'period_type' => 'getPeriodType',
        'total_paid' => 'getTotalPaid',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISCLOSURE_NEGATIVE_OR_NO_AMORTIZATION = 'NEGATIVE_OR_NO_AMORTIZATION';
    const DISCLOSURE_NO_LIFETIME_REPAYMENT = 'NO_LIFETIME_REPAYMENT';
    const PERIOD_TYPE_MONTH = 'MONTH';
    const PERIOD_TYPE_YEAR = 'YEAR';
    const TYPE_MIN_PAYMENT = 'MIN_PAYMENT';
    const TYPE__3_YEAR = '3_YEAR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisclosureAllowableValues()
    {
        return [
            self::DISCLOSURE_NEGATIVE_OR_NO_AMORTIZATION,
            self::DISCLOSURE_NO_LIFETIME_REPAYMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodTypeAllowableValues()
    {
        return [
            self::PERIOD_TYPE_MONTH,
            self::PERIOD_TYPE_YEAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MIN_PAYMENT,
            self::TYPE__3_YEAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disclosure'] = $data['disclosure'] ?? null;
        $this->container['interest_paid'] = $data['interest_paid'] ?? null;
        $this->container['monthly_payment'] = $data['monthly_payment'] ?? null;
        $this->container['pay_off_period'] = $data['pay_off_period'] ?? null;
        $this->container['period_type'] = $data['period_type'] ?? null;
        $this->container['total_paid'] = $data['total_paid'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDisclosureAllowableValues();
        if (!is_null($this->container['disclosure']) && !in_array($this->container['disclosure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disclosure', must be one of '%s'",
                $this->container['disclosure'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pay_off_period']) && ($this->container['pay_off_period'] < 0)) {
            $invalidProperties[] = "invalid value for 'pay_off_period', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (!is_null($this->container['period_type']) && !in_array($this->container['period_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'period_type', must be one of '%s'",
                $this->container['period_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disclosure
     *
     * @return string|null
     */
    public function getDisclosure()
    {
        return $this->container['disclosure'];
    }

    /**
     * Sets disclosure
     *
     * @param string|null $disclosure Statement disclosure in the case of negative or no amortization, or no lifetime repayment for the minimum payment warning type.  * `NEGATIVE_OR_NO_AMORTIZATION` - Occurs when the interest amount is higher than the minimum payment; results in the outstanding balance remaining in perpetuity. * `NO_LIFETIME_REPAYMENT` - Occurs when the interest amount is just below the minimum payment; results in the outstanding balance taking longer than a lifetime to pay off.
     *
     * @return self
     */
    public function setDisclosure($disclosure)
    {
        $allowedValues = $this->getDisclosureAllowableValues();
        if (!is_null($disclosure) && !in_array($disclosure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disclosure', must be one of '%s'",
                    $disclosure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disclosure'] = $disclosure;

        return $this;
    }

    /**
     * Gets interest_paid
     *
     * @return float|null
     */
    public function getInterestPaid()
    {
        return $this->container['interest_paid'];
    }

    /**
     * Sets interest_paid
     *
     * @param float|null $interest_paid For the minimum payment warning type, this value represents the total amount of interest to pay off the statement balance if only making the minimum payment each month.  For the 3 Year warning type, this value represents the total amount of interest if paying off the statement balance in three years.
     *
     * @return self
     */
    public function setInterestPaid($interest_paid)
    {
        $this->container['interest_paid'] = $interest_paid;

        return $this;
    }

    /**
     * Gets monthly_payment
     *
     * @return float|null
     */
    public function getMonthlyPayment()
    {
        return $this->container['monthly_payment'];
    }

    /**
     * Sets monthly_payment
     *
     * @param float|null $monthly_payment For the minimum payment warning type, this value is 0.  For the 3 Year warning type, this value represents the fixed monthly payment amount required to pay off the statement balance in three years.
     *
     * @return self
     */
    public function setMonthlyPayment($monthly_payment)
    {
        $this->container['monthly_payment'] = $monthly_payment;

        return $this;
    }

    /**
     * Gets pay_off_period
     *
     * @return int|null
     */
    public function getPayOffPeriod()
    {
        return $this->container['pay_off_period'];
    }

    /**
     * Sets pay_off_period
     *
     * @param int|null $pay_off_period For the minimum payment warning type, this value represents the number of periods required to pay off the statement balance.  For the 3 Year warning type, this value is 36 (months).
     *
     * @return self
     */
    public function setPayOffPeriod($pay_off_period)
    {

        if (!is_null($pay_off_period) && ($pay_off_period < 0)) {
            throw new \InvalidArgumentException('invalid value for $pay_off_period when calling StatementPaymentWarning., must be bigger than or equal to 0.');
        }

        $this->container['pay_off_period'] = $pay_off_period;

        return $this;
    }

    /**
     * Gets period_type
     *
     * @return string|null
     */
    public function getPeriodType()
    {
        return $this->container['period_type'];
    }

    /**
     * Sets period_type
     *
     * @param string|null $period_type Time unit of the pay off period.
     *
     * @return self
     */
    public function setPeriodType($period_type)
    {
        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (!is_null($period_type) && !in_array($period_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'period_type', must be one of '%s'",
                    $period_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period_type'] = $period_type;

        return $this;
    }

    /**
     * Gets total_paid
     *
     * @return float|null
     */
    public function getTotalPaid()
    {
        return $this->container['total_paid'];
    }

    /**
     * Sets total_paid
     *
     * @param float|null $total_paid For the minimum payment warning type, this value represents the total amount of principal and interest to pay off the statement balance if only making the minimum payment each month.  For the 3 Year warning type, this value represents the total amount of principal and interest if paying off the statement balance in three years.
     *
     * @return self
     */
    public function setTotalPaid($total_paid)
    {
        $this->container['total_paid'] = $total_paid;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of statement warning.  * `MIN_PAYMENT` - Displays the total estimated payment amount and how long it would take to pay off the statement balance if only making minimum payments. * `3_YEAR` - Displays the monthly payment amount and total estimated payment amount if paying off the statement balance in three years.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


