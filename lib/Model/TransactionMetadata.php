<?php
/**
 * TransactionMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionMetadata Class Doc Comment
 *
 * @category Class
 * @description Contains merchant-provided metadata related to the transaction, including details about lodging- and transit-related purchases.  May be returned if the request uses Transaction Model v2 of the Marqeta Core API. Not returned for Transaction Model v1 requests.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'airline' => '\OpenAPI\Client\Model\Airline',
        'authorization_life_cycle' => 'int',
        'cross_border_transaction' => 'bool',
        'is_deferred_authorization' => 'bool',
        'is_lodging_auto_rental' => 'bool',
        'lodging_auto_rental_start_date' => '\DateTime',
        'moto_indicator' => 'string',
        'one_leg_out' => 'bool',
        'payment_channel' => 'string',
        'special_purchase_id' => 'string',
        'transaction_category' => 'string',
        'transit' => '\OpenAPI\Client\Model\Transit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'airline' => null,
        'authorization_life_cycle' => 'int32',
        'cross_border_transaction' => null,
        'is_deferred_authorization' => null,
        'is_lodging_auto_rental' => null,
        'lodging_auto_rental_start_date' => 'date-time',
        'moto_indicator' => null,
        'one_leg_out' => null,
        'payment_channel' => null,
        'special_purchase_id' => null,
        'transaction_category' => null,
        'transit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airline' => 'airline',
        'authorization_life_cycle' => 'authorization_life_cycle',
        'cross_border_transaction' => 'cross_border_transaction',
        'is_deferred_authorization' => 'is_deferred_authorization',
        'is_lodging_auto_rental' => 'is_lodging_auto_rental',
        'lodging_auto_rental_start_date' => 'lodging_auto_rental_start_date',
        'moto_indicator' => 'moto_indicator',
        'one_leg_out' => 'one_leg_out',
        'payment_channel' => 'payment_channel',
        'special_purchase_id' => 'special_purchase_id',
        'transaction_category' => 'transaction_category',
        'transit' => 'transit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airline' => 'setAirline',
        'authorization_life_cycle' => 'setAuthorizationLifeCycle',
        'cross_border_transaction' => 'setCrossBorderTransaction',
        'is_deferred_authorization' => 'setIsDeferredAuthorization',
        'is_lodging_auto_rental' => 'setIsLodgingAutoRental',
        'lodging_auto_rental_start_date' => 'setLodgingAutoRentalStartDate',
        'moto_indicator' => 'setMotoIndicator',
        'one_leg_out' => 'setOneLegOut',
        'payment_channel' => 'setPaymentChannel',
        'special_purchase_id' => 'setSpecialPurchaseId',
        'transaction_category' => 'setTransactionCategory',
        'transit' => 'setTransit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airline' => 'getAirline',
        'authorization_life_cycle' => 'getAuthorizationLifeCycle',
        'cross_border_transaction' => 'getCrossBorderTransaction',
        'is_deferred_authorization' => 'getIsDeferredAuthorization',
        'is_lodging_auto_rental' => 'getIsLodgingAutoRental',
        'lodging_auto_rental_start_date' => 'getLodgingAutoRentalStartDate',
        'moto_indicator' => 'getMotoIndicator',
        'one_leg_out' => 'getOneLegOut',
        'payment_channel' => 'getPaymentChannel',
        'special_purchase_id' => 'getSpecialPurchaseId',
        'transaction_category' => 'getTransactionCategory',
        'transit' => 'getTransit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MOTO_INDICATOR_UNKNOWN = 'UNKNOWN';
    const MOTO_INDICATOR_MANUAL = 'MANUAL';
    const MOTO_INDICATOR_RECURRING = 'RECURRING';
    const MOTO_INDICATOR_INSTALLMENT = 'INSTALLMENT';
    const MOTO_INDICATOR_OTHERS = 'OTHERS';
    const PAYMENT_CHANNEL_OTHER = 'OTHER';
    const PAYMENT_CHANNEL_ATM = 'ATM';
    const PAYMENT_CHANNEL_ECOMMERCE = 'ECOMMERCE';
    const PAYMENT_CHANNEL_MAIL = 'MAIL';
    const PAYMENT_CHANNEL_PHONE = 'PHONE';
    const PAYMENT_CHANNEL_MOTO = 'MOTO';
    const TRANSACTION_CATEGORY_RETAIL_SALE = 'RETAIL_SALE';
    const TRANSACTION_CATEGORY_BILL_PAY = 'BILL_PAY';
    const TRANSACTION_CATEGORY_HOTEL = 'HOTEL';
    const TRANSACTION_CATEGORY_HEALTH_CARE = 'HEALTH_CARE';
    const TRANSACTION_CATEGORY_RESTAURANT = 'RESTAURANT';
    const TRANSACTION_CATEGORY_AUTO_RENTAL = 'AUTO_RENTAL';
    const TRANSACTION_CATEGORY_AIRLINE = 'AIRLINE';
    const TRANSACTION_CATEGORY_PAYMENT = 'PAYMENT';
    const TRANSACTION_CATEGORY_HOSPITALIZATION_COLLEGE = 'HOSPITALIZATION_COLLEGE';
    const TRANSACTION_CATEGORY_PHONE_MAIL_ECOMMERCE = 'PHONE_MAIL_ECOMMERCE';
    const TRANSACTION_CATEGORY_ATM = 'ATM';
    const TRANSACTION_CATEGORY_TRANSIT = 'TRANSIT';
    const TRANSACTION_CATEGORY_EXTENDED_AUTHORIZATION = 'EXTENDED_AUTHORIZATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMotoIndicatorAllowableValues()
    {
        return [
            self::MOTO_INDICATOR_UNKNOWN,
            self::MOTO_INDICATOR_MANUAL,
            self::MOTO_INDICATOR_RECURRING,
            self::MOTO_INDICATOR_INSTALLMENT,
            self::MOTO_INDICATOR_OTHERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentChannelAllowableValues()
    {
        return [
            self::PAYMENT_CHANNEL_OTHER,
            self::PAYMENT_CHANNEL_ATM,
            self::PAYMENT_CHANNEL_ECOMMERCE,
            self::PAYMENT_CHANNEL_MAIL,
            self::PAYMENT_CHANNEL_PHONE,
            self::PAYMENT_CHANNEL_MOTO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCategoryAllowableValues()
    {
        return [
            self::TRANSACTION_CATEGORY_RETAIL_SALE,
            self::TRANSACTION_CATEGORY_BILL_PAY,
            self::TRANSACTION_CATEGORY_HOTEL,
            self::TRANSACTION_CATEGORY_HEALTH_CARE,
            self::TRANSACTION_CATEGORY_RESTAURANT,
            self::TRANSACTION_CATEGORY_AUTO_RENTAL,
            self::TRANSACTION_CATEGORY_AIRLINE,
            self::TRANSACTION_CATEGORY_PAYMENT,
            self::TRANSACTION_CATEGORY_HOSPITALIZATION_COLLEGE,
            self::TRANSACTION_CATEGORY_PHONE_MAIL_ECOMMERCE,
            self::TRANSACTION_CATEGORY_ATM,
            self::TRANSACTION_CATEGORY_TRANSIT,
            self::TRANSACTION_CATEGORY_EXTENDED_AUTHORIZATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['airline'] = $data['airline'] ?? null;
        $this->container['authorization_life_cycle'] = $data['authorization_life_cycle'] ?? null;
        $this->container['cross_border_transaction'] = $data['cross_border_transaction'] ?? false;
        $this->container['is_deferred_authorization'] = $data['is_deferred_authorization'] ?? null;
        $this->container['is_lodging_auto_rental'] = $data['is_lodging_auto_rental'] ?? false;
        $this->container['lodging_auto_rental_start_date'] = $data['lodging_auto_rental_start_date'] ?? null;
        $this->container['moto_indicator'] = $data['moto_indicator'] ?? null;
        $this->container['one_leg_out'] = $data['one_leg_out'] ?? null;
        $this->container['payment_channel'] = $data['payment_channel'] ?? null;
        $this->container['special_purchase_id'] = $data['special_purchase_id'] ?? null;
        $this->container['transaction_category'] = $data['transaction_category'] ?? null;
        $this->container['transit'] = $data['transit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMotoIndicatorAllowableValues();
        if (!is_null($this->container['moto_indicator']) && !in_array($this->container['moto_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'moto_indicator', must be one of '%s'",
                $this->container['moto_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentChannelAllowableValues();
        if (!is_null($this->container['payment_channel']) && !in_array($this->container['payment_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_channel', must be one of '%s'",
                $this->container['payment_channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionCategoryAllowableValues();
        if (!is_null($this->container['transaction_category']) && !in_array($this->container['transaction_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_category', must be one of '%s'",
                $this->container['transaction_category'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airline
     *
     * @return \OpenAPI\Client\Model\Airline|null
     */
    public function getAirline()
    {
        return $this->container['airline'];
    }

    /**
     * Sets airline
     *
     * @param \OpenAPI\Client\Model\Airline|null $airline airline
     *
     * @return self
     */
    public function setAirline($airline)
    {
        $this->container['airline'] = $airline;

        return $this;
    }

    /**
     * Gets authorization_life_cycle
     *
     * @return int|null
     */
    public function getAuthorizationLifeCycle()
    {
        return $this->container['authorization_life_cycle'];
    }

    /**
     * Sets authorization_life_cycle
     *
     * @param int|null $authorization_life_cycle Number of days the pre-authorization is in effect.
     *
     * @return self
     */
    public function setAuthorizationLifeCycle($authorization_life_cycle)
    {
        $this->container['authorization_life_cycle'] = $authorization_life_cycle;

        return $this;
    }

    /**
     * Gets cross_border_transaction
     *
     * @return bool|null
     */
    public function getCrossBorderTransaction()
    {
        return $this->container['cross_border_transaction'];
    }

    /**
     * Sets cross_border_transaction
     *
     * @param bool|null $cross_border_transaction Whether the transaction is cross-border, i.e., when the merchant and the cardholder are located in two different countries.
     *
     * @return self
     */
    public function setCrossBorderTransaction($cross_border_transaction)
    {
        $this->container['cross_border_transaction'] = $cross_border_transaction;

        return $this;
    }

    /**
     * Gets is_deferred_authorization
     *
     * @return bool|null
     */
    public function getIsDeferredAuthorization()
    {
        return $this->container['is_deferred_authorization'];
    }

    /**
     * Sets is_deferred_authorization
     *
     * @param bool|null $is_deferred_authorization Indicates an offline authorization made during an interruption of card network connectivity, such as a purchase on a flight.
     *
     * @return self
     */
    public function setIsDeferredAuthorization($is_deferred_authorization)
    {
        $this->container['is_deferred_authorization'] = $is_deferred_authorization;

        return $this;
    }

    /**
     * Gets is_lodging_auto_rental
     *
     * @return bool|null
     */
    public function getIsLodgingAutoRental()
    {
        return $this->container['is_lodging_auto_rental'];
    }

    /**
     * Sets is_lodging_auto_rental
     *
     * @param bool|null $is_lodging_auto_rental Whether the transaction is a lodging or vehicle rental.
     *
     * @return self
     */
    public function setIsLodgingAutoRental($is_lodging_auto_rental)
    {
        $this->container['is_lodging_auto_rental'] = $is_lodging_auto_rental;

        return $this;
    }

    /**
     * Gets lodging_auto_rental_start_date
     *
     * @return \DateTime|null
     */
    public function getLodgingAutoRentalStartDate()
    {
        return $this->container['lodging_auto_rental_start_date'];
    }

    /**
     * Sets lodging_auto_rental_start_date
     *
     * @param \DateTime|null $lodging_auto_rental_start_date Date and time when the lodging check-in or vehicle rental began.
     *
     * @return self
     */
    public function setLodgingAutoRentalStartDate($lodging_auto_rental_start_date)
    {
        $this->container['lodging_auto_rental_start_date'] = $lodging_auto_rental_start_date;

        return $this;
    }

    /**
     * Gets moto_indicator
     *
     * @return string|null
     */
    public function getMotoIndicator()
    {
        return $this->container['moto_indicator'];
    }

    /**
     * Sets moto_indicator
     *
     * @param string|null $moto_indicator Indicates the type of mail or telephone order transaction.
     *
     * @return self
     */
    public function setMotoIndicator($moto_indicator)
    {
        $allowedValues = $this->getMotoIndicatorAllowableValues();
        if (!is_null($moto_indicator) && !in_array($moto_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'moto_indicator', must be one of '%s'",
                    $moto_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moto_indicator'] = $moto_indicator;

        return $this;
    }

    /**
     * Gets one_leg_out
     *
     * @return bool|null
     */
    public function getOneLegOut()
    {
        return $this->container['one_leg_out'];
    }

    /**
     * Sets one_leg_out
     *
     * @param bool|null $one_leg_out one_leg_out
     *
     * @return self
     */
    public function setOneLegOut($one_leg_out)
    {
        $this->container['one_leg_out'] = $one_leg_out;

        return $this;
    }

    /**
     * Gets payment_channel
     *
     * @return string|null
     */
    public function getPaymentChannel()
    {
        return $this->container['payment_channel'];
    }

    /**
     * Sets payment_channel
     *
     * @param string|null $payment_channel Channel from which the transaction was originated.
     *
     * @return self
     */
    public function setPaymentChannel($payment_channel)
    {
        $allowedValues = $this->getPaymentChannelAllowableValues();
        if (!is_null($payment_channel) && !in_array($payment_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_channel', must be one of '%s'",
                    $payment_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_channel'] = $payment_channel;

        return $this;
    }

    /**
     * Gets special_purchase_id
     *
     * @return string|null
     */
    public function getSpecialPurchaseId()
    {
        return $this->container['special_purchase_id'];
    }

    /**
     * Sets special_purchase_id
     *
     * @param string|null $special_purchase_id special_purchase_id
     *
     * @return self
     */
    public function setSpecialPurchaseId($special_purchase_id)
    {
        $this->container['special_purchase_id'] = $special_purchase_id;

        return $this;
    }

    /**
     * Gets transaction_category
     *
     * @return string|null
     */
    public function getTransactionCategory()
    {
        return $this->container['transaction_category'];
    }

    /**
     * Sets transaction_category
     *
     * @param string|null $transaction_category Type of product or service being purchased, if provided by the merchant.
     *
     * @return self
     */
    public function setTransactionCategory($transaction_category)
    {
        $allowedValues = $this->getTransactionCategoryAllowableValues();
        if (!is_null($transaction_category) && !in_array($transaction_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_category', must be one of '%s'",
                    $transaction_category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_category'] = $transaction_category;

        return $this;
    }

    /**
     * Gets transit
     *
     * @return \OpenAPI\Client\Model\Transit|null
     */
    public function getTransit()
    {
        return $this->container['transit'];
    }

    /**
     * Sets transit
     *
     * @param \OpenAPI\Client\Model\Transit|null $transit transit
     *
     * @return self
     */
    public function setTransit($transit)
    {
        $this->container['transit'] = $transit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


