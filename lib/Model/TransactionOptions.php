<?php
/**
 * TransactionOptions
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_data' => 'string',
        'card_expiration_date_yymm' => 'string',
        'database_transaction_timeout' => 'int',
        'encryption_key_id' => 'string',
        'is_async' => 'bool',
        'pre_auth_time_limit' => 'string',
        'send_expiration_date' => 'bool',
        'send_track_data' => 'bool',
        'transaction_timeout_threshold_seconds' => 'int',
        'transaction_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_data' => null,
        'card_expiration_date_yymm' => null,
        'database_transaction_timeout' => 'int32',
        'encryption_key_id' => null,
        'is_async' => null,
        'pre_auth_time_limit' => null,
        'send_expiration_date' => null,
        'send_track_data' => null,
        'transaction_timeout_threshold_seconds' => 'int64',
        'transaction_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_data' => 'additional_data',
        'card_expiration_date_yymm' => 'card_expiration_date_yymm',
        'database_transaction_timeout' => 'database_transaction_timeout',
        'encryption_key_id' => 'encryption_key_id',
        'is_async' => 'is_async',
        'pre_auth_time_limit' => 'pre_auth_time_limit',
        'send_expiration_date' => 'send_expiration_date',
        'send_track_data' => 'send_track_data',
        'transaction_timeout_threshold_seconds' => 'transaction_timeout_threshold_seconds',
        'transaction_token' => 'transaction_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_data' => 'setAdditionalData',
        'card_expiration_date_yymm' => 'setCardExpirationDateYymm',
        'database_transaction_timeout' => 'setDatabaseTransactionTimeout',
        'encryption_key_id' => 'setEncryptionKeyId',
        'is_async' => 'setIsAsync',
        'pre_auth_time_limit' => 'setPreAuthTimeLimit',
        'send_expiration_date' => 'setSendExpirationDate',
        'send_track_data' => 'setSendTrackData',
        'transaction_timeout_threshold_seconds' => 'setTransactionTimeoutThresholdSeconds',
        'transaction_token' => 'setTransactionToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_data' => 'getAdditionalData',
        'card_expiration_date_yymm' => 'getCardExpirationDateYymm',
        'database_transaction_timeout' => 'getDatabaseTransactionTimeout',
        'encryption_key_id' => 'getEncryptionKeyId',
        'is_async' => 'getIsAsync',
        'pre_auth_time_limit' => 'getPreAuthTimeLimit',
        'send_expiration_date' => 'getSendExpirationDate',
        'send_track_data' => 'getSendTrackData',
        'transaction_timeout_threshold_seconds' => 'getTransactionTimeoutThresholdSeconds',
        'transaction_token' => 'getTransactionToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_data'] = $data['additional_data'] ?? null;
        $this->container['card_expiration_date_yymm'] = $data['card_expiration_date_yymm'] ?? null;
        $this->container['database_transaction_timeout'] = $data['database_transaction_timeout'] ?? null;
        $this->container['encryption_key_id'] = $data['encryption_key_id'] ?? null;
        $this->container['is_async'] = $data['is_async'] ?? false;
        $this->container['pre_auth_time_limit'] = $data['pre_auth_time_limit'] ?? null;
        $this->container['send_expiration_date'] = $data['send_expiration_date'] ?? false;
        $this->container['send_track_data'] = $data['send_track_data'] ?? false;
        $this->container['transaction_timeout_threshold_seconds'] = $data['transaction_timeout_threshold_seconds'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_data
     *
     * @return string|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param string|null $additional_data additional_data
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets card_expiration_date_yymm
     *
     * @return string|null
     */
    public function getCardExpirationDateYymm()
    {
        return $this->container['card_expiration_date_yymm'];
    }

    /**
     * Sets card_expiration_date_yymm
     *
     * @param string|null $card_expiration_date_yymm card_expiration_date_yymm
     *
     * @return self
     */
    public function setCardExpirationDateYymm($card_expiration_date_yymm)
    {
        $this->container['card_expiration_date_yymm'] = $card_expiration_date_yymm;

        return $this;
    }

    /**
     * Gets database_transaction_timeout
     *
     * @return int|null
     */
    public function getDatabaseTransactionTimeout()
    {
        return $this->container['database_transaction_timeout'];
    }

    /**
     * Sets database_transaction_timeout
     *
     * @param int|null $database_transaction_timeout database_transaction_timeout
     *
     * @return self
     */
    public function setDatabaseTransactionTimeout($database_transaction_timeout)
    {
        $this->container['database_transaction_timeout'] = $database_transaction_timeout;

        return $this;
    }

    /**
     * Gets encryption_key_id
     *
     * @return string|null
     */
    public function getEncryptionKeyId()
    {
        return $this->container['encryption_key_id'];
    }

    /**
     * Sets encryption_key_id
     *
     * @param string|null $encryption_key_id encryption_key_id
     *
     * @return self
     */
    public function setEncryptionKeyId($encryption_key_id)
    {
        $this->container['encryption_key_id'] = $encryption_key_id;

        return $this;
    }

    /**
     * Gets is_async
     *
     * @return bool|null
     */
    public function getIsAsync()
    {
        return $this->container['is_async'];
    }

    /**
     * Sets is_async
     *
     * @param bool|null $is_async is_async
     *
     * @return self
     */
    public function setIsAsync($is_async)
    {
        $this->container['is_async'] = $is_async;

        return $this;
    }

    /**
     * Gets pre_auth_time_limit
     *
     * @return string|null
     */
    public function getPreAuthTimeLimit()
    {
        return $this->container['pre_auth_time_limit'];
    }

    /**
     * Sets pre_auth_time_limit
     *
     * @param string|null $pre_auth_time_limit pre_auth_time_limit
     *
     * @return self
     */
    public function setPreAuthTimeLimit($pre_auth_time_limit)
    {
        $this->container['pre_auth_time_limit'] = $pre_auth_time_limit;

        return $this;
    }

    /**
     * Gets send_expiration_date
     *
     * @return bool|null
     */
    public function getSendExpirationDate()
    {
        return $this->container['send_expiration_date'];
    }

    /**
     * Sets send_expiration_date
     *
     * @param bool|null $send_expiration_date send_expiration_date
     *
     * @return self
     */
    public function setSendExpirationDate($send_expiration_date)
    {
        $this->container['send_expiration_date'] = $send_expiration_date;

        return $this;
    }

    /**
     * Gets send_track_data
     *
     * @return bool|null
     */
    public function getSendTrackData()
    {
        return $this->container['send_track_data'];
    }

    /**
     * Sets send_track_data
     *
     * @param bool|null $send_track_data send_track_data
     *
     * @return self
     */
    public function setSendTrackData($send_track_data)
    {
        $this->container['send_track_data'] = $send_track_data;

        return $this;
    }

    /**
     * Gets transaction_timeout_threshold_seconds
     *
     * @return int|null
     */
    public function getTransactionTimeoutThresholdSeconds()
    {
        return $this->container['transaction_timeout_threshold_seconds'];
    }

    /**
     * Sets transaction_timeout_threshold_seconds
     *
     * @param int|null $transaction_timeout_threshold_seconds transaction_timeout_threshold_seconds
     *
     * @return self
     */
    public function setTransactionTimeoutThresholdSeconds($transaction_timeout_threshold_seconds)
    {
        $this->container['transaction_timeout_threshold_seconds'] = $transaction_timeout_threshold_seconds;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string|null
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string|null $transaction_token transaction_token
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


