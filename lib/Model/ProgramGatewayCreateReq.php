<?php
/**
 * ProgramGatewayCreateReq
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProgramGatewayCreateReq Class Doc Comment
 *
 * @category Class
 * @description Contains information relevant to creating a Credit Program Gateway.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProgramGatewayCreateReq implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProgramGatewayCreateReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'basic_auth_password' => 'string',
        'basic_auth_username' => 'string',
        'custom_header' => 'array<string,string>',
        'mtls' => 'bool',
        'name' => 'string',
        'timeout_millis' => 'int',
        'token' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'basic_auth_password' => null,
        'basic_auth_username' => null,
        'custom_header' => null,
        'mtls' => null,
        'name' => null,
        'timeout_millis' => null,
        'token' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'basic_auth_password' => 'basic_auth_password',
        'basic_auth_username' => 'basic_auth_username',
        'custom_header' => 'custom_header',
        'mtls' => 'mtls',
        'name' => 'name',
        'timeout_millis' => 'timeout_millis',
        'token' => 'token',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'basic_auth_password' => 'setBasicAuthPassword',
        'basic_auth_username' => 'setBasicAuthUsername',
        'custom_header' => 'setCustomHeader',
        'mtls' => 'setMtls',
        'name' => 'setName',
        'timeout_millis' => 'setTimeoutMillis',
        'token' => 'setToken',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'basic_auth_password' => 'getBasicAuthPassword',
        'basic_auth_username' => 'getBasicAuthUsername',
        'custom_header' => 'getCustomHeader',
        'mtls' => 'getMtls',
        'name' => 'getName',
        'timeout_millis' => 'getTimeoutMillis',
        'token' => 'getToken',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? true;
        $this->container['basic_auth_password'] = $data['basic_auth_password'] ?? null;
        $this->container['basic_auth_username'] = $data['basic_auth_username'] ?? null;
        $this->container['custom_header'] = $data['custom_header'] ?? null;
        $this->container['mtls'] = $data['mtls'] ?? false;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['timeout_millis'] = $data['timeout_millis'] ?? 2000;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['basic_auth_password'] === null) {
            $invalidProperties[] = "'basic_auth_password' can't be null";
        }
        if ((mb_strlen($this->container['basic_auth_password']) > 50)) {
            $invalidProperties[] = "invalid value for 'basic_auth_password', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['basic_auth_password']) < 20)) {
            $invalidProperties[] = "invalid value for 'basic_auth_password', the character length must be bigger than or equal to 20.";
        }

        if (!preg_match("/(?!^ +$)^.+$/", $this->container['basic_auth_password'])) {
            $invalidProperties[] = "invalid value for 'basic_auth_password', must be conform to the pattern /(?!^ +$)^.+$/.";
        }

        if ($this->container['basic_auth_username'] === null) {
            $invalidProperties[] = "'basic_auth_username' can't be null";
        }
        if ((mb_strlen($this->container['basic_auth_username']) > 50)) {
            $invalidProperties[] = "invalid value for 'basic_auth_username', the character length must be smaller than or equal to 50.";
        }

        if (!preg_match("/(?!^ +$)^.+$/", $this->container['basic_auth_username'])) {
            $invalidProperties[] = "invalid value for 'basic_auth_username', must be conform to the pattern /(?!^ +$)^.+$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['timeout_millis']) && ($this->container['timeout_millis'] > 2000)) {
            $invalidProperties[] = "invalid value for 'timeout_millis', must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['timeout_millis']) && ($this->container['timeout_millis'] < 1)) {
            $invalidProperties[] = "invalid value for 'timeout_millis', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ((mb_strlen($this->container['url']) > 250)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 250.";
        }

        if (!preg_match("/(?!^ +$)^.+$/", $this->container['url'])) {
            $invalidProperties[] = "invalid value for 'url', must be conform to the pattern /(?!^ +$)^.+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates whether the Program Gateway is active.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets basic_auth_password
     *
     * @return string
     */
    public function getBasicAuthPassword()
    {
        return $this->container['basic_auth_password'];
    }

    /**
     * Sets basic_auth_password
     *
     * @param string $basic_auth_password Basic Authentication password for authenticating your environment.
     *
     * @return self
     */
    public function setBasicAuthPassword($basic_auth_password)
    {
        if ((mb_strlen($basic_auth_password) > 50)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_password when calling ProgramGatewayCreateReq., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($basic_auth_password) < 20)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_password when calling ProgramGatewayCreateReq., must be bigger than or equal to 20.');
        }
        if ((!preg_match("/(?!^ +$)^.+$/", $basic_auth_password))) {
            throw new \InvalidArgumentException("invalid value for $basic_auth_password when calling ProgramGatewayCreateReq., must conform to the pattern /(?!^ +$)^.+$/.");
        }

        $this->container['basic_auth_password'] = $basic_auth_password;

        return $this;
    }

    /**
     * Gets basic_auth_username
     *
     * @return string
     */
    public function getBasicAuthUsername()
    {
        return $this->container['basic_auth_username'];
    }

    /**
     * Sets basic_auth_username
     *
     * @param string $basic_auth_username Basic Authentication username for authenticating your environment.
     *
     * @return self
     */
    public function setBasicAuthUsername($basic_auth_username)
    {
        if ((mb_strlen($basic_auth_username) > 50)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_username when calling ProgramGatewayCreateReq., must be smaller than or equal to 50.');
        }
        if ((!preg_match("/(?!^ +$)^.+$/", $basic_auth_username))) {
            throw new \InvalidArgumentException("invalid value for $basic_auth_username when calling ProgramGatewayCreateReq., must conform to the pattern /(?!^ +$)^.+$/.");
        }

        $this->container['basic_auth_username'] = $basic_auth_username;

        return $this;
    }

    /**
     * Gets custom_header
     *
     * @return array<string,string>|null
     */
    public function getCustomHeader()
    {
        return $this->container['custom_header'];
    }

    /**
     * Sets custom_header
     *
     * @param array<string,string>|null $custom_header Additional custom information included in the HTTP header. For example, this might contain security information, along with Basic Authentication, when making a Program Gateway request. Custom headers also appear in the associated webhook's notifications.
     *
     * @return self
     */
    public function setCustomHeader($custom_header)
    {
        $this->container['custom_header'] = $custom_header;

        return $this;
    }

    /**
     * Gets mtls
     *
     * @return bool|null
     */
    public function getMtls()
    {
        return $this->container['mtls'];
    }

    /**
     * Sets mtls
     *
     * @param bool|null $mtls Indicates whether the Program Gateway uses mutual Transport Layer Security (mTLS).
     *
     * @return self
     */
    public function setMtls($mtls)
    {
        $this->container['mtls'] = $mtls;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Program Gateway.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProgramGatewayCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timeout_millis
     *
     * @return int|null
     */
    public function getTimeoutMillis()
    {
        return $this->container['timeout_millis'];
    }

    /**
     * Sets timeout_millis
     *
     * @param int|null $timeout_millis Total timeout for Program Gateway calls, in milliseconds.
     *
     * @return self
     */
    public function setTimeoutMillis($timeout_millis)
    {

        if (!is_null($timeout_millis) && ($timeout_millis > 2000)) {
            throw new \InvalidArgumentException('invalid value for $timeout_millis when calling ProgramGatewayCreateReq., must be smaller than or equal to 2000.');
        }
        if (!is_null($timeout_millis) && ($timeout_millis < 1)) {
            throw new \InvalidArgumentException('invalid value for $timeout_millis when calling ProgramGatewayCreateReq., must be bigger than or equal to 1.');
        }

        $this->container['timeout_millis'] = $timeout_millis;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the Program Gateway.  If you do not include a token, the system generates one automatically. As this token is necessary for use in other calls, it is recommended that you define a simple and easy to remember string rather than letting the system generate a token for you. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling ProgramGatewayCreateReq., must be smaller than or equal to 36.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url URL of the Program Gateway endpoint hosted in your environment and configured to receive authorization requests made by the Marqeta platform. Must be HTTPS.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if ((mb_strlen($url) > 250)) {
            throw new \InvalidArgumentException('invalid length for $url when calling ProgramGatewayCreateReq., must be smaller than or equal to 250.');
        }
        if ((!preg_match("/(?!^ +$)^.+$/", $url))) {
            throw new \InvalidArgumentException("invalid value for $url when calling ProgramGatewayCreateReq., must conform to the pattern /(?!^ +$)^.+$/.");
        }

        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


