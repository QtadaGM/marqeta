<?php
/**
 * RedemptionsResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RedemptionsResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information on a reward redemption.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RedemptionsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RedemptionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'created_time' => '\DateTime',
        'destination' => '\OpenAPI\Client\Model\DestinationType',
        'external_settlement_date_time' => '\DateTime',
        'note' => 'string',
        'receiving_account_token' => 'string',
        'related_reward_entries' => '\OpenAPI\Client\Model\RewardProgramsEntriesResponse[]',
        'reward_program_token' => 'string',
        'sor_reward_token' => 'string',
        'status' => '\OpenAPI\Client\Model\RedemptionStatus',
        'token' => 'string',
        'type' => '\OpenAPI\Client\Model\RedemptionType',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'decimal',
        'created_time' => 'date-time',
        'destination' => null,
        'external_settlement_date_time' => 'date-time',
        'note' => null,
        'receiving_account_token' => null,
        'related_reward_entries' => null,
        'reward_program_token' => null,
        'sor_reward_token' => null,
        'status' => null,
        'token' => null,
        'type' => null,
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'created_time' => 'created_time',
        'destination' => 'destination',
        'external_settlement_date_time' => 'external_settlement_date_time',
        'note' => 'note',
        'receiving_account_token' => 'receiving_account_token',
        'related_reward_entries' => 'related_reward_entries',
        'reward_program_token' => 'reward_program_token',
        'sor_reward_token' => 'sor_reward_token',
        'status' => 'status',
        'token' => 'token',
        'type' => 'type',
        'updated_time' => 'updated_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'created_time' => 'setCreatedTime',
        'destination' => 'setDestination',
        'external_settlement_date_time' => 'setExternalSettlementDateTime',
        'note' => 'setNote',
        'receiving_account_token' => 'setReceivingAccountToken',
        'related_reward_entries' => 'setRelatedRewardEntries',
        'reward_program_token' => 'setRewardProgramToken',
        'sor_reward_token' => 'setSorRewardToken',
        'status' => 'setStatus',
        'token' => 'setToken',
        'type' => 'setType',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'created_time' => 'getCreatedTime',
        'destination' => 'getDestination',
        'external_settlement_date_time' => 'getExternalSettlementDateTime',
        'note' => 'getNote',
        'receiving_account_token' => 'getReceivingAccountToken',
        'related_reward_entries' => 'getRelatedRewardEntries',
        'reward_program_token' => 'getRewardProgramToken',
        'sor_reward_token' => 'getSorRewardToken',
        'status' => 'getStatus',
        'token' => 'getToken',
        'type' => 'getType',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
        $this->container['external_settlement_date_time'] = $data['external_settlement_date_time'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['receiving_account_token'] = $data['receiving_account_token'] ?? null;
        $this->container['related_reward_entries'] = $data['related_reward_entries'] ?? null;
        $this->container['reward_program_token'] = $data['reward_program_token'] ?? null;
        $this->container['sor_reward_token'] = $data['sor_reward_token'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['updated_time'] = $data['updated_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if (!is_null($this->container['receiving_account_token']) && (mb_strlen($this->container['receiving_account_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'receiving_account_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['reward_program_token'] === null) {
            $invalidProperties[] = "'reward_program_token' can't be null";
        }
        if ((mb_strlen($this->container['reward_program_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'reward_program_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['sor_reward_token']) && (mb_strlen($this->container['sor_reward_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'sor_reward_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['updated_time'] === null) {
            $invalidProperties[] = "'updated_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount to redeem.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the reward redemption was created on the Marqeta platform, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \OpenAPI\Client\Model\DestinationType|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \OpenAPI\Client\Model\DestinationType|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets external_settlement_date_time
     *
     * @return \DateTime|null
     */
    public function getExternalSettlementDateTime()
    {
        return $this->container['external_settlement_date_time'];
    }

    /**
     * Sets external_settlement_date_time
     *
     * @param \DateTime|null $external_settlement_date_time Date and time when the reward redemption was settled on your external platform.  This field is returned if you handled the reward redemption outside of Marqeta's credit platform.
     *
     * @return self
     */
    public function setExternalSettlementDateTime($external_settlement_date_time)
    {
        $this->container['external_settlement_date_time'] = $external_settlement_date_time;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note providing information on the reward redemption.
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets receiving_account_token
     *
     * @return string|null
     */
    public function getReceivingAccountToken()
    {
        return $this->container['receiving_account_token'];
    }

    /**
     * Sets receiving_account_token
     *
     * @param string|null $receiving_account_token Unique identifier of the external account receiving the reward redemption. This token is equivalent to the <</core-api/payment-sources, payment source>> token.
     *
     * @return self
     */
    public function setReceivingAccountToken($receiving_account_token)
    {
        if (!is_null($receiving_account_token) && (mb_strlen($receiving_account_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $receiving_account_token when calling RedemptionsResponse., must be smaller than or equal to 36.');
        }

        $this->container['receiving_account_token'] = $receiving_account_token;

        return $this;
    }

    /**
     * Gets related_reward_entries
     *
     * @return \OpenAPI\Client\Model\RewardProgramsEntriesResponse[]|null
     */
    public function getRelatedRewardEntries()
    {
        return $this->container['related_reward_entries'];
    }

    /**
     * Sets related_reward_entries
     *
     * @param \OpenAPI\Client\Model\RewardProgramsEntriesResponse[]|null $related_reward_entries Contains one or more reward entries related to the redemption.
     *
     * @return self
     */
    public function setRelatedRewardEntries($related_reward_entries)
    {
        $this->container['related_reward_entries'] = $related_reward_entries;

        return $this;
    }

    /**
     * Gets reward_program_token
     *
     * @return string
     */
    public function getRewardProgramToken()
    {
        return $this->container['reward_program_token'];
    }

    /**
     * Sets reward_program_token
     *
     * @param string $reward_program_token Unique identifier of the reward program for which to redeem rewards.
     *
     * @return self
     */
    public function setRewardProgramToken($reward_program_token)
    {
        if ((mb_strlen($reward_program_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $reward_program_token when calling RedemptionsResponse., must be smaller than or equal to 36.');
        }

        $this->container['reward_program_token'] = $reward_program_token;

        return $this;
    }

    /**
     * Gets sor_reward_token
     *
     * @return string|null
     */
    public function getSorRewardToken()
    {
        return $this->container['sor_reward_token'];
    }

    /**
     * Sets sor_reward_token
     *
     * @param string|null $sor_reward_token Unique identifier of the system of reward (SOR) reward that was created to represent the reward redemption as a `STATEMENT_CREDIT` on a credit account. The SOR entry is a positive amount that is added to the account balance.
     *
     * @return self
     */
    public function setSorRewardToken($sor_reward_token)
    {
        if (!is_null($sor_reward_token) && (mb_strlen($sor_reward_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $sor_reward_token when calling RedemptionsResponse., must be smaller than or equal to 36.');
        }

        $this->container['sor_reward_token'] = $sor_reward_token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\RedemptionStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\RedemptionStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the reward redemption.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling RedemptionsResponse., must be smaller than or equal to 36.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\RedemptionType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\RedemptionType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime $updated_time Date and time when the reward redemption was last updated on the Marqeta platform, in UTC.
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


