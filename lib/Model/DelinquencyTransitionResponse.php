<?php
/**
 * DelinquencyTransitionResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DelinquencyTransitionResponse Class Doc Comment
 *
 * @category Class
 * @description Contains details of the account&#39;s delinquency state transition.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DelinquencyTransitionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DelinquencyTransitionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_token' => 'string',
        'bucket_count' => 'float',
        'created_time' => '\DateTime',
        'current_due' => 'float',
        'impact_time' => '\DateTime',
        'is_rolled_back' => 'bool',
        'oldest_payment_due_date' => '\DateTime',
        'original_status' => '\OpenAPI\Client\Model\DelinquencyStatus',
        'status' => '\OpenAPI\Client\Model\DelinquencyStatus',
        'token' => 'string',
        'total_due' => 'float',
        'total_past_due' => 'float',
        'transition_trigger_reason' => '\OpenAPI\Client\Model\DelinquencyTransitionTriggerReason',
        'transition_trigger_time' => '\DateTime',
        'updated_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_token' => 'string',
        'bucket_count' => null,
        'created_time' => 'date-time',
        'current_due' => null,
        'impact_time' => 'date-time',
        'is_rolled_back' => null,
        'oldest_payment_due_date' => 'date-time',
        'original_status' => null,
        'status' => null,
        'token' => 'string',
        'total_due' => null,
        'total_past_due' => null,
        'transition_trigger_reason' => null,
        'transition_trigger_time' => 'date-time',
        'updated_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_token' => 'account_token',
        'bucket_count' => 'bucket_count',
        'created_time' => 'created_time',
        'current_due' => 'current_due',
        'impact_time' => 'impact_time',
        'is_rolled_back' => 'is_rolled_back',
        'oldest_payment_due_date' => 'oldest_payment_due_date',
        'original_status' => 'original_status',
        'status' => 'status',
        'token' => 'token',
        'total_due' => 'total_due',
        'total_past_due' => 'total_past_due',
        'transition_trigger_reason' => 'transition_trigger_reason',
        'transition_trigger_time' => 'transition_trigger_time',
        'updated_time' => 'updated_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_token' => 'setAccountToken',
        'bucket_count' => 'setBucketCount',
        'created_time' => 'setCreatedTime',
        'current_due' => 'setCurrentDue',
        'impact_time' => 'setImpactTime',
        'is_rolled_back' => 'setIsRolledBack',
        'oldest_payment_due_date' => 'setOldestPaymentDueDate',
        'original_status' => 'setOriginalStatus',
        'status' => 'setStatus',
        'token' => 'setToken',
        'total_due' => 'setTotalDue',
        'total_past_due' => 'setTotalPastDue',
        'transition_trigger_reason' => 'setTransitionTriggerReason',
        'transition_trigger_time' => 'setTransitionTriggerTime',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_token' => 'getAccountToken',
        'bucket_count' => 'getBucketCount',
        'created_time' => 'getCreatedTime',
        'current_due' => 'getCurrentDue',
        'impact_time' => 'getImpactTime',
        'is_rolled_back' => 'getIsRolledBack',
        'oldest_payment_due_date' => 'getOldestPaymentDueDate',
        'original_status' => 'getOriginalStatus',
        'status' => 'getStatus',
        'token' => 'getToken',
        'total_due' => 'getTotalDue',
        'total_past_due' => 'getTotalPastDue',
        'transition_trigger_reason' => 'getTransitionTriggerReason',
        'transition_trigger_time' => 'getTransitionTriggerTime',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['bucket_count'] = $data['bucket_count'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['current_due'] = $data['current_due'] ?? null;
        $this->container['impact_time'] = $data['impact_time'] ?? null;
        $this->container['is_rolled_back'] = $data['is_rolled_back'] ?? null;
        $this->container['oldest_payment_due_date'] = $data['oldest_payment_due_date'] ?? null;
        $this->container['original_status'] = $data['original_status'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['total_due'] = $data['total_due'] ?? null;
        $this->container['total_past_due'] = $data['total_past_due'] ?? null;
        $this->container['transition_trigger_reason'] = $data['transition_trigger_reason'] ?? null;
        $this->container['transition_trigger_time'] = $data['transition_trigger_time'] ?? null;
        $this->container['updated_time'] = $data['updated_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['impact_time'] === null) {
            $invalidProperties[] = "'impact_time' can't be null";
        }
        if ($this->container['is_rolled_back'] === null) {
            $invalidProperties[] = "'is_rolled_back' can't be null";
        }
        if ($this->container['original_status'] === null) {
            $invalidProperties[] = "'original_status' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['transition_trigger_reason'] === null) {
            $invalidProperties[] = "'transition_trigger_reason' can't be null";
        }
        if ($this->container['transition_trigger_time'] === null) {
            $invalidProperties[] = "'transition_trigger_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets bucket_count
     *
     * @return float|null
     */
    public function getBucketCount()
    {
        return $this->container['bucket_count'];
    }

    /**
     * Sets bucket_count
     *
     * @param float|null $bucket_count Number of buckets for the account after the triggering event occurred.
     *
     * @return self
     */
    public function setBucketCount($bucket_count)
    {
        $this->container['bucket_count'] = $bucket_count;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the delinquency state transition was created on Marqeta's credit platform, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets current_due
     *
     * @return float|null
     */
    public function getCurrentDue()
    {
        return $this->container['current_due'];
    }

    /**
     * Sets current_due
     *
     * @param float|null $current_due Current amount that is due after the triggering event occurred.  Equivalent to `current_due` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
     *
     * @return self
     */
    public function setCurrentDue($current_due)
    {
        $this->container['current_due'] = $current_due;

        return $this;
    }

    /**
     * Gets impact_time
     *
     * @return \DateTime
     */
    public function getImpactTime()
    {
        return $this->container['impact_time'];
    }

    /**
     * Sets impact_time
     *
     * @param \DateTime $impact_time Date and time when the triggering event impacted the account, in UTC.
     *
     * @return self
     */
    public function setImpactTime($impact_time)
    {
        $this->container['impact_time'] = $impact_time;

        return $this;
    }

    /**
     * Gets is_rolled_back
     *
     * @return bool
     */
    public function getIsRolledBack()
    {
        return $this->container['is_rolled_back'];
    }

    /**
     * Sets is_rolled_back
     *
     * @param bool $is_rolled_back A value of `true` indicates that the system invalidated and rolled back the delinquency transition.  This is a temporary field that allows Marqeta to handle occasional cases of out-of-order processing. This can occur when two delinquency state transition webhooks are sent near-simultaneously.  For example, if a credit and a payment that bring an account current are made around the same time, two delinquency state transitions are sent very close together. In these cases, one of the transitions is rolled back and invalidated. For the transition that is rolled back, `is_rolled_back` is `true` and the transition should be ignored.  This field is temporary and to be deprecated when out-of-order processing is addressed in a future release.
     *
     * @return self
     */
    public function setIsRolledBack($is_rolled_back)
    {
        $this->container['is_rolled_back'] = $is_rolled_back;

        return $this;
    }

    /**
     * Gets oldest_payment_due_date
     *
     * @return \DateTime|null
     */
    public function getOldestPaymentDueDate()
    {
        return $this->container['oldest_payment_due_date'];
    }

    /**
     * Sets oldest_payment_due_date
     *
     * @param \DateTime|null $oldest_payment_due_date Payment due date of the account's oldest delinquency bucket, in UTC.  Useful when used with the delinquency state transition's `created_time` to determine the total number of days a payment is past due.
     *
     * @return self
     */
    public function setOldestPaymentDueDate($oldest_payment_due_date)
    {
        $this->container['oldest_payment_due_date'] = $oldest_payment_due_date;

        return $this;
    }

    /**
     * Gets original_status
     *
     * @return \OpenAPI\Client\Model\DelinquencyStatus
     */
    public function getOriginalStatus()
    {
        return $this->container['original_status'];
    }

    /**
     * Sets original_status
     *
     * @param \OpenAPI\Client\Model\DelinquencyStatus $original_status original_status
     *
     * @return self
     */
    public function setOriginalStatus($original_status)
    {
        $this->container['original_status'] = $original_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\DelinquencyStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\DelinquencyStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the delinquency state transition.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets total_due
     *
     * @return float|null
     */
    public function getTotalDue()
    {
        return $this->container['total_due'];
    }

    /**
     * Sets total_due
     *
     * @param float|null $total_due Total amount that is due after the triggering event occurred; the sum of `total_past_due` and `current_due`.  Equivalent to `total_due` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
     *
     * @return self
     */
    public function setTotalDue($total_due)
    {
        $this->container['total_due'] = $total_due;

        return $this;
    }

    /**
     * Gets total_past_due
     *
     * @return float|null
     */
    public function getTotalPastDue()
    {
        return $this->container['total_past_due'];
    }

    /**
     * Sets total_past_due
     *
     * @param float|null $total_past_due Total amount that is past due after the triggering event occurred.  Equivalent to `past_due_carried_forward` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
     *
     * @return self
     */
    public function setTotalPastDue($total_past_due)
    {
        $this->container['total_past_due'] = $total_past_due;

        return $this;
    }

    /**
     * Gets transition_trigger_reason
     *
     * @return \OpenAPI\Client\Model\DelinquencyTransitionTriggerReason
     */
    public function getTransitionTriggerReason()
    {
        return $this->container['transition_trigger_reason'];
    }

    /**
     * Sets transition_trigger_reason
     *
     * @param \OpenAPI\Client\Model\DelinquencyTransitionTriggerReason $transition_trigger_reason transition_trigger_reason
     *
     * @return self
     */
    public function setTransitionTriggerReason($transition_trigger_reason)
    {
        $this->container['transition_trigger_reason'] = $transition_trigger_reason;

        return $this;
    }

    /**
     * Gets transition_trigger_time
     *
     * @return \DateTime
     */
    public function getTransitionTriggerTime()
    {
        return $this->container['transition_trigger_time'];
    }

    /**
     * Sets transition_trigger_time
     *
     * @param \DateTime $transition_trigger_time Date and time when the triggering event caused the account's delinquency state to transition, in UTC.  For <</core-api/credit-account-journal-entries, journal entries>>, equivalent to `request_time`. For <</core-api/credit-account-statements#listStatementJournalEntries, statement journal entries>>, equivalent to `impact_time`,
     *
     * @return self
     */
    public function setTransitionTriggerTime($transition_trigger_time)
    {
        $this->container['transition_trigger_time'] = $transition_trigger_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Date and time when the delinquency state transition was last updated on Marqeta's credit platform, in UTC.
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


