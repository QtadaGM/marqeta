<?php
/**
 * DecisionsResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DecisionsResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information on the decision model returned by the issuing bank if a decision has been rendered.  Returned when retrieving an application after a decision has been rendered.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DecisionsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DecisionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adverse_action_template_code' => 'string',
        'card_product_level' => 'string',
        'created_date' => '\DateTime',
        'credit_bureau' => '\OpenAPI\Client\Model\CreditBureau',
        'credit_limit' => 'int',
        'credit_score' => 'int',
        'credit_score_date' => '\DateTime',
        'decision_date' => '\DateTime',
        'denial_reasons' => 'string[]',
        'expire_date' => '\DateTime',
        'margin' => 'float',
        'prime_rate' => 'float',
        'purchase_apr' => 'float',
        'received_best_rate' => 'bool',
        'score_factors' => 'string[]',
        'score_range' => 'string',
        'application_token' => 'string',
        'decision_id' => 'string',
        'status' => 'string',
        'submitted_date_time' => '\DateTime',
        'token' => 'string',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adverse_action_template_code' => null,
        'card_product_level' => null,
        'created_date' => 'date-time',
        'credit_bureau' => null,
        'credit_limit' => 'int32',
        'credit_score' => 'int32',
        'credit_score_date' => 'date',
        'decision_date' => 'date-time',
        'denial_reasons' => null,
        'expire_date' => 'date',
        'margin' => 'decimal',
        'prime_rate' => 'decimal',
        'purchase_apr' => 'decimal',
        'received_best_rate' => null,
        'score_factors' => null,
        'score_range' => null,
        'application_token' => null,
        'decision_id' => null,
        'status' => null,
        'submitted_date_time' => 'date-time',
        'token' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adverse_action_template_code' => 'adverse_action_template_code',
        'card_product_level' => 'card_product_level',
        'created_date' => 'created_date',
        'credit_bureau' => 'credit_bureau',
        'credit_limit' => 'credit_limit',
        'credit_score' => 'credit_score',
        'credit_score_date' => 'credit_score_date',
        'decision_date' => 'decision_date',
        'denial_reasons' => 'denial_reasons',
        'expire_date' => 'expire_date',
        'margin' => 'margin',
        'prime_rate' => 'prime_rate',
        'purchase_apr' => 'purchase_apr',
        'received_best_rate' => 'received_best_rate',
        'score_factors' => 'score_factors',
        'score_range' => 'score_range',
        'application_token' => 'application_token',
        'decision_id' => 'decision_id',
        'status' => 'status',
        'submitted_date_time' => 'submitted_date_time',
        'token' => 'token',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adverse_action_template_code' => 'setAdverseActionTemplateCode',
        'card_product_level' => 'setCardProductLevel',
        'created_date' => 'setCreatedDate',
        'credit_bureau' => 'setCreditBureau',
        'credit_limit' => 'setCreditLimit',
        'credit_score' => 'setCreditScore',
        'credit_score_date' => 'setCreditScoreDate',
        'decision_date' => 'setDecisionDate',
        'denial_reasons' => 'setDenialReasons',
        'expire_date' => 'setExpireDate',
        'margin' => 'setMargin',
        'prime_rate' => 'setPrimeRate',
        'purchase_apr' => 'setPurchaseApr',
        'received_best_rate' => 'setReceivedBestRate',
        'score_factors' => 'setScoreFactors',
        'score_range' => 'setScoreRange',
        'application_token' => 'setApplicationToken',
        'decision_id' => 'setDecisionId',
        'status' => 'setStatus',
        'submitted_date_time' => 'setSubmittedDateTime',
        'token' => 'setToken',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adverse_action_template_code' => 'getAdverseActionTemplateCode',
        'card_product_level' => 'getCardProductLevel',
        'created_date' => 'getCreatedDate',
        'credit_bureau' => 'getCreditBureau',
        'credit_limit' => 'getCreditLimit',
        'credit_score' => 'getCreditScore',
        'credit_score_date' => 'getCreditScoreDate',
        'decision_date' => 'getDecisionDate',
        'denial_reasons' => 'getDenialReasons',
        'expire_date' => 'getExpireDate',
        'margin' => 'getMargin',
        'prime_rate' => 'getPrimeRate',
        'purchase_apr' => 'getPurchaseApr',
        'received_best_rate' => 'getReceivedBestRate',
        'score_factors' => 'getScoreFactors',
        'score_range' => 'getScoreRange',
        'application_token' => 'getApplicationToken',
        'decision_id' => 'getDecisionId',
        'status' => 'getStatus',
        'submitted_date_time' => 'getSubmittedDateTime',
        'token' => 'getToken',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_PRODUCT_LEVEL_PREMIUM = 'PREMIUM';
    const CARD_PRODUCT_LEVEL_TRADITIONAL = 'TRADITIONAL';
    const STATUS_SUBMITTED = 'SUBMITTED';
    const STATUS_DECISIONING = 'DECISIONING';
    const STATUS_MANUAL_REVIEW = 'MANUAL_REVIEW';
    const STATUS_APPROVED = 'APPROVED';
    const STATUS_DECLINED = 'DECLINED';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_ERROR = 'ERROR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardProductLevelAllowableValues()
    {
        return [
            self::CARD_PRODUCT_LEVEL_PREMIUM,
            self::CARD_PRODUCT_LEVEL_TRADITIONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUBMITTED,
            self::STATUS_DECISIONING,
            self::STATUS_MANUAL_REVIEW,
            self::STATUS_APPROVED,
            self::STATUS_DECLINED,
            self::STATUS_EXPIRED,
            self::STATUS_REJECTED,
            self::STATUS_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adverse_action_template_code'] = $data['adverse_action_template_code'] ?? null;
        $this->container['card_product_level'] = $data['card_product_level'] ?? null;
        $this->container['created_date'] = $data['created_date'] ?? null;
        $this->container['credit_bureau'] = $data['credit_bureau'] ?? null;
        $this->container['credit_limit'] = $data['credit_limit'] ?? null;
        $this->container['credit_score'] = $data['credit_score'] ?? null;
        $this->container['credit_score_date'] = $data['credit_score_date'] ?? null;
        $this->container['decision_date'] = $data['decision_date'] ?? null;
        $this->container['denial_reasons'] = $data['denial_reasons'] ?? null;
        $this->container['expire_date'] = $data['expire_date'] ?? null;
        $this->container['margin'] = $data['margin'] ?? null;
        $this->container['prime_rate'] = $data['prime_rate'] ?? null;
        $this->container['purchase_apr'] = $data['purchase_apr'] ?? null;
        $this->container['received_best_rate'] = $data['received_best_rate'] ?? null;
        $this->container['score_factors'] = $data['score_factors'] ?? null;
        $this->container['score_range'] = $data['score_range'] ?? null;
        $this->container['application_token'] = $data['application_token'] ?? null;
        $this->container['decision_id'] = $data['decision_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['submitted_date_time'] = $data['submitted_date_time'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCardProductLevelAllowableValues();
        if (!is_null($this->container['card_product_level']) && !in_array($this->container['card_product_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_product_level', must be one of '%s'",
                $this->container['card_product_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['application_token'] === null) {
            $invalidProperties[] = "'application_token' can't be null";
        }
        if ($this->container['decision_id'] === null) {
            $invalidProperties[] = "'decision_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['submitted_date_time'] === null) {
            $invalidProperties[] = "'submitted_date_time' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['user_token'] === null) {
            $invalidProperties[] = "'user_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adverse_action_template_code
     *
     * @return string|null
     */
    public function getAdverseActionTemplateCode()
    {
        return $this->container['adverse_action_template_code'];
    }

    /**
     * Sets adverse_action_template_code
     *
     * @param string|null $adverse_action_template_code Indicates the version of the Notice of Adverse Action (NOAA) template used. Can have these possible values:  * `AA0` - score denial with score disclosure * `AA1` - individual reason with score disclosure * `AA2` - individual reason without score disclosure * `AA3` - locked and frozen * `AA4` - fraud related
     *
     * @return self
     */
    public function setAdverseActionTemplateCode($adverse_action_template_code)
    {
        $this->container['adverse_action_template_code'] = $adverse_action_template_code;

        return $this;
    }

    /**
     * Gets card_product_level
     *
     * @return string|null
     */
    public function getCardProductLevel()
    {
        return $this->container['card_product_level'];
    }

    /**
     * Sets card_product_level
     *
     * @param string|null $card_product_level The tier of the card product.
     *
     * @return self
     */
    public function setCardProductLevel($card_product_level)
    {
        $allowedValues = $this->getCardProductLevelAllowableValues();
        if (!is_null($card_product_level) && !in_array($card_product_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_product_level', must be one of '%s'",
                    $card_product_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_product_level'] = $card_product_level;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date Date and time when the decision model was created on the Marqeta platform, in UTC.
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets credit_bureau
     *
     * @return \OpenAPI\Client\Model\CreditBureau|null
     */
    public function getCreditBureau()
    {
        return $this->container['credit_bureau'];
    }

    /**
     * Sets credit_bureau
     *
     * @param \OpenAPI\Client\Model\CreditBureau|null $credit_bureau credit_bureau
     *
     * @return self
     */
    public function setCreditBureau($credit_bureau)
    {
        $this->container['credit_bureau'] = $credit_bureau;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return int|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param int|null $credit_limit The maximum line of credit extended to the user, also the maximum balance the credit account can carry.
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets credit_score
     *
     * @return int|null
     */
    public function getCreditScore()
    {
        return $this->container['credit_score'];
    }

    /**
     * Sets credit_score
     *
     * @param int|null $credit_score The user's credit score.
     *
     * @return self
     */
    public function setCreditScore($credit_score)
    {
        $this->container['credit_score'] = $credit_score;

        return $this;
    }

    /**
     * Gets credit_score_date
     *
     * @return \DateTime|null
     */
    public function getCreditScoreDate()
    {
        return $this->container['credit_score_date'];
    }

    /**
     * Sets credit_score_date
     *
     * @param \DateTime|null $credit_score_date Date and time when the credit score went into effect.
     *
     * @return self
     */
    public function setCreditScoreDate($credit_score_date)
    {
        $this->container['credit_score_date'] = $credit_score_date;

        return $this;
    }

    /**
     * Gets decision_date
     *
     * @return \DateTime|null
     */
    public function getDecisionDate()
    {
        return $this->container['decision_date'];
    }

    /**
     * Sets decision_date
     *
     * @param \DateTime|null $decision_date Date and time when the decision on the application was rendered, in UTC.
     *
     * @return self
     */
    public function setDecisionDate($decision_date)
    {
        $this->container['decision_date'] = $decision_date;

        return $this;
    }

    /**
     * Gets denial_reasons
     *
     * @return string[]|null
     */
    public function getDenialReasons()
    {
        return $this->container['denial_reasons'];
    }

    /**
     * Sets denial_reasons
     *
     * @param string[]|null $denial_reasons An array of reasons that explain why the application was declined.
     *
     * @return self
     */
    public function setDenialReasons($denial_reasons)
    {
        $this->container['denial_reasons'] = $denial_reasons;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return \DateTime|null
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param \DateTime|null $expire_date Date when the decision model expires.
     *
     * @return self
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float|null $margin Number of percentage points added to the prime rate, used to calculate the purchase APR.
     *
     * @return self
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets prime_rate
     *
     * @return float|null
     */
    public function getPrimeRate()
    {
        return $this->container['prime_rate'];
    }

    /**
     * Sets prime_rate
     *
     * @param float|null $prime_rate The current prime rate set by the Fed.
     *
     * @return self
     */
    public function setPrimeRate($prime_rate)
    {
        $this->container['prime_rate'] = $prime_rate;

        return $this;
    }

    /**
     * Gets purchase_apr
     *
     * @return float|null
     */
    public function getPurchaseApr()
    {
        return $this->container['purchase_apr'];
    }

    /**
     * Sets purchase_apr
     *
     * @param float|null $purchase_apr The purchase APR approved for the user.
     *
     * @return self
     */
    public function setPurchaseApr($purchase_apr)
    {
        $this->container['purchase_apr'] = $purchase_apr;

        return $this;
    }

    /**
     * Gets received_best_rate
     *
     * @return bool|null
     */
    public function getReceivedBestRate()
    {
        return $this->container['received_best_rate'];
    }

    /**
     * Sets received_best_rate
     *
     * @param bool|null $received_best_rate A value of `true` indicates that the user received the credit product's best APR.  If `false`, you must display to the user the following: `score_factors`, `credit_score`, `credit_score_date`, `credit_bureau`, `score_range`.
     *
     * @return self
     */
    public function setReceivedBestRate($received_best_rate)
    {
        $this->container['received_best_rate'] = $received_best_rate;

        return $this;
    }

    /**
     * Gets score_factors
     *
     * @return string[]|null
     */
    public function getScoreFactors()
    {
        return $this->container['score_factors'];
    }

    /**
     * Sets score_factors
     *
     * @param string[]|null $score_factors Factors that the bureau used to determine the user's credit score.
     *
     * @return self
     */
    public function setScoreFactors($score_factors)
    {
        $this->container['score_factors'] = $score_factors;

        return $this;
    }

    /**
     * Gets score_range
     *
     * @return string|null
     */
    public function getScoreRange()
    {
        return $this->container['score_range'];
    }

    /**
     * Sets score_range
     *
     * @param string|null $score_range The range in which the user's credit score falls.
     *
     * @return self
     */
    public function setScoreRange($score_range)
    {
        $this->container['score_range'] = $score_range;

        return $this;
    }

    /**
     * Gets application_token
     *
     * @return string
     */
    public function getApplicationToken()
    {
        return $this->container['application_token'];
    }

    /**
     * Sets application_token
     *
     * @param string $application_token Unique identifier of the application.
     *
     * @return self
     */
    public function setApplicationToken($application_token)
    {
        $this->container['application_token'] = $application_token;

        return $this;
    }

    /**
     * Gets decision_id
     *
     * @return string
     */
    public function getDecisionId()
    {
        return $this->container['decision_id'];
    }

    /**
     * Sets decision_id
     *
     * @param string $decision_id Unique identifier of the decision made based on the decision model.  See `decision_model.status` for the current state of the application.
     *
     * @return self
     */
    public function setDecisionId($decision_id)
    {
        $this->container['decision_id'] = $decision_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the decision on the application.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets submitted_date_time
     *
     * @return \DateTime
     */
    public function getSubmittedDateTime()
    {
        return $this->container['submitted_date_time'];
    }

    /**
     * Sets submitted_date_time
     *
     * @param \DateTime $submitted_date_time Date and time when the decision was submitted, in UTC.
     *
     * @return self
     */
    public function setSubmittedDateTime($submitted_date_time)
    {
        $this->container['submitted_date_time'] = $submitted_date_time;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the decision model.  See `decision_model.status` for the current state of the application.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string $user_token Unique identifier of the applicant, the user applying for a credit account.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


