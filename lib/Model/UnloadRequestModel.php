<?php
/**
 * UnloadRequestModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UnloadRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UnloadRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'unload_request_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'funding_source_address_token' => 'string',
        'memo' => 'string',
        'original_order_token' => 'string',
        'tags' => 'string',
        'token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'funding_source_address_token' => null,
        'memo' => null,
        'original_order_token' => null,
        'tags' => null,
        'token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'funding_source_address_token' => 'funding_source_address_token',
        'memo' => 'memo',
        'original_order_token' => 'original_order_token',
        'tags' => 'tags',
        'token' => 'token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'funding_source_address_token' => 'setFundingSourceAddressToken',
        'memo' => 'setMemo',
        'original_order_token' => 'setOriginalOrderToken',
        'tags' => 'setTags',
        'token' => 'setToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'funding_source_address_token' => 'getFundingSourceAddressToken',
        'memo' => 'getMemo',
        'original_order_token' => 'getOriginalOrderToken',
        'tags' => 'getTags',
        'token' => 'getToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['funding_source_address_token'] = $data['funding_source_address_token'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['original_order_token'] = $data['original_order_token'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (!is_null($this->container['funding_source_address_token']) && (mb_strlen($this->container['funding_source_address_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'funding_source_address_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['funding_source_address_token']) && (mb_strlen($this->container['funding_source_address_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'funding_source_address_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 99)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 0)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['original_order_token'] === null) {
            $invalidProperties[] = "'original_order_token' can't be null";
        }
        if ((mb_strlen($this->container['original_order_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'original_order_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['original_order_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'original_order_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) < 0)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of funds to return to the funding source.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets funding_source_address_token
     *
     * @return string|null
     */
    public function getFundingSourceAddressToken()
    {
        return $this->container['funding_source_address_token'];
    }

    /**
     * Sets funding_source_address_token
     *
     * @param string|null $funding_source_address_token Unique identifier of the funding source to use for this GPA unload order.  Send a `GET` request to `/fundingsources/addresses/user/{token}` to retrieve addresses for a specific user.
     *
     * @return self
     */
    public function setFundingSourceAddressToken($funding_source_address_token)
    {
        if (!is_null($funding_source_address_token) && (mb_strlen($funding_source_address_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $funding_source_address_token when calling UnloadRequestModel., must be smaller than or equal to 36.');
        }
        if (!is_null($funding_source_address_token) && (mb_strlen($funding_source_address_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $funding_source_address_token when calling UnloadRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['funding_source_address_token'] = $funding_source_address_token;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Additional descriptive text about the GPA unload.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (!is_null($memo) && (mb_strlen($memo) > 99)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling UnloadRequestModel., must be smaller than or equal to 99.');
        }
        if (!is_null($memo) && (mb_strlen($memo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling UnloadRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets original_order_token
     *
     * @return string
     */
    public function getOriginalOrderToken()
    {
        return $this->container['original_order_token'];
    }

    /**
     * Sets original_order_token
     *
     * @param string $original_order_token Unique identifier of the original GPA order.
     *
     * @return self
     */
    public function setOriginalOrderToken($original_order_token)
    {
        if ((mb_strlen($original_order_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $original_order_token when calling UnloadRequestModel., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($original_order_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original_order_token when calling UnloadRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['original_order_token'] = $original_order_token;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Comma-delimited list of tags describing the GPA unload order.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling UnloadRequestModel., must be smaller than or equal to 255.');
        }
        if (!is_null($tags) && (mb_strlen($tags) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling UnloadRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the GPA unload order.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling UnloadRequestModel., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling UnloadRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


