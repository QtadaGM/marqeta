<?php
/**
 * WebhookConfigModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WebhookConfigModel Class Doc Comment
 *
 * @category Class
 * @description Contains the configuration information for the webhook.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WebhookConfigModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhook_config_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'basic_auth_password' => 'string',
        'basic_auth_username' => 'string',
        'custom_header' => 'array<string,string>',
        'secret' => 'string',
        'url' => 'string',
        'use_mtls' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'basic_auth_password' => null,
        'basic_auth_username' => null,
        'custom_header' => null,
        'secret' => null,
        'url' => null,
        'use_mtls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basic_auth_password' => 'basic_auth_password',
        'basic_auth_username' => 'basic_auth_username',
        'custom_header' => 'custom_header',
        'secret' => 'secret',
        'url' => 'url',
        'use_mtls' => 'use_mtls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basic_auth_password' => 'setBasicAuthPassword',
        'basic_auth_username' => 'setBasicAuthUsername',
        'custom_header' => 'setCustomHeader',
        'secret' => 'setSecret',
        'url' => 'setUrl',
        'use_mtls' => 'setUseMtls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basic_auth_password' => 'getBasicAuthPassword',
        'basic_auth_username' => 'getBasicAuthUsername',
        'custom_header' => 'getCustomHeader',
        'secret' => 'getSecret',
        'url' => 'getUrl',
        'use_mtls' => 'getUseMtls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['basic_auth_password'] = $data['basic_auth_password'] ?? null;
        $this->container['basic_auth_username'] = $data['basic_auth_username'] ?? null;
        $this->container['custom_header'] = $data['custom_header'] ?? null;
        $this->container['secret'] = $data['secret'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['use_mtls'] = $data['use_mtls'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['basic_auth_password'] === null) {
            $invalidProperties[] = "'basic_auth_password' can't be null";
        }
        if ((mb_strlen($this->container['basic_auth_password']) > 50)) {
            $invalidProperties[] = "invalid value for 'basic_auth_password', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['basic_auth_password']) < 20)) {
            $invalidProperties[] = "invalid value for 'basic_auth_password', the character length must be bigger than or equal to 20.";
        }

        if ($this->container['basic_auth_username'] === null) {
            $invalidProperties[] = "'basic_auth_username' can't be null";
        }
        if ((mb_strlen($this->container['basic_auth_username']) > 50)) {
            $invalidProperties[] = "invalid value for 'basic_auth_username', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['basic_auth_username']) < 1)) {
            $invalidProperties[] = "invalid value for 'basic_auth_username', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['secret']) && (mb_strlen($this->container['secret']) > 50)) {
            $invalidProperties[] = "invalid value for 'secret', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['secret']) && (mb_strlen($this->container['secret']) < 20)) {
            $invalidProperties[] = "invalid value for 'secret', the character length must be bigger than or equal to 20.";
        }

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ((mb_strlen($this->container['url']) > 255)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['url']) < 1)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basic_auth_password
     *
     * @return string
     */
    public function getBasicAuthPassword()
    {
        return $this->container['basic_auth_password'];
    }

    /**
     * Sets basic_auth_password
     *
     * @param string $basic_auth_password Password for accessing your webhook endpoint.
     *
     * @return self
     */
    public function setBasicAuthPassword($basic_auth_password)
    {
        if ((mb_strlen($basic_auth_password) > 50)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_password when calling WebhookConfigModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($basic_auth_password) < 20)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_password when calling WebhookConfigModel., must be bigger than or equal to 20.');
        }

        $this->container['basic_auth_password'] = $basic_auth_password;

        return $this;
    }

    /**
     * Gets basic_auth_username
     *
     * @return string
     */
    public function getBasicAuthUsername()
    {
        return $this->container['basic_auth_username'];
    }

    /**
     * Sets basic_auth_username
     *
     * @param string $basic_auth_username Username for accessing your webhook endpoint.
     *
     * @return self
     */
    public function setBasicAuthUsername($basic_auth_username)
    {
        if ((mb_strlen($basic_auth_username) > 50)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_username when calling WebhookConfigModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($basic_auth_username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $basic_auth_username when calling WebhookConfigModel., must be bigger than or equal to 1.');
        }

        $this->container['basic_auth_username'] = $basic_auth_username;

        return $this;
    }

    /**
     * Gets custom_header
     *
     * @return array<string,string>|null
     */
    public function getCustomHeader()
    {
        return $this->container['custom_header'];
    }

    /**
     * Sets custom_header
     *
     * @param array<string,string>|null $custom_header Custom headers to be passed along with the request.
     *
     * @return self
     */
    public function setCustomHeader($custom_header)
    {
        $this->container['custom_header'] = $custom_header;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret Randomly chosen string used for implementing HMAC-SHA1.  HMAC-SHA1 provides an added layer of security by authenticating the message and validating message integrity. Using this functionality requires that your webhook endpoint verify the message signature. For information about implementing this functionality, see <</developer-guides/signature-verification, Signature Verification>>.
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (!is_null($secret) && (mb_strlen($secret) > 50)) {
            throw new \InvalidArgumentException('invalid length for $secret when calling WebhookConfigModel., must be smaller than or equal to 50.');
        }
        if (!is_null($secret) && (mb_strlen($secret) < 20)) {
            throw new \InvalidArgumentException('invalid length for $secret when calling WebhookConfigModel., must be bigger than or equal to 20.');
        }

        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url URL of your webhook endpoint.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if ((mb_strlen($url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $url when calling WebhookConfigModel., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $url when calling WebhookConfigModel., must be bigger than or equal to 1.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets use_mtls
     *
     * @return bool|null
     */
    public function getUseMtls()
    {
        return $this->container['use_mtls'];
    }

    /**
     * Sets use_mtls
     *
     * @param bool|null $use_mtls Set to `true` to use MTLS for the webhook.
     *
     * @return self
     */
    public function setUseMtls($use_mtls)
    {
        $this->container['use_mtls'] = $use_mtls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


