<?php
/**
 * AccountAdjustmentResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountAdjustmentResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information returned for account adjustment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountAdjustmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountAdjustmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_token' => 'string',
        'adjustment_detail_object' => 'object',
        'amount' => 'float',
        'created_time' => '\DateTime',
        'currency_code' => '\OpenAPI\Client\Model\CurrencyCode',
        'description' => 'string',
        'detail_token' => 'string',
        'external_adjustment_id' => 'string',
        'note' => 'string',
        'original_ledger_entry_token' => 'string',
        'reason' => 'string',
        'related_detail_object' => 'object',
        'related_detail_token' => 'string',
        'token' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_token' => null,
        'adjustment_detail_object' => null,
        'amount' => null,
        'created_time' => 'date-time',
        'currency_code' => null,
        'description' => null,
        'detail_token' => null,
        'external_adjustment_id' => 'uuid',
        'note' => null,
        'original_ledger_entry_token' => 'uuid',
        'reason' => null,
        'related_detail_object' => null,
        'related_detail_token' => null,
        'token' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_token' => 'account_token',
        'adjustment_detail_object' => 'adjustment_detail_object',
        'amount' => 'amount',
        'created_time' => 'created_time',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'detail_token' => 'detail_token',
        'external_adjustment_id' => 'external_adjustment_id',
        'note' => 'note',
        'original_ledger_entry_token' => 'original_ledger_entry_token',
        'reason' => 'reason',
        'related_detail_object' => 'related_detail_object',
        'related_detail_token' => 'related_detail_token',
        'token' => 'token',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_token' => 'setAccountToken',
        'adjustment_detail_object' => 'setAdjustmentDetailObject',
        'amount' => 'setAmount',
        'created_time' => 'setCreatedTime',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'detail_token' => 'setDetailToken',
        'external_adjustment_id' => 'setExternalAdjustmentId',
        'note' => 'setNote',
        'original_ledger_entry_token' => 'setOriginalLedgerEntryToken',
        'reason' => 'setReason',
        'related_detail_object' => 'setRelatedDetailObject',
        'related_detail_token' => 'setRelatedDetailToken',
        'token' => 'setToken',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_token' => 'getAccountToken',
        'adjustment_detail_object' => 'getAdjustmentDetailObject',
        'amount' => 'getAmount',
        'created_time' => 'getCreatedTime',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'detail_token' => 'getDetailToken',
        'external_adjustment_id' => 'getExternalAdjustmentId',
        'note' => 'getNote',
        'original_ledger_entry_token' => 'getOriginalLedgerEntryToken',
        'reason' => 'getReason',
        'related_detail_object' => 'getRelatedDetailObject',
        'related_detail_token' => 'getRelatedDetailToken',
        'token' => 'getToken',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REASON_DISPUTE = 'DISPUTE';
    const REASON_DISPUTE_RESOLUTION = 'DISPUTE_RESOLUTION';
    const REASON_RETURNED_OR_CANCELED_PAYMENT = 'RETURNED_OR_CANCELED_PAYMENT';
    const REASON_OTHER = 'OTHER';
    const TYPE_PURCHASE = 'PURCHASE';
    const TYPE_FEE = 'FEE';
    const TYPE_REWARD = 'REWARD';
    const TYPE_INTEREST = 'INTEREST';
    const TYPE_GENERAL = 'GENERAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_DISPUTE,
            self::REASON_DISPUTE_RESOLUTION,
            self::REASON_RETURNED_OR_CANCELED_PAYMENT,
            self::REASON_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PURCHASE,
            self::TYPE_FEE,
            self::TYPE_REWARD,
            self::TYPE_INTEREST,
            self::TYPE_GENERAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['adjustment_detail_object'] = $data['adjustment_detail_object'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['detail_token'] = $data['detail_token'] ?? null;
        $this->container['external_adjustment_id'] = $data['external_adjustment_id'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['original_ledger_entry_token'] = $data['original_ledger_entry_token'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
        $this->container['related_detail_object'] = $data['related_detail_object'] ?? null;
        $this->container['related_detail_token'] = $data['related_detail_token'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ((mb_strlen($this->container['account_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['detail_token']) && (mb_strlen($this->container['detail_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'detail_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reason', must be one of '%s'",
                $this->container['reason'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['related_detail_token']) && (mb_strlen($this->container['related_detail_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'related_detail_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account on which the adjustment was made.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        if ((mb_strlen($account_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_token when calling AccountAdjustmentResponse., must be smaller than or equal to 36.');
        }

        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets adjustment_detail_object
     *
     * @return object|null
     */
    public function getAdjustmentDetailObject()
    {
        return $this->container['adjustment_detail_object'];
    }

    /**
     * Sets adjustment_detail_object
     *
     * @param object|null $adjustment_detail_object Contains the adjustment's full details.  The fields returned in this object depend on the adjustment type.  Interest returns interest details. For the specific fields returned, see the `detail_object` fields marked \"Returned for interest journal entries\" in the <</core-api/credit-account-journal-entries#getAccountJournalEntry, account journal entry response fields>>.  Disputes return dispute details. For the specific fields returned, see the <</core-api/credit-disputes#retrieveDispute, dispute response fields>>.
     *
     * @return self
     */
    public function setAdjustmentDetailObject($adjustment_detail_object)
    {
        $this->container['adjustment_detail_object'] = $adjustment_detail_object;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of the adjustment.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Date and time when the account adjustment was applied, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return \OpenAPI\Client\Model\CurrencyCode
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param \OpenAPI\Client\Model\CurrencyCode $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the adjustment.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling AccountAdjustmentResponse., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets detail_token
     *
     * @return string|null
     */
    public function getDetailToken()
    {
        return $this->container['detail_token'];
    }

    /**
     * Sets detail_token
     *
     * @param string|null $detail_token Unique identifier of the adjustment detail. For example, the token of the dispute, the interest charge, or the returned payment that prompted the adjustment.  Returned when the system automatically applies an adjustment.
     *
     * @return self
     */
    public function setDetailToken($detail_token)
    {
        if (!is_null($detail_token) && (mb_strlen($detail_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $detail_token when calling AccountAdjustmentResponse., must be smaller than or equal to 36.');
        }

        $this->container['detail_token'] = $detail_token;

        return $this;
    }

    /**
     * Gets external_adjustment_id
     *
     * @return string|null
     */
    public function getExternalAdjustmentId()
    {
        return $this->container['external_adjustment_id'];
    }

    /**
     * Sets external_adjustment_id
     *
     * @param string|null $external_adjustment_id Unique identifier you provide of an associated external adjustment that exists outside Marqeta's credit platform.
     *
     * @return self
     */
    public function setExternalAdjustmentId($external_adjustment_id)
    {
        $this->container['external_adjustment_id'] = $external_adjustment_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Additional information on the adjustment.
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets original_ledger_entry_token
     *
     * @return string|null
     */
    public function getOriginalLedgerEntryToken()
    {
        return $this->container['original_ledger_entry_token'];
    }

    /**
     * Sets original_ledger_entry_token
     *
     * @param string|null $original_ledger_entry_token Unique identifier of the original journal entry needing the adjustment.
     *
     * @return self
     */
    public function setOriginalLedgerEntryToken($original_ledger_entry_token)
    {
        $this->container['original_ledger_entry_token'] = $original_ledger_entry_token;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Reason for the adjustment.  * `DISPUTE` - The adjustment occurred because a dispute was initiated. * `DISPUTE_RESOLUTION` - The adjustment occurred because of the result of a dispute resolution. * `RETURNED_OR_CANCELED_PAYMENT` - The adjustment occurred because a payment was returned or canceled. * `OTHER` - Any other reason the adjustment occurred. For example, a waived fee.
     *
     * @return self
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reason', must be one of '%s'",
                    $reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets related_detail_object
     *
     * @return object|null
     */
    public function getRelatedDetailObject()
    {
        return $this->container['related_detail_object'];
    }

    /**
     * Sets related_detail_object
     *
     * @param object|null $related_detail_object Contains full details of the related dispute or returned payment.  The fields returned in this object depend on whether a dispute or returned payment led to the interest adjustment. A dispute returns dispute details; a returned payment returns payment details.  For more on the dispute details returned, see the <</core-api/credit-disputes#retrieveDispute, dispute response fields>>.  For more on the returned payment details returned, see the <</core-api/credit-account-payments#retrievePayment, payment response fields>>.  This field is returned for interest adjustments only.
     *
     * @return self
     */
    public function setRelatedDetailObject($related_detail_object)
    {
        $this->container['related_detail_object'] = $related_detail_object;

        return $this;
    }

    /**
     * Gets related_detail_token
     *
     * @return string|null
     */
    public function getRelatedDetailToken()
    {
        return $this->container['related_detail_token'];
    }

    /**
     * Sets related_detail_token
     *
     * @param string|null $related_detail_token Unique identifier of the dispute or returned payment that prompted the interest adjustment.  This field is returned for interest adjustments only.
     *
     * @return self
     */
    public function setRelatedDetailToken($related_detail_token)
    {
        if (!is_null($related_detail_token) && (mb_strlen($related_detail_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $related_detail_token when calling AccountAdjustmentResponse., must be smaller than or equal to 36.');
        }

        $this->container['related_detail_token'] = $related_detail_token;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the adjustment.  If in the `detail_object`, unique identifier of the detail object.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of adjustment.  The adjustment is made on its correlating amount (for example, purchase adjustments are made on purchase amounts). You can use general adjustments for standalone adjustments made on the credit account balance itself, which includes account write-offs, credits, and more.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


