<?php
/**
 * DirectDepositTransitionResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DirectDepositTransitionResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DirectDepositTransitionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectDepositTransitionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'business_token' => 'string',
        'channel' => 'string',
        'company_discretionary_data' => 'string',
        'company_entry_description' => 'string',
        'company_identification' => 'string',
        'company_name' => 'string',
        'created_time' => '\DateTime',
        'direct_deposit_account_token' => 'string',
        'direct_deposit_token' => 'string',
        'early_direct_deposit' => 'bool',
        'individual_identification_number' => 'string',
        'individual_name' => 'string',
        'last_modified_time' => '\DateTime',
        'originator_status_code' => 'string',
        'reason' => 'string',
        'reason_code' => 'string',
        'settlement_date' => '\DateTime',
        'standard_entry_class_code' => 'string',
        'state' => 'string',
        'token' => 'string',
        'trace_number' => 'string',
        'transaction_token' => 'string',
        'type' => 'string',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'business_token' => null,
        'channel' => null,
        'company_discretionary_data' => null,
        'company_entry_description' => null,
        'company_identification' => null,
        'company_name' => null,
        'created_time' => 'date-time',
        'direct_deposit_account_token' => null,
        'direct_deposit_token' => null,
        'early_direct_deposit' => null,
        'individual_identification_number' => null,
        'individual_name' => null,
        'last_modified_time' => 'date-time',
        'originator_status_code' => null,
        'reason' => null,
        'reason_code' => null,
        'settlement_date' => 'date-time',
        'standard_entry_class_code' => null,
        'state' => null,
        'token' => null,
        'trace_number' => null,
        'transaction_token' => null,
        'type' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'business_token' => 'business_token',
        'channel' => 'channel',
        'company_discretionary_data' => 'company_discretionary_data',
        'company_entry_description' => 'company_entry_description',
        'company_identification' => 'company_identification',
        'company_name' => 'company_name',
        'created_time' => 'created_time',
        'direct_deposit_account_token' => 'direct_deposit_account_token',
        'direct_deposit_token' => 'direct_deposit_token',
        'early_direct_deposit' => 'early_direct_deposit',
        'individual_identification_number' => 'individual_identification_number',
        'individual_name' => 'individual_name',
        'last_modified_time' => 'last_modified_time',
        'originator_status_code' => 'originator_status_code',
        'reason' => 'reason',
        'reason_code' => 'reason_code',
        'settlement_date' => 'settlement_date',
        'standard_entry_class_code' => 'standard_entry_class_code',
        'state' => 'state',
        'token' => 'token',
        'trace_number' => 'trace_number',
        'transaction_token' => 'transaction_token',
        'type' => 'type',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'business_token' => 'setBusinessToken',
        'channel' => 'setChannel',
        'company_discretionary_data' => 'setCompanyDiscretionaryData',
        'company_entry_description' => 'setCompanyEntryDescription',
        'company_identification' => 'setCompanyIdentification',
        'company_name' => 'setCompanyName',
        'created_time' => 'setCreatedTime',
        'direct_deposit_account_token' => 'setDirectDepositAccountToken',
        'direct_deposit_token' => 'setDirectDepositToken',
        'early_direct_deposit' => 'setEarlyDirectDeposit',
        'individual_identification_number' => 'setIndividualIdentificationNumber',
        'individual_name' => 'setIndividualName',
        'last_modified_time' => 'setLastModifiedTime',
        'originator_status_code' => 'setOriginatorStatusCode',
        'reason' => 'setReason',
        'reason_code' => 'setReasonCode',
        'settlement_date' => 'setSettlementDate',
        'standard_entry_class_code' => 'setStandardEntryClassCode',
        'state' => 'setState',
        'token' => 'setToken',
        'trace_number' => 'setTraceNumber',
        'transaction_token' => 'setTransactionToken',
        'type' => 'setType',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'business_token' => 'getBusinessToken',
        'channel' => 'getChannel',
        'company_discretionary_data' => 'getCompanyDiscretionaryData',
        'company_entry_description' => 'getCompanyEntryDescription',
        'company_identification' => 'getCompanyIdentification',
        'company_name' => 'getCompanyName',
        'created_time' => 'getCreatedTime',
        'direct_deposit_account_token' => 'getDirectDepositAccountToken',
        'direct_deposit_token' => 'getDirectDepositToken',
        'early_direct_deposit' => 'getEarlyDirectDeposit',
        'individual_identification_number' => 'getIndividualIdentificationNumber',
        'individual_name' => 'getIndividualName',
        'last_modified_time' => 'getLastModifiedTime',
        'originator_status_code' => 'getOriginatorStatusCode',
        'reason' => 'getReason',
        'reason_code' => 'getReasonCode',
        'settlement_date' => 'getSettlementDate',
        'standard_entry_class_code' => 'getStandardEntryClassCode',
        'state' => 'getState',
        'token' => 'getToken',
        'trace_number' => 'getTraceNumber',
        'transaction_token' => 'getTransactionToken',
        'type' => 'getType',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHANNEL_API = 'API';
    const CHANNEL_IVR = 'IVR';
    const CHANNEL_FRAUD = 'FRAUD';
    const CHANNEL_ADMIN = 'ADMIN';
    const CHANNEL_SYSTEM = 'SYSTEM';
    const CHANNEL_NETWORK = 'NETWORK';
    const CHANNEL_PROD_SUPPORT = 'PROD_SUPPORT';
    const CHANNEL_UNSUPPORTED = 'UNSUPPORTED';
    const STATE_PENDING = 'PENDING';
    const STATE_APPLIED = 'APPLIED';
    const STATE_REVERSED = 'REVERSED';
    const STATE_REJECTED = 'REJECTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_API,
            self::CHANNEL_IVR,
            self::CHANNEL_FRAUD,
            self::CHANNEL_ADMIN,
            self::CHANNEL_SYSTEM,
            self::CHANNEL_NETWORK,
            self::CHANNEL_PROD_SUPPORT,
            self::CHANNEL_UNSUPPORTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_APPLIED,
            self::STATE_REVERSED,
            self::STATE_REJECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['company_discretionary_data'] = $data['company_discretionary_data'] ?? null;
        $this->container['company_entry_description'] = $data['company_entry_description'] ?? null;
        $this->container['company_identification'] = $data['company_identification'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['direct_deposit_account_token'] = $data['direct_deposit_account_token'] ?? null;
        $this->container['direct_deposit_token'] = $data['direct_deposit_token'] ?? null;
        $this->container['early_direct_deposit'] = $data['early_direct_deposit'] ?? false;
        $this->container['individual_identification_number'] = $data['individual_identification_number'] ?? null;
        $this->container['individual_name'] = $data['individual_name'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['originator_status_code'] = $data['originator_status_code'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
        $this->container['reason_code'] = $data['reason_code'] ?? null;
        $this->container['settlement_date'] = $data['settlement_date'] ?? null;
        $this->container['standard_entry_class_code'] = $data['standard_entry_class_code'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['trace_number'] = $data['trace_number'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token business_token
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($channel) && !in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets company_discretionary_data
     *
     * @return string|null
     */
    public function getCompanyDiscretionaryData()
    {
        return $this->container['company_discretionary_data'];
    }

    /**
     * Sets company_discretionary_data
     *
     * @param string|null $company_discretionary_data company_discretionary_data
     *
     * @return self
     */
    public function setCompanyDiscretionaryData($company_discretionary_data)
    {
        $this->container['company_discretionary_data'] = $company_discretionary_data;

        return $this;
    }

    /**
     * Gets company_entry_description
     *
     * @return string|null
     */
    public function getCompanyEntryDescription()
    {
        return $this->container['company_entry_description'];
    }

    /**
     * Sets company_entry_description
     *
     * @param string|null $company_entry_description company_entry_description
     *
     * @return self
     */
    public function setCompanyEntryDescription($company_entry_description)
    {
        $this->container['company_entry_description'] = $company_entry_description;

        return $this;
    }

    /**
     * Gets company_identification
     *
     * @return string|null
     */
    public function getCompanyIdentification()
    {
        return $this->container['company_identification'];
    }

    /**
     * Sets company_identification
     *
     * @param string|null $company_identification company_identification
     *
     * @return self
     */
    public function setCompanyIdentification($company_identification)
    {
        $this->container['company_identification'] = $company_identification;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets direct_deposit_account_token
     *
     * @return string|null
     */
    public function getDirectDepositAccountToken()
    {
        return $this->container['direct_deposit_account_token'];
    }

    /**
     * Sets direct_deposit_account_token
     *
     * @param string|null $direct_deposit_account_token direct_deposit_account_token
     *
     * @return self
     */
    public function setDirectDepositAccountToken($direct_deposit_account_token)
    {
        $this->container['direct_deposit_account_token'] = $direct_deposit_account_token;

        return $this;
    }

    /**
     * Gets direct_deposit_token
     *
     * @return string|null
     */
    public function getDirectDepositToken()
    {
        return $this->container['direct_deposit_token'];
    }

    /**
     * Sets direct_deposit_token
     *
     * @param string|null $direct_deposit_token direct_deposit_token
     *
     * @return self
     */
    public function setDirectDepositToken($direct_deposit_token)
    {
        $this->container['direct_deposit_token'] = $direct_deposit_token;

        return $this;
    }

    /**
     * Gets early_direct_deposit
     *
     * @return bool|null
     */
    public function getEarlyDirectDeposit()
    {
        return $this->container['early_direct_deposit'];
    }

    /**
     * Sets early_direct_deposit
     *
     * @param bool|null $early_direct_deposit early_direct_deposit
     *
     * @return self
     */
    public function setEarlyDirectDeposit($early_direct_deposit)
    {
        $this->container['early_direct_deposit'] = $early_direct_deposit;

        return $this;
    }

    /**
     * Gets individual_identification_number
     *
     * @return string|null
     */
    public function getIndividualIdentificationNumber()
    {
        return $this->container['individual_identification_number'];
    }

    /**
     * Sets individual_identification_number
     *
     * @param string|null $individual_identification_number individual_identification_number
     *
     * @return self
     */
    public function setIndividualIdentificationNumber($individual_identification_number)
    {
        $this->container['individual_identification_number'] = $individual_identification_number;

        return $this;
    }

    /**
     * Gets individual_name
     *
     * @return string|null
     */
    public function getIndividualName()
    {
        return $this->container['individual_name'];
    }

    /**
     * Sets individual_name
     *
     * @param string|null $individual_name individual_name
     *
     * @return self
     */
    public function setIndividualName($individual_name)
    {
        $this->container['individual_name'] = $individual_name;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime|null $last_modified_time last_modified_time
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets originator_status_code
     *
     * @return string|null
     */
    public function getOriginatorStatusCode()
    {
        return $this->container['originator_status_code'];
    }

    /**
     * Sets originator_status_code
     *
     * @param string|null $originator_status_code originator_status_code
     *
     * @return self
     */
    public function setOriginatorStatusCode($originator_status_code)
    {
        $this->container['originator_status_code'] = $originator_status_code;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code reason_code
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return \DateTime|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param \DateTime|null $settlement_date settlement_date
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets standard_entry_class_code
     *
     * @return string|null
     */
    public function getStandardEntryClassCode()
    {
        return $this->container['standard_entry_class_code'];
    }

    /**
     * Sets standard_entry_class_code
     *
     * @param string|null $standard_entry_class_code standard_entry_class_code
     *
     * @return self
     */
    public function setStandardEntryClassCode($standard_entry_class_code)
    {
        $this->container['standard_entry_class_code'] = $standard_entry_class_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets trace_number
     *
     * @return string|null
     */
    public function getTraceNumber()
    {
        return $this->container['trace_number'];
    }

    /**
     * Sets trace_number
     *
     * @param string|null $trace_number trace_number
     *
     * @return self
     */
    public function setTraceNumber($trace_number)
    {
        $this->container['trace_number'] = $trace_number;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string|null
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string|null $transaction_token transaction_token
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token user_token
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


