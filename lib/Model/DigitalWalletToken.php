<?php
/**
 * DigitalWalletToken
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DigitalWalletToken Class Doc Comment
 *
 * @category Class
 * @description Contains information about the digital wallet that funded the transaction.  Returned for all transactions funded by a digital wallet or related to digital wallet token provisioning.  For more on digital wallets, see the &lt;&lt;/core-api/digital-wallets-management, Digital Wallets Management&gt;&gt; API reference and &lt;&lt;/developer-guides/digital-wallets-and-tokenization, Digital Wallets and Tokenization&gt;&gt; developer guide.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DigitalWalletToken implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'digital_wallet_token';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_verification' => '\OpenAPI\Client\Model\AddressVerification',
        'card_token' => 'string',
        'created_time' => '\DateTime',
        'device' => '\OpenAPI\Client\Model\Device',
        'fulfillment_status' => 'string',
        'issuer_eligibility_decision' => 'string',
        'last_modified_time' => '\DateTime',
        'metadata' => '\OpenAPI\Client\Model\DigitalWalletTokenMetadata',
        'state' => 'string',
        'state_reason' => 'string',
        'token' => 'string',
        'token_service_provider' => '\OpenAPI\Client\Model\TokenServiceProvider',
        'transaction_device' => '\OpenAPI\Client\Model\TransactionDevice',
        'user' => '\OpenAPI\Client\Model\UserCardHolderResponse',
        'wallet_provider_profile' => '\OpenAPI\Client\Model\WalletProviderProfile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_verification' => null,
        'card_token' => null,
        'created_time' => 'date-time',
        'device' => null,
        'fulfillment_status' => null,
        'issuer_eligibility_decision' => null,
        'last_modified_time' => 'date-time',
        'metadata' => null,
        'state' => null,
        'state_reason' => null,
        'token' => null,
        'token_service_provider' => null,
        'transaction_device' => null,
        'user' => null,
        'wallet_provider_profile' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_verification' => 'address_verification',
        'card_token' => 'card_token',
        'created_time' => 'created_time',
        'device' => 'device',
        'fulfillment_status' => 'fulfillment_status',
        'issuer_eligibility_decision' => 'issuer_eligibility_decision',
        'last_modified_time' => 'last_modified_time',
        'metadata' => 'metadata',
        'state' => 'state',
        'state_reason' => 'state_reason',
        'token' => 'token',
        'token_service_provider' => 'token_service_provider',
        'transaction_device' => 'transaction_device',
        'user' => 'user',
        'wallet_provider_profile' => 'wallet_provider_profile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_verification' => 'setAddressVerification',
        'card_token' => 'setCardToken',
        'created_time' => 'setCreatedTime',
        'device' => 'setDevice',
        'fulfillment_status' => 'setFulfillmentStatus',
        'issuer_eligibility_decision' => 'setIssuerEligibilityDecision',
        'last_modified_time' => 'setLastModifiedTime',
        'metadata' => 'setMetadata',
        'state' => 'setState',
        'state_reason' => 'setStateReason',
        'token' => 'setToken',
        'token_service_provider' => 'setTokenServiceProvider',
        'transaction_device' => 'setTransactionDevice',
        'user' => 'setUser',
        'wallet_provider_profile' => 'setWalletProviderProfile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_verification' => 'getAddressVerification',
        'card_token' => 'getCardToken',
        'created_time' => 'getCreatedTime',
        'device' => 'getDevice',
        'fulfillment_status' => 'getFulfillmentStatus',
        'issuer_eligibility_decision' => 'getIssuerEligibilityDecision',
        'last_modified_time' => 'getLastModifiedTime',
        'metadata' => 'getMetadata',
        'state' => 'getState',
        'state_reason' => 'getStateReason',
        'token' => 'getToken',
        'token_service_provider' => 'getTokenServiceProvider',
        'transaction_device' => 'getTransactionDevice',
        'user' => 'getUser',
        'wallet_provider_profile' => 'getWalletProviderProfile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['card_token'] = $data['card_token'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['fulfillment_status'] = $data['fulfillment_status'] ?? null;
        $this->container['issuer_eligibility_decision'] = $data['issuer_eligibility_decision'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['state_reason'] = $data['state_reason'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['token_service_provider'] = $data['token_service_provider'] ?? null;
        $this->container['transaction_device'] = $data['transaction_device'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['wallet_provider_profile'] = $data['wallet_provider_profile'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_verification
     *
     * @return \OpenAPI\Client\Model\AddressVerification|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param \OpenAPI\Client\Model\AddressVerification|null $address_verification address_verification
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string|null
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string|null $card_token Unique identifier of the card.
     *
     * @return self
     */
    public function setCardToken($card_token)
    {
        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Date and time when the digital wallet token object was created, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \OpenAPI\Client\Model\Device|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \OpenAPI\Client\Model\Device|null $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string|null
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string|null $fulfillment_status Digital wallet token's provisioning status.  For fulfillment status descriptions, see <</core-api/digital-wallets-management#postDigitalwallettokentransitions, Create digital wallet token transition>>.
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets issuer_eligibility_decision
     *
     * @return string|null
     */
    public function getIssuerEligibilityDecision()
    {
        return $this->container['issuer_eligibility_decision'];
    }

    /**
     * Sets issuer_eligibility_decision
     *
     * @param string|null $issuer_eligibility_decision The Marqeta platform's decision as to whether the digital wallet token should be provisioned.  * *0000* – The token should be provisioned.  * *token.activation.verification.required* – Provisioning is pending; further action is required for completion.  For all other values, check the value of the `fulfillment_status` field to definitively ascertain the provisioning outcome.  *NOTE:* The value `invalid.cid` indicates an invalid CVV2 number.
     *
     * @return self
     */
    public function setIssuerEligibilityDecision($issuer_eligibility_decision)
    {
        $this->container['issuer_eligibility_decision'] = $issuer_eligibility_decision;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime|null $last_modified_time Date and time when the digital wallet token object was last modified, in UTC.
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\DigitalWalletTokenMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\DigitalWalletTokenMetadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State of the digital wallet token.  For state descriptions, see <</developer-guides/managing-the-digital-wallet-token-lifecycle#_transitioning_token_states, Transitioning Token States>>.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_reason
     *
     * @return string|null
     */
    public function getStateReason()
    {
        return $this->container['state_reason'];
    }

    /**
     * Sets state_reason
     *
     * @param string|null $state_reason Reason why the digital wallet token transitioned to its current state.
     *
     * @return self
     */
    public function setStateReason($state_reason)
    {
        $this->container['state_reason'] = $state_reason;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the digital wallet token.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets token_service_provider
     *
     * @return \OpenAPI\Client\Model\TokenServiceProvider|null
     */
    public function getTokenServiceProvider()
    {
        return $this->container['token_service_provider'];
    }

    /**
     * Sets token_service_provider
     *
     * @param \OpenAPI\Client\Model\TokenServiceProvider|null $token_service_provider token_service_provider
     *
     * @return self
     */
    public function setTokenServiceProvider($token_service_provider)
    {
        $this->container['token_service_provider'] = $token_service_provider;

        return $this;
    }

    /**
     * Gets transaction_device
     *
     * @return \OpenAPI\Client\Model\TransactionDevice|null
     */
    public function getTransactionDevice()
    {
        return $this->container['transaction_device'];
    }

    /**
     * Sets transaction_device
     *
     * @param \OpenAPI\Client\Model\TransactionDevice|null $transaction_device transaction_device
     *
     * @return self
     */
    public function setTransactionDevice($transaction_device)
    {
        $this->container['transaction_device'] = $transaction_device;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserCardHolderResponse|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserCardHolderResponse|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets wallet_provider_profile
     *
     * @return \OpenAPI\Client\Model\WalletProviderProfile|null
     */
    public function getWalletProviderProfile()
    {
        return $this->container['wallet_provider_profile'];
    }

    /**
     * Sets wallet_provider_profile
     *
     * @param \OpenAPI\Client\Model\WalletProviderProfile|null $wallet_provider_profile wallet_provider_profile
     *
     * @return self
     */
    public function setWalletProviderProfile($wallet_provider_profile)
    {
        $this->container['wallet_provider_profile'] = $wallet_provider_profile;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


