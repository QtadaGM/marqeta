<?php
/**
 * Transit
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transit Class Doc Comment
 *
 * @category Class
 * @description Contains merchant-provided, transit-related metadata related to the transaction.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Transit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => 'string',
        'transportation_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'transportation_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'transportation_mode' => 'transportation_mode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'transportation_mode' => 'setTransportationMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'transportation_mode' => 'getTransportationMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRANSACTION_TYPE_PRE_FUNDED = 'PRE_FUNDED';
    const TRANSACTION_TYPE_REAL_TIME_AUTHORIZED = 'REAL_TIME_AUTHORIZED';
    const TRANSACTION_TYPE_POST_AUTHORIZED_AGGREGATED = 'POST_AUTHORIZED_AGGREGATED';
    const TRANSACTION_TYPE_AUTHORIZED_AGGREGATED_SPLIT_CLEARING = 'AUTHORIZED_AGGREGATED_SPLIT_CLEARING';
    const TRANSACTION_TYPE_OTHER = 'OTHER';
    const TRANSACTION_TYPE_DEBIT_RECOVERY = 'DEBIT_RECOVERY';
    const TRANSPORTATION_MODE_BUS = 'BUS';
    const TRANSPORTATION_MODE_TRAIN = 'TRAIN';
    const TRANSPORTATION_MODE_WATER_BORNE_VEHICLE = 'WATER_BORNE_VEHICLE';
    const TRANSPORTATION_MODE_TOLL = 'TOLL';
    const TRANSPORTATION_MODE_PARKING = 'PARKING';
    const TRANSPORTATION_MODE_TAXI = 'TAXI';
    const TRANSPORTATION_MODE_PARA_TRANSIT = 'PARA_TRANSIT';
    const TRANSPORTATION_MODE_SELF_DRIVE_VEHICLE = 'SELF_DRIVE_VEHICLE';
    const TRANSPORTATION_MODE_COACH = 'COACH';
    const TRANSPORTATION_MODE_LOCOMOTIVE = 'LOCOMOTIVE';
    const TRANSPORTATION_MODE_POWERED_MOTOR_VEHICLE = 'POWERED_MOTOR_VEHICLE';
    const TRANSPORTATION_MODE_TRAILER = 'TRAILER';
    const TRANSPORTATION_MODE_INTER_CITY = 'INTER_CITY';
    const TRANSPORTATION_MODE_CABLE_CAR = 'CABLE_CAR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_PRE_FUNDED,
            self::TRANSACTION_TYPE_REAL_TIME_AUTHORIZED,
            self::TRANSACTION_TYPE_POST_AUTHORIZED_AGGREGATED,
            self::TRANSACTION_TYPE_AUTHORIZED_AGGREGATED_SPLIT_CLEARING,
            self::TRANSACTION_TYPE_OTHER,
            self::TRANSACTION_TYPE_DEBIT_RECOVERY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportationModeAllowableValues()
    {
        return [
            self::TRANSPORTATION_MODE_BUS,
            self::TRANSPORTATION_MODE_TRAIN,
            self::TRANSPORTATION_MODE_WATER_BORNE_VEHICLE,
            self::TRANSPORTATION_MODE_TOLL,
            self::TRANSPORTATION_MODE_PARKING,
            self::TRANSPORTATION_MODE_TAXI,
            self::TRANSPORTATION_MODE_PARA_TRANSIT,
            self::TRANSPORTATION_MODE_SELF_DRIVE_VEHICLE,
            self::TRANSPORTATION_MODE_COACH,
            self::TRANSPORTATION_MODE_LOCOMOTIVE,
            self::TRANSPORTATION_MODE_POWERED_MOTOR_VEHICLE,
            self::TRANSPORTATION_MODE_TRAILER,
            self::TRANSPORTATION_MODE_INTER_CITY,
            self::TRANSPORTATION_MODE_CABLE_CAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['transportation_mode'] = $data['transportation_mode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransportationModeAllowableValues();
        if (!is_null($this->container['transportation_mode']) && !in_array($this->container['transportation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transportation_mode', must be one of '%s'",
                $this->container['transportation_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Type of transit transaction.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($transaction_type) && !in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transportation_mode
     *
     * @return string|null
     */
    public function getTransportationMode()
    {
        return $this->container['transportation_mode'];
    }

    /**
     * Sets transportation_mode
     *
     * @param string|null $transportation_mode Mode of transportation.
     *
     * @return self
     */
    public function setTransportationMode($transportation_mode)
    {
        $allowedValues = $this->getTransportationModeAllowableValues();
        if (!is_null($transportation_mode) && !in_array($transportation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transportation_mode', must be one of '%s'",
                    $transportation_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transportation_mode'] = $transportation_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


