<?php
/**
 * WithdrawalRequestModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WithdrawalRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WithdrawalRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'withdrawal_request_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_type' => 'string',
        'amount' => 'float',
        'card_acceptor' => '\OpenAPI\Client\Model\CardAcceptorModel',
        'card_token' => 'string',
        'mid' => 'string',
        'pin' => 'string',
        'webhook' => '\OpenAPI\Client\Model\Webhook'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_type' => null,
        'amount' => null,
        'card_acceptor' => null,
        'card_token' => null,
        'mid' => null,
        'pin' => null,
        'webhook' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_type' => 'account_type',
        'amount' => 'amount',
        'card_acceptor' => 'card_acceptor',
        'card_token' => 'card_token',
        'mid' => 'mid',
        'pin' => 'pin',
        'webhook' => 'webhook'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_type' => 'setAccountType',
        'amount' => 'setAmount',
        'card_acceptor' => 'setCardAcceptor',
        'card_token' => 'setCardToken',
        'mid' => 'setMid',
        'pin' => 'setPin',
        'webhook' => 'setWebhook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_type' => 'getAccountType',
        'amount' => 'getAmount',
        'card_acceptor' => 'getCardAcceptor',
        'card_token' => 'getCardToken',
        'mid' => 'getMid',
        'pin' => 'getPin',
        'webhook' => 'getWebhook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACCOUNT_TYPE_CHECKING = 'checking';
    const ACCOUNT_TYPE_SAVINGS = 'savings';
    const ACCOUNT_TYPE_CREDIT = 'credit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CHECKING,
            self::ACCOUNT_TYPE_SAVINGS,
            self::ACCOUNT_TYPE_CREDIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['card_acceptor'] = $data['card_acceptor'] ?? null;
        $this->container['card_token'] = $data['card_token'] ?? null;
        $this->container['mid'] = $data['mid'] ?? null;
        $this->container['pin'] = $data['pin'] ?? null;
        $this->container['webhook'] = $data['webhook'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['card_token'] === null) {
            $invalidProperties[] = "'card_token' can't be null";
        }
        if ((mb_strlen($this->container['card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mid'] === null) {
            $invalidProperties[] = "'mid' can't be null";
        }
        if ((mb_strlen($this->container['mid']) > 50)) {
            $invalidProperties[] = "invalid value for 'mid', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['mid']) < 1)) {
            $invalidProperties[] = "invalid value for 'mid', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) > 15)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['pin']) && (mb_strlen($this->container['pin']) < 1)) {
            $invalidProperties[] = "invalid value for 'pin', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets card_acceptor
     *
     * @return \OpenAPI\Client\Model\CardAcceptorModel|null
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     *
     * @param \OpenAPI\Client\Model\CardAcceptorModel|null $card_acceptor card_acceptor
     *
     * @return self
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string $card_token card_token
     *
     * @return self
     */
    public function setCardToken($card_token)
    {
        if ((mb_strlen($card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling WithdrawalRequestModel., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_token when calling WithdrawalRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return string
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param string $mid mid
     *
     * @return self
     */
    public function setMid($mid)
    {
        if ((mb_strlen($mid) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mid when calling WithdrawalRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($mid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mid when calling WithdrawalRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string|null $pin pin
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (!is_null($pin) && (mb_strlen($pin) > 15)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling WithdrawalRequestModel., must be smaller than or equal to 15.');
        }
        if (!is_null($pin) && (mb_strlen($pin) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pin when calling WithdrawalRequestModel., must be bigger than or equal to 1.');
        }

        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return \OpenAPI\Client\Model\Webhook|null
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param \OpenAPI\Client\Model\Webhook|null $webhook webhook
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        $this->container['webhook'] = $webhook;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


