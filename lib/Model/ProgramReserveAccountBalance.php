<?php
/**
 * ProgramReserveAccountBalance
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProgramReserveAccountBalance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProgramReserveAccountBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'program_reserve_account_balance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'available_balance' => 'float',
        'balances' => 'array<string,\OpenAPI\Client\Model\ProgramReserveAccountBalance>',
        'credit_balance' => 'float',
        'currency_code' => 'string',
        'ledger_balance' => 'float',
        'pending_credits' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'available_balance' => null,
        'balances' => null,
        'credit_balance' => null,
        'currency_code' => null,
        'ledger_balance' => null,
        'pending_credits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available_balance' => 'available_balance',
        'balances' => 'balances',
        'credit_balance' => 'credit_balance',
        'currency_code' => 'currency_code',
        'ledger_balance' => 'ledger_balance',
        'pending_credits' => 'pending_credits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available_balance' => 'setAvailableBalance',
        'balances' => 'setBalances',
        'credit_balance' => 'setCreditBalance',
        'currency_code' => 'setCurrencyCode',
        'ledger_balance' => 'setLedgerBalance',
        'pending_credits' => 'setPendingCredits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available_balance' => 'getAvailableBalance',
        'balances' => 'getBalances',
        'credit_balance' => 'getCreditBalance',
        'currency_code' => 'getCurrencyCode',
        'ledger_balance' => 'getLedgerBalance',
        'pending_credits' => 'getPendingCredits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_balance'] = $data['available_balance'] ?? null;
        $this->container['balances'] = $data['balances'] ?? null;
        $this->container['credit_balance'] = $data['credit_balance'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['ledger_balance'] = $data['ledger_balance'] ?? null;
        $this->container['pending_credits'] = $data['pending_credits'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance Ledger balance, minus any authorized transactions that have not yet cleared. When using JIT Funding, this balance is usually equal to $0.00.
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return array<string,\OpenAPI\Client\Model\ProgramReserveAccountBalance>|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param array<string,\OpenAPI\Client\Model\ProgramReserveAccountBalance>|null $balances Contains program reserve account balance information, organized by currency code. Sometimes referred to as a _program funding account_.
     *
     * @return self
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets credit_balance
     *
     * @return float|null
     */
    public function getCreditBalance()
    {
        return $this->container['credit_balance'];
    }

    /**
     * Sets credit_balance
     *
     * @param float|null $credit_balance Not currently in use.
     *
     * @return self
     */
    public function setCreditBalance($credit_balance)
    {
        $this->container['credit_balance'] = $credit_balance;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Three-digit ISO 4217 currency code.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets ledger_balance
     *
     * @return float|null
     */
    public function getLedgerBalance()
    {
        return $this->container['ledger_balance'];
    }

    /**
     * Sets ledger_balance
     *
     * @param float|null $ledger_balance When using standard funding: The funds that are available to spend immediately, including funds from any authorized transactions that have not yet cleared. When using Just-in-Time (JIT) Funding: Authorized funds that are currently on hold, but not yet cleared.
     *
     * @return self
     */
    public function setLedgerBalance($ledger_balance)
    {
        $this->container['ledger_balance'] = $ledger_balance;

        return $this;
    }

    /**
     * Gets pending_credits
     *
     * @return float|null
     */
    public function getPendingCredits()
    {
        return $this->container['pending_credits'];
    }

    /**
     * Sets pending_credits
     *
     * @param float|null $pending_credits ACH loads that have been accepted, but for which the funding time has not yet elapsed.
     *
     * @return self
     */
    public function setPendingCredits($pending_credits)
    {
        $this->container['pending_credits'] = $pending_credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


