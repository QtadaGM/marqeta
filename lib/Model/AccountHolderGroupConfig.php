<?php
/**
 * AccountHolderGroupConfig
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountHolderGroupConfig Class Doc Comment
 *
 * @category Class
 * @description Contains configuration fields for the account holder group.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountHolderGroupConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'account_holder_group_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_reloadable' => 'bool',
        'kyc_required' => 'string',
        'pre_kyc_controls' => '\OpenAPI\Client\Model\PreKycControls',
        'real_time_fee_group_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_reloadable' => null,
        'kyc_required' => null,
        'pre_kyc_controls' => null,
        'real_time_fee_group_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_reloadable' => 'is_reloadable',
        'kyc_required' => 'kyc_required',
        'pre_kyc_controls' => 'pre_kyc_controls',
        'real_time_fee_group_token' => 'real_time_fee_group_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_reloadable' => 'setIsReloadable',
        'kyc_required' => 'setKycRequired',
        'pre_kyc_controls' => 'setPreKycControls',
        'real_time_fee_group_token' => 'setRealTimeFeeGroupToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_reloadable' => 'getIsReloadable',
        'kyc_required' => 'getKycRequired',
        'pre_kyc_controls' => 'getPreKycControls',
        'real_time_fee_group_token' => 'getRealTimeFeeGroupToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const KYC_REQUIRED_ALWAYS = 'ALWAYS';
    const KYC_REQUIRED_CONDITIONAL = 'CONDITIONAL';
    const KYC_REQUIRED_NEVER = 'NEVER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKycRequiredAllowableValues()
    {
        return [
            self::KYC_REQUIRED_ALWAYS,
            self::KYC_REQUIRED_CONDITIONAL,
            self::KYC_REQUIRED_NEVER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_reloadable'] = $data['is_reloadable'] ?? false;
        $this->container['kyc_required'] = $data['kyc_required'] ?? null;
        $this->container['pre_kyc_controls'] = $data['pre_kyc_controls'] ?? null;
        $this->container['real_time_fee_group_token'] = $data['real_time_fee_group_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKycRequiredAllowableValues();
        if (!is_null($this->container['kyc_required']) && !in_array($this->container['kyc_required'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kyc_required', must be one of '%s'",
                $this->container['kyc_required'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['real_time_fee_group_token']) && (mb_strlen($this->container['real_time_fee_group_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'real_time_fee_group_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['real_time_fee_group_token']) && (mb_strlen($this->container['real_time_fee_group_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'real_time_fee_group_token', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_reloadable
     *
     * @return bool|null
     */
    public function getIsReloadable()
    {
        return $this->container['is_reloadable'];
    }

    /**
     * Sets is_reloadable
     *
     * @param bool|null $is_reloadable If set to `false`, this control prohibits an account holder's account from being reloaded with funds after the initial load.  This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.
     *
     * @return self
     */
    public function setIsReloadable($is_reloadable)
    {
        $this->container['is_reloadable'] = $is_reloadable;

        return $this;
    }

    /**
     * Gets kyc_required
     *
     * @return string|null
     */
    public function getKycRequired()
    {
        return $this->container['kyc_required'];
    }

    /**
     * Sets kyc_required
     *
     * @param string|null $kyc_required If set to `ALWAYS`, new account holders are created in an `UNVERIFIED` status and must pass identity verification (KYC) before they can be active; if set to `CONDITIONAL`, new account holders begin in a `LIMITED` status and have limited actions available before passing identity verification; if set to `NEVER`, new account holders are created in an active state.
     *
     * @return self
     */
    public function setKycRequired($kyc_required)
    {
        $allowedValues = $this->getKycRequiredAllowableValues();
        if (!is_null($kyc_required) && !in_array($kyc_required, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kyc_required', must be one of '%s'",
                    $kyc_required,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kyc_required'] = $kyc_required;

        return $this;
    }

    /**
     * Gets pre_kyc_controls
     *
     * @return \OpenAPI\Client\Model\PreKycControls|null
     */
    public function getPreKycControls()
    {
        return $this->container['pre_kyc_controls'];
    }

    /**
     * Sets pre_kyc_controls
     *
     * @param \OpenAPI\Client\Model\PreKycControls|null $pre_kyc_controls pre_kyc_controls
     *
     * @return self
     */
    public function setPreKycControls($pre_kyc_controls)
    {
        $this->container['pre_kyc_controls'] = $pre_kyc_controls;

        return $this;
    }

    /**
     * Gets real_time_fee_group_token
     *
     * @return string|null
     */
    public function getRealTimeFeeGroupToken()
    {
        return $this->container['real_time_fee_group_token'];
    }

    /**
     * Sets real_time_fee_group_token
     *
     * @param string|null $real_time_fee_group_token Associates the specified real-time fee group with the members of the account holder group.
     *
     * @return self
     */
    public function setRealTimeFeeGroupToken($real_time_fee_group_token)
    {
        if (!is_null($real_time_fee_group_token) && (mb_strlen($real_time_fee_group_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $real_time_fee_group_token when calling AccountHolderGroupConfig., must be smaller than or equal to 36.');
        }
        if (!is_null($real_time_fee_group_token) && (mb_strlen($real_time_fee_group_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $real_time_fee_group_token when calling AccountHolderGroupConfig., must be bigger than or equal to 0.');
        }

        $this->container['real_time_fee_group_token'] = $real_time_fee_group_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


