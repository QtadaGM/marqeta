<?php
/**
 * CardLifeCycle
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardLifeCycle Class Doc Comment
 *
 * @category Class
 * @description Defines characteristics of the lifecycle of cards of this card product type.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardLifeCycle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_life_cycle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activate_upon_issue' => 'bool',
        'card_service_code' => 'int',
        'expiration_offset' => '\OpenAPI\Client\Model\ExpirationOffsetWithMinimum',
        'update_expiration_upon_activation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activate_upon_issue' => null,
        'card_service_code' => 'int32',
        'expiration_offset' => null,
        'update_expiration_upon_activation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activate_upon_issue' => 'activate_upon_issue',
        'card_service_code' => 'card_service_code',
        'expiration_offset' => 'expiration_offset',
        'update_expiration_upon_activation' => 'update_expiration_upon_activation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activate_upon_issue' => 'setActivateUponIssue',
        'card_service_code' => 'setCardServiceCode',
        'expiration_offset' => 'setExpirationOffset',
        'update_expiration_upon_activation' => 'setUpdateExpirationUponActivation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activate_upon_issue' => 'getActivateUponIssue',
        'card_service_code' => 'getCardServiceCode',
        'expiration_offset' => 'getExpirationOffset',
        'update_expiration_upon_activation' => 'getUpdateExpirationUponActivation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activate_upon_issue'] = $data['activate_upon_issue'] ?? false;
        $this->container['card_service_code'] = $data['card_service_code'] ?? 101;
        $this->container['expiration_offset'] = $data['expiration_offset'] ?? null;
        $this->container['update_expiration_upon_activation'] = $data['update_expiration_upon_activation'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activate_upon_issue
     *
     * @return bool|null
     */
    public function getActivateUponIssue()
    {
        return $this->container['activate_upon_issue'];
    }

    /**
     * Sets activate_upon_issue
     *
     * @param bool|null $activate_upon_issue A value of `true` indicates that cards of this card product type are active once they are issued.
     *
     * @return self
     */
    public function setActivateUponIssue($activate_upon_issue)
    {
        $this->container['activate_upon_issue'] = $activate_upon_issue;

        return $this;
    }

    /**
     * Gets card_service_code
     *
     * @return int|null
     */
    public function getCardServiceCode()
    {
        return $this->container['card_service_code'];
    }

    /**
     * Sets card_service_code
     *
     * @param int|null $card_service_code Sequence of three digits that defines various services, differentiates card usage in international or domestic interchange, designates personal identification number (PIN) and authorization requirements, and identifies card restrictions. The following values are commonly used:  *First digit*  * *1* — International interchange OK * *2* — International interchange, use IC (chip) where feasible * *5* — National interchange only except under bilateral agreement * *6* — National interchange only except under bilateral agreement, use IC (chip) where feasible * *7* — No interchange except under bilateral agreement (closed loop) * *9* — Test  *Second digit*  * *0* — Normal * *2* — Contact issuer via online means * *4* — Contact issuer via online means except under bilateral agreement  *Third digit*  * *0* — No restrictions, PIN required * *1* — No restrictions * *2* — Goods and services only (no cash) * *3* — ATM only, PIN required * *4* — Cash only * *5* — Goods and services only (no cash), PIN required * *6* — No restrictions, use PIN where feasible * *7* — Goods and services only (no cash), use PIN where feasible
     *
     * @return self
     */
    public function setCardServiceCode($card_service_code)
    {
        $this->container['card_service_code'] = $card_service_code;

        return $this;
    }

    /**
     * Gets expiration_offset
     *
     * @return \OpenAPI\Client\Model\ExpirationOffsetWithMinimum|null
     */
    public function getExpirationOffset()
    {
        return $this->container['expiration_offset'];
    }

    /**
     * Sets expiration_offset
     *
     * @param \OpenAPI\Client\Model\ExpirationOffsetWithMinimum|null $expiration_offset expiration_offset
     *
     * @return self
     */
    public function setExpirationOffset($expiration_offset)
    {
        $this->container['expiration_offset'] = $expiration_offset;

        return $this;
    }

    /**
     * Gets update_expiration_upon_activation
     *
     * @return bool|null
     */
    public function getUpdateExpirationUponActivation()
    {
        return $this->container['update_expiration_upon_activation'];
    }

    /**
     * Sets update_expiration_upon_activation
     *
     * @param bool|null $update_expiration_upon_activation Normally, the `expiration_offset` is measured from the date of issue. Set this field to `true` to measure `expiration_offset` from the date of activation instead.
     *
     * @return self
     */
    public function setUpdateExpirationUponActivation($update_expiration_upon_activation)
    {
        $this->container['update_expiration_upon_activation'] = $update_expiration_upon_activation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


