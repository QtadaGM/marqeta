<?php
/**
 * StatementSummary
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StatementSummary Class Doc Comment
 *
 * @category Class
 * @description Contains the summary data for an account&#39;s monthly statement.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StatementSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatementSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_token' => 'string',
        'available_credit' => 'float',
        'closing_balance' => 'float',
        'closing_date' => '\DateTime',
        'created_time' => '\DateTime',
        'credit_limit' => 'float',
        'credits' => 'float',
        'cycle_type' => '\OpenAPI\Client\Model\CycleType',
        'days_in_billing_cycle' => 'int',
        'fees' => 'float',
        'interest' => 'float',
        'opening_balance' => 'float',
        'opening_date' => '\DateTime',
        'past_due_amount' => 'float',
        'payments' => 'float',
        'purchases' => 'float',
        'token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_token' => null,
        'available_credit' => null,
        'closing_balance' => null,
        'closing_date' => 'date-time',
        'created_time' => 'date-time',
        'credit_limit' => null,
        'credits' => null,
        'cycle_type' => null,
        'days_in_billing_cycle' => null,
        'fees' => null,
        'interest' => null,
        'opening_balance' => null,
        'opening_date' => 'date-time',
        'past_due_amount' => null,
        'payments' => null,
        'purchases' => null,
        'token' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_token' => 'account_token',
        'available_credit' => 'available_credit',
        'closing_balance' => 'closing_balance',
        'closing_date' => 'closing_date',
        'created_time' => 'created_time',
        'credit_limit' => 'credit_limit',
        'credits' => 'credits',
        'cycle_type' => 'cycle_type',
        'days_in_billing_cycle' => 'days_in_billing_cycle',
        'fees' => 'fees',
        'interest' => 'interest',
        'opening_balance' => 'opening_balance',
        'opening_date' => 'opening_date',
        'past_due_amount' => 'past_due_amount',
        'payments' => 'payments',
        'purchases' => 'purchases',
        'token' => 'token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_token' => 'setAccountToken',
        'available_credit' => 'setAvailableCredit',
        'closing_balance' => 'setClosingBalance',
        'closing_date' => 'setClosingDate',
        'created_time' => 'setCreatedTime',
        'credit_limit' => 'setCreditLimit',
        'credits' => 'setCredits',
        'cycle_type' => 'setCycleType',
        'days_in_billing_cycle' => 'setDaysInBillingCycle',
        'fees' => 'setFees',
        'interest' => 'setInterest',
        'opening_balance' => 'setOpeningBalance',
        'opening_date' => 'setOpeningDate',
        'past_due_amount' => 'setPastDueAmount',
        'payments' => 'setPayments',
        'purchases' => 'setPurchases',
        'token' => 'setToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_token' => 'getAccountToken',
        'available_credit' => 'getAvailableCredit',
        'closing_balance' => 'getClosingBalance',
        'closing_date' => 'getClosingDate',
        'created_time' => 'getCreatedTime',
        'credit_limit' => 'getCreditLimit',
        'credits' => 'getCredits',
        'cycle_type' => 'getCycleType',
        'days_in_billing_cycle' => 'getDaysInBillingCycle',
        'fees' => 'getFees',
        'interest' => 'getInterest',
        'opening_balance' => 'getOpeningBalance',
        'opening_date' => 'getOpeningDate',
        'past_due_amount' => 'getPastDueAmount',
        'payments' => 'getPayments',
        'purchases' => 'getPurchases',
        'token' => 'getToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['available_credit'] = $data['available_credit'] ?? null;
        $this->container['closing_balance'] = $data['closing_balance'] ?? null;
        $this->container['closing_date'] = $data['closing_date'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['credit_limit'] = $data['credit_limit'] ?? null;
        $this->container['credits'] = $data['credits'] ?? null;
        $this->container['cycle_type'] = $data['cycle_type'] ?? null;
        $this->container['days_in_billing_cycle'] = $data['days_in_billing_cycle'] ?? null;
        $this->container['fees'] = $data['fees'] ?? null;
        $this->container['interest'] = $data['interest'] ?? null;
        $this->container['opening_balance'] = $data['opening_balance'] ?? null;
        $this->container['opening_date'] = $data['opening_date'] ?? null;
        $this->container['past_due_amount'] = $data['past_due_amount'] ?? null;
        $this->container['payments'] = $data['payments'] ?? null;
        $this->container['purchases'] = $data['purchases'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ((mb_strlen($this->container['account_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_token', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['available_credit'] === null) {
            $invalidProperties[] = "'available_credit' can't be null";
        }
        if ($this->container['closing_balance'] === null) {
            $invalidProperties[] = "'closing_balance' can't be null";
        }
        if ($this->container['closing_date'] === null) {
            $invalidProperties[] = "'closing_date' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['cycle_type'] === null) {
            $invalidProperties[] = "'cycle_type' can't be null";
        }
        if ($this->container['days_in_billing_cycle'] === null) {
            $invalidProperties[] = "'days_in_billing_cycle' can't be null";
        }
        if ($this->container['fees'] === null) {
            $invalidProperties[] = "'fees' can't be null";
        }
        if ($this->container['interest'] === null) {
            $invalidProperties[] = "'interest' can't be null";
        }
        if ($this->container['opening_balance'] === null) {
            $invalidProperties[] = "'opening_balance' can't be null";
        }
        if ($this->container['opening_date'] === null) {
            $invalidProperties[] = "'opening_date' can't be null";
        }
        if ($this->container['past_due_amount'] === null) {
            $invalidProperties[] = "'past_due_amount' can't be null";
        }
        if ($this->container['payments'] === null) {
            $invalidProperties[] = "'payments' can't be null";
        }
        if ($this->container['purchases'] === null) {
            $invalidProperties[] = "'purchases' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account on which the statement summary is generated.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        if ((mb_strlen($account_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_token when calling StatementSummary., must be smaller than or equal to 36.');
        }

        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets available_credit
     *
     * @return float
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     *
     * @param float $available_credit Amount available to spend on the credit account, as of the statement closing date.
     *
     * @return self
     */
    public function setAvailableCredit($available_credit)
    {
        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets closing_balance
     *
     * @return float
     */
    public function getClosingBalance()
    {
        return $this->container['closing_balance'];
    }

    /**
     * Sets closing_balance
     *
     * @param float $closing_balance Balance of the credit account when the statement period ended.
     *
     * @return self
     */
    public function setClosingBalance($closing_balance)
    {
        $this->container['closing_balance'] = $closing_balance;

        return $this;
    }

    /**
     * Gets closing_date
     *
     * @return \DateTime
     */
    public function getClosingDate()
    {
        return $this->container['closing_date'];
    }

    /**
     * Sets closing_date
     *
     * @param \DateTime $closing_date Date and time when the statement period ended.
     *
     * @return self
     */
    public function setClosingDate($closing_date)
    {
        $this->container['closing_date'] = $closing_date;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the statement summary was created on Marqeta's credit platform, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit Maximum balance the credit account can carry, as of the statement closing date.
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return float
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param float $credits Total amount of credits received during the statement period.
     *
     * @return self
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets cycle_type
     *
     * @return \OpenAPI\Client\Model\CycleType
     */
    public function getCycleType()
    {
        return $this->container['cycle_type'];
    }

    /**
     * Sets cycle_type
     *
     * @param \OpenAPI\Client\Model\CycleType $cycle_type cycle_type
     *
     * @return self
     */
    public function setCycleType($cycle_type)
    {
        $this->container['cycle_type'] = $cycle_type;

        return $this;
    }

    /**
     * Gets days_in_billing_cycle
     *
     * @return int
     */
    public function getDaysInBillingCycle()
    {
        return $this->container['days_in_billing_cycle'];
    }

    /**
     * Sets days_in_billing_cycle
     *
     * @param int $days_in_billing_cycle Number of days in the billing cycle, also known as the statement period.
     *
     * @return self
     */
    public function setDaysInBillingCycle($days_in_billing_cycle)
    {
        $this->container['days_in_billing_cycle'] = $days_in_billing_cycle;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return float
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param float $fees Total amount of fees charged during the statement period. Does not include periodic fees.
     *
     * @return self
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return float
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param float $interest Total amount of interest charged during the statement period.
     *
     * @return self
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets opening_balance
     *
     * @return float
     */
    public function getOpeningBalance()
    {
        return $this->container['opening_balance'];
    }

    /**
     * Sets opening_balance
     *
     * @param float $opening_balance Balance of the credit account when the statement period began.
     *
     * @return self
     */
    public function setOpeningBalance($opening_balance)
    {
        $this->container['opening_balance'] = $opening_balance;

        return $this;
    }

    /**
     * Gets opening_date
     *
     * @return \DateTime
     */
    public function getOpeningDate()
    {
        return $this->container['opening_date'];
    }

    /**
     * Sets opening_date
     *
     * @param \DateTime $opening_date Date and time when the statement period began.
     *
     * @return self
     */
    public function setOpeningDate($opening_date)
    {
        $this->container['opening_date'] = $opening_date;

        return $this;
    }

    /**
     * Gets past_due_amount
     *
     * @return float
     */
    public function getPastDueAmount()
    {
        return $this->container['past_due_amount'];
    }

    /**
     * Sets past_due_amount
     *
     * @param float $past_due_amount Total payment amount, required to make the account current.
     *
     * @return self
     */
    public function setPastDueAmount($past_due_amount)
    {
        $this->container['past_due_amount'] = $past_due_amount;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return float
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param float $payments Total amount of payments made during the statement period.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets purchases
     *
     * @return float
     */
    public function getPurchases()
    {
        return $this->container['purchases'];
    }

    /**
     * Sets purchases
     *
     * @param float $purchases Total amount of purchases made during the statement period.
     *
     * @return self
     */
    public function setPurchases($purchases)
    {
        $this->container['purchases'] = $purchases;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the statement summary.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


