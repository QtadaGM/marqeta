<?php
/**
 * AndroidPushTokenizeRequestData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AndroidPushTokenizeRequestData Class Doc Comment
 *
 * @category Class
 * @description Contains details about a card tokenization push request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AndroidPushTokenizeRequestData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'android_push_tokenize_request_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'last_digits' => 'string',
        'network' => 'string',
        'opaque_payment_card' => 'string',
        'token_service_provider' => 'string',
        'user_address' => '\OpenAPI\Client\Model\AndroidPushTokenRequestAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'last_digits' => null,
        'network' => null,
        'opaque_payment_card' => null,
        'token_service_provider' => null,
        'user_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'display_name',
        'last_digits' => 'last_digits',
        'network' => 'network',
        'opaque_payment_card' => 'opaque_payment_card',
        'token_service_provider' => 'token_service_provider',
        'user_address' => 'user_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'last_digits' => 'setLastDigits',
        'network' => 'setNetwork',
        'opaque_payment_card' => 'setOpaquePaymentCard',
        'token_service_provider' => 'setTokenServiceProvider',
        'user_address' => 'setUserAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'last_digits' => 'getLastDigits',
        'network' => 'getNetwork',
        'opaque_payment_card' => 'getOpaquePaymentCard',
        'token_service_provider' => 'getTokenServiceProvider',
        'user_address' => 'getUserAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['last_digits'] = $data['last_digits'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['opaque_payment_card'] = $data['opaque_payment_card'] ?? null;
        $this->container['token_service_provider'] = $data['token_service_provider'] ?? null;
        $this->container['user_address'] = $data['user_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Name of the card as displayed in the digital wallet, typically showing the card brand and last four digits of the primary account number (PAN). `Visa 5678`, for example.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets last_digits
     *
     * @return string|null
     */
    public function getLastDigits()
    {
        return $this->container['last_digits'];
    }

    /**
     * Sets last_digits
     *
     * @param string|null $last_digits Last four digits of the primary account number of the physical or virtual card.
     *
     * @return self
     */
    public function setLastDigits($last_digits)
    {
        $this->container['last_digits'] = $last_digits;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network Specifies the card network of the physical or virtual card.
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets opaque_payment_card
     *
     * @return string|null
     */
    public function getOpaquePaymentCard()
    {
        return $this->container['opaque_payment_card'];
    }

    /**
     * Sets opaque_payment_card
     *
     * @param string|null $opaque_payment_card Encrypted data field created by the issuer and passed to Google Wallet during the push provisioning process.
     *
     * @return self
     */
    public function setOpaquePaymentCard($opaque_payment_card)
    {
        $this->container['opaque_payment_card'] = $opaque_payment_card;

        return $this;
    }

    /**
     * Gets token_service_provider
     *
     * @return string|null
     */
    public function getTokenServiceProvider()
    {
        return $this->container['token_service_provider'];
    }

    /**
     * Sets token_service_provider
     *
     * @param string|null $token_service_provider Specifies the network that provides the digital wallet token service.
     *
     * @return self
     */
    public function setTokenServiceProvider($token_service_provider)
    {
        $this->container['token_service_provider'] = $token_service_provider;

        return $this;
    }

    /**
     * Gets user_address
     *
     * @return \OpenAPI\Client\Model\AndroidPushTokenRequestAddress|null
     */
    public function getUserAddress()
    {
        return $this->container['user_address'];
    }

    /**
     * Sets user_address
     *
     * @param \OpenAPI\Client\Model\AndroidPushTokenRequestAddress|null $user_address user_address
     *
     * @return self
     */
    public function setUserAddress($user_address)
    {
        $this->container['user_address'] = $user_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


