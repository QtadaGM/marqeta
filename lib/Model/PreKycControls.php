<?php
/**
 * PreKycControls
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PreKycControls Class Doc Comment
 *
 * @category Class
 * @description Contains configuration fields for a number of controls.  *NOTE:* These controls are in effect only if &#x60;kyc_required&#x60; is &#x60;ALWAYS&#x60; or &#x60;CONDITIONAL&#x60; and the account holder has not yet passed KYC.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PreKycControls implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pre_kyc_controls';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'balance_max' => 'float',
        'cash_access_enabled' => 'bool',
        'enable_non_program_loads' => 'bool',
        'international_enabled' => 'bool',
        'is_reloadable_pre_kyc' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'balance_max' => null,
        'cash_access_enabled' => null,
        'enable_non_program_loads' => null,
        'international_enabled' => null,
        'is_reloadable_pre_kyc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance_max' => 'balance_max',
        'cash_access_enabled' => 'cash_access_enabled',
        'enable_non_program_loads' => 'enable_non_program_loads',
        'international_enabled' => 'international_enabled',
        'is_reloadable_pre_kyc' => 'is_reloadable_pre_kyc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance_max' => 'setBalanceMax',
        'cash_access_enabled' => 'setCashAccessEnabled',
        'enable_non_program_loads' => 'setEnableNonProgramLoads',
        'international_enabled' => 'setInternationalEnabled',
        'is_reloadable_pre_kyc' => 'setIsReloadablePreKyc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance_max' => 'getBalanceMax',
        'cash_access_enabled' => 'getCashAccessEnabled',
        'enable_non_program_loads' => 'getEnableNonProgramLoads',
        'international_enabled' => 'getInternationalEnabled',
        'is_reloadable_pre_kyc' => 'getIsReloadablePreKyc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance_max'] = $data['balance_max'] ?? null;
        $this->container['cash_access_enabled'] = $data['cash_access_enabled'] ?? false;
        $this->container['enable_non_program_loads'] = $data['enable_non_program_loads'] ?? false;
        $this->container['international_enabled'] = $data['international_enabled'] ?? false;
        $this->container['is_reloadable_pre_kyc'] = $data['is_reloadable_pre_kyc'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['balance_max']) && ($this->container['balance_max'] < 0)) {
            $invalidProperties[] = "invalid value for 'balance_max', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance_max
     *
     * @return float|null
     */
    public function getBalanceMax()
    {
        return $this->container['balance_max'];
    }

    /**
     * Sets balance_max
     *
     * @param float|null $balance_max Specifies the maximum ledger balance allowed for members of the account holder group.
     *
     * @return self
     */
    public function setBalanceMax($balance_max)
    {

        if (!is_null($balance_max) && ($balance_max < 0)) {
            throw new \InvalidArgumentException('invalid value for $balance_max when calling PreKycControls., must be bigger than or equal to 0.');
        }

        $this->container['balance_max'] = $balance_max;

        return $this;
    }

    /**
     * Gets cash_access_enabled
     *
     * @return bool|null
     */
    public function getCashAccessEnabled()
    {
        return $this->container['cash_access_enabled'];
    }

    /**
     * Sets cash_access_enabled
     *
     * @param bool|null $cash_access_enabled If set to `false`, this control prohibits an account holder's cards from being used at an ATM.  *NOTE:* If a card product's `config.poi.atm` field is set to `false`, associated cards are prohibited from being used at an ATM regardless of this control's setting.
     *
     * @return self
     */
    public function setCashAccessEnabled($cash_access_enabled)
    {
        $this->container['cash_access_enabled'] = $cash_access_enabled;

        return $this;
    }

    /**
     * Gets enable_non_program_loads
     *
     * @return bool|null
     */
    public function getEnableNonProgramLoads()
    {
        return $this->container['enable_non_program_loads'];
    }

    /**
     * Sets enable_non_program_loads
     *
     * @param bool|null $enable_non_program_loads If set to `true`, funds can only be loaded from a program funding source.  This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.
     *
     * @return self
     */
    public function setEnableNonProgramLoads($enable_non_program_loads)
    {
        $this->container['enable_non_program_loads'] = $enable_non_program_loads;

        return $this;
    }

    /**
     * Gets international_enabled
     *
     * @return bool|null
     */
    public function getInternationalEnabled()
    {
        return $this->container['international_enabled'];
    }

    /**
     * Sets international_enabled
     *
     * @param bool|null $international_enabled If set to `false`, this control prohibits an account holder from conducting transactions with a non-domestic country code.  *NOTE:* If a card product is configured to prohibit non-domestic transactions, its associated cards are prohibited from such transactions regardless of this control's setting.
     *
     * @return self
     */
    public function setInternationalEnabled($international_enabled)
    {
        $this->container['international_enabled'] = $international_enabled;

        return $this;
    }

    /**
     * Gets is_reloadable_pre_kyc
     *
     * @return bool|null
     */
    public function getIsReloadablePreKyc()
    {
        return $this->container['is_reloadable_pre_kyc'];
    }

    /**
     * Sets is_reloadable_pre_kyc
     *
     * @param bool|null $is_reloadable_pre_kyc If set to `false`, this control prohibits an account holder's account from being reloaded with funds after an initial load.  This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.
     *
     * @return self
     */
    public function setIsReloadablePreKyc($is_reloadable_pre_kyc)
    {
        $this->container['is_reloadable_pre_kyc'] = $is_reloadable_pre_kyc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


