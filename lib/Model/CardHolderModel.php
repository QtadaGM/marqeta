<?php
/**
 * CardHolderModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardHolderModel Class Doc Comment
 *
 * @category Class
 * @description Contains information about a cardholder.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardHolderModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'card_holder_model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_holder_group_token' => 'string',
        'active' => 'bool',
        'address1' => 'string',
        'address2' => 'string',
        'birth_date' => 'string',
        'city' => 'string',
        'company' => 'string',
        'corporate_card_holder' => 'bool',
        'country' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'honorific' => 'string',
        'id_card_expiration_date' => 'string',
        'id_card_number' => 'string',
        'identifications' => '\OpenAPI\Client\Model\IdentificationRequestModel[]',
        'ip_address' => 'string',
        'last_name' => 'string',
        'metadata' => 'array<string,string>',
        'middle_name' => 'string',
        'nationality' => 'string',
        'notes' => 'string',
        'parent_token' => 'string',
        'passport_expiration_date' => 'string',
        'passport_number' => 'string',
        'password' => 'string',
        'phone' => 'string',
        'postal_code' => 'string',
        'ssn' => 'string',
        'state' => 'string',
        'token' => 'string',
        'uses_parent_account' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_holder_group_token' => null,
        'active' => null,
        'address1' => null,
        'address2' => null,
        'birth_date' => null,
        'city' => null,
        'company' => null,
        'corporate_card_holder' => null,
        'country' => null,
        'email' => null,
        'first_name' => null,
        'gender' => null,
        'honorific' => null,
        'id_card_expiration_date' => null,
        'id_card_number' => null,
        'identifications' => null,
        'ip_address' => null,
        'last_name' => null,
        'metadata' => null,
        'middle_name' => null,
        'nationality' => null,
        'notes' => null,
        'parent_token' => null,
        'passport_expiration_date' => null,
        'passport_number' => null,
        'password' => null,
        'phone' => null,
        'postal_code' => null,
        'ssn' => null,
        'state' => null,
        'token' => null,
        'uses_parent_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_holder_group_token' => 'account_holder_group_token',
        'active' => 'active',
        'address1' => 'address1',
        'address2' => 'address2',
        'birth_date' => 'birth_date',
        'city' => 'city',
        'company' => 'company',
        'corporate_card_holder' => 'corporate_card_holder',
        'country' => 'country',
        'email' => 'email',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'honorific' => 'honorific',
        'id_card_expiration_date' => 'id_card_expiration_date',
        'id_card_number' => 'id_card_number',
        'identifications' => 'identifications',
        'ip_address' => 'ip_address',
        'last_name' => 'last_name',
        'metadata' => 'metadata',
        'middle_name' => 'middle_name',
        'nationality' => 'nationality',
        'notes' => 'notes',
        'parent_token' => 'parent_token',
        'passport_expiration_date' => 'passport_expiration_date',
        'passport_number' => 'passport_number',
        'password' => 'password',
        'phone' => 'phone',
        'postal_code' => 'postal_code',
        'ssn' => 'ssn',
        'state' => 'state',
        'token' => 'token',
        'uses_parent_account' => 'uses_parent_account'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_holder_group_token' => 'setAccountHolderGroupToken',
        'active' => 'setActive',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'birth_date' => 'setBirthDate',
        'city' => 'setCity',
        'company' => 'setCompany',
        'corporate_card_holder' => 'setCorporateCardHolder',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'honorific' => 'setHonorific',
        'id_card_expiration_date' => 'setIdCardExpirationDate',
        'id_card_number' => 'setIdCardNumber',
        'identifications' => 'setIdentifications',
        'ip_address' => 'setIpAddress',
        'last_name' => 'setLastName',
        'metadata' => 'setMetadata',
        'middle_name' => 'setMiddleName',
        'nationality' => 'setNationality',
        'notes' => 'setNotes',
        'parent_token' => 'setParentToken',
        'passport_expiration_date' => 'setPassportExpirationDate',
        'passport_number' => 'setPassportNumber',
        'password' => 'setPassword',
        'phone' => 'setPhone',
        'postal_code' => 'setPostalCode',
        'ssn' => 'setSsn',
        'state' => 'setState',
        'token' => 'setToken',
        'uses_parent_account' => 'setUsesParentAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_holder_group_token' => 'getAccountHolderGroupToken',
        'active' => 'getActive',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'birth_date' => 'getBirthDate',
        'city' => 'getCity',
        'company' => 'getCompany',
        'corporate_card_holder' => 'getCorporateCardHolder',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'honorific' => 'getHonorific',
        'id_card_expiration_date' => 'getIdCardExpirationDate',
        'id_card_number' => 'getIdCardNumber',
        'identifications' => 'getIdentifications',
        'ip_address' => 'getIpAddress',
        'last_name' => 'getLastName',
        'metadata' => 'getMetadata',
        'middle_name' => 'getMiddleName',
        'nationality' => 'getNationality',
        'notes' => 'getNotes',
        'parent_token' => 'getParentToken',
        'passport_expiration_date' => 'getPassportExpirationDate',
        'passport_number' => 'getPassportNumber',
        'password' => 'getPassword',
        'phone' => 'getPhone',
        'postal_code' => 'getPostalCode',
        'ssn' => 'getSsn',
        'state' => 'getState',
        'token' => 'getToken',
        'uses_parent_account' => 'getUsesParentAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const GENDER_F = 'F';
    const GENDER_M = 'M';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_F,
            self::GENDER_M,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_holder_group_token'] = $data['account_holder_group_token'] ?? null;
        $this->container['active'] = $data['active'] ?? true;
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['corporate_card_holder'] = $data['corporate_card_holder'] ?? false;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['honorific'] = $data['honorific'] ?? null;
        $this->container['id_card_expiration_date'] = $data['id_card_expiration_date'] ?? null;
        $this->container['id_card_number'] = $data['id_card_number'] ?? null;
        $this->container['identifications'] = $data['identifications'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['nationality'] = $data['nationality'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['parent_token'] = $data['parent_token'] ?? null;
        $this->container['passport_expiration_date'] = $data['passport_expiration_date'] ?? null;
        $this->container['passport_number'] = $data['passport_number'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['ssn'] = $data['ssn'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['uses_parent_account'] = $data['uses_parent_account'] ?? false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_holder_group_token']) && (mb_strlen($this->container['account_holder_group_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_holder_group_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['account_holder_group_token']) && (mb_strlen($this->container['account_holder_group_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_holder_group_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 255)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 40)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 255)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) < 0)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 40)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 0)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) > 1)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) < 0)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['honorific']) && (mb_strlen($this->container['honorific']) > 10)) {
            $invalidProperties[] = "invalid value for 'honorific', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['honorific']) && (mb_strlen($this->container['honorific']) < 0)) {
            $invalidProperties[] = "invalid value for 'honorific', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['id_card_number']) && (mb_strlen($this->container['id_card_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'id_card_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['id_card_number']) && (mb_strlen($this->container['id_card_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'id_card_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 39.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['middle_name']) && (mb_strlen($this->container['middle_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'middle_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) > 255)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) < 0)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 255)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) < 0)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['parent_token']) && (mb_strlen($this->container['parent_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'parent_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['parent_token']) && (mb_strlen($this->container['parent_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'parent_token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['passport_number']) && (mb_strlen($this->container['passport_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'passport_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['passport_number']) && (mb_strlen($this->container['passport_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'passport_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 255)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 0)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 32)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 0)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_holder_group_token
     *
     * @return string|null
     */
    public function getAccountHolderGroupToken()
    {
        return $this->container['account_holder_group_token'];
    }

    /**
     * Sets account_holder_group_token
     *
     * @param string|null $account_holder_group_token Associates the specified account holder group with the cardholder.  Send a `GET` request to `/accountholdergroups` to retrieve account holder group tokens.
     *
     * @return self
     */
    public function setAccountHolderGroupToken($account_holder_group_token)
    {
        if (!is_null($account_holder_group_token) && (mb_strlen($account_holder_group_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_holder_group_token when calling CardHolderModel., must be smaller than or equal to 36.');
        }
        if (!is_null($account_holder_group_token) && (mb_strlen($account_holder_group_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_holder_group_token when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['account_holder_group_token'] = $account_holder_group_token;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Specifies if the cardholder is in the `ACTIVE` state on the Marqeta platform.  *NOTE:* Do not set the value of the `user.active` field directly. Instead, use the `/usertransitions` endpoints to transition user resources between statuses. For more information on status changes, see <</core-api/user-transitions#postUsertransitions, Create User Transition>>.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 Cardholder's address.  *NOTE:* Required for KYC verification (US-based cardholders only). Cannot perform KYC if set to a PO Box.
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($address1) && (mb_strlen($address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Additional address information for the cardholder.  *NOTE:* Cannot perform KYC if set to a PO Box.
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($address2) && (mb_strlen($address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date Cardholder's date of birth.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City where the cardholder resides.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company name.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($company) && (mb_strlen($company) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets corporate_card_holder
     *
     * @return bool|null
     */
    public function getCorporateCardHolder()
    {
        return $this->container['corporate_card_holder'];
    }

    /**
     * Sets corporate_card_holder
     *
     * @param bool|null $corporate_card_holder Specifies if the cardholder holds a corporate card.
     *
     * @return self
     */
    public function setCorporateCardHolder($corporate_card_holder)
    {
        $this->container['corporate_card_holder'] = $corporate_card_holder;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country where the cardholder resides.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 40)) {
            throw new \InvalidArgumentException('invalid length for $country when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($country) && (mb_strlen($country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Valid email address of the cardholder.  This value must be unique among users.  *NOTE:* Required for KYC verification by certain banks (US-based cardholders only). To determine if you must provide an email address, contact your Marqeta representative.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($email) && (mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CardHolderModel., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Cardholder's first name.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($first_name) && (mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender of the cardholder.
     *
     * @return self
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($gender) && (mb_strlen($gender) > 1)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling CardHolderModel., must be smaller than or equal to 1.');
        }
        if (!is_null($gender) && (mb_strlen($gender) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets honorific
     *
     * @return string|null
     */
    public function getHonorific()
    {
        return $this->container['honorific'];
    }

    /**
     * Sets honorific
     *
     * @param string|null $honorific Cardholder's title or prefix: Dr., Miss, Mr., Ms., and so on.
     *
     * @return self
     */
    public function setHonorific($honorific)
    {
        if (!is_null($honorific) && (mb_strlen($honorific) > 10)) {
            throw new \InvalidArgumentException('invalid length for $honorific when calling CardHolderModel., must be smaller than or equal to 10.');
        }
        if (!is_null($honorific) && (mb_strlen($honorific) < 0)) {
            throw new \InvalidArgumentException('invalid length for $honorific when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['honorific'] = $honorific;

        return $this;
    }

    /**
     * Gets id_card_expiration_date
     *
     * @return string|null
     */
    public function getIdCardExpirationDate()
    {
        return $this->container['id_card_expiration_date'];
    }

    /**
     * Sets id_card_expiration_date
     *
     * @param string|null $id_card_expiration_date Expiration date of the cardholder's identification card.
     *
     * @return self
     */
    public function setIdCardExpirationDate($id_card_expiration_date)
    {
        $this->container['id_card_expiration_date'] = $id_card_expiration_date;

        return $this;
    }

    /**
     * Gets id_card_number
     *
     * @return string|null
     */
    public function getIdCardNumber()
    {
        return $this->container['id_card_number'];
    }

    /**
     * Sets id_card_number
     *
     * @param string|null $id_card_number Cardholder's identification card number.
     *
     * @return self
     */
    public function setIdCardNumber($id_card_number)
    {
        if (!is_null($id_card_number) && (mb_strlen($id_card_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id_card_number when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($id_card_number) && (mb_strlen($id_card_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id_card_number when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['id_card_number'] = $id_card_number;

        return $this;
    }

    /**
     * Gets identifications
     *
     * @return \OpenAPI\Client\Model\IdentificationRequestModel[]|null
     */
    public function getIdentifications()
    {
        return $this->container['identifications'];
    }

    /**
     * Sets identifications
     *
     * @param \OpenAPI\Client\Model\IdentificationRequestModel[]|null $identifications One or more objects containing identifications associated with the cardholder.
     *
     * @return self
     */
    public function setIdentifications($identifications)
    {
        $this->container['identifications'] = $identifications;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address Cardholder's IP address.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (!is_null($ip_address) && (mb_strlen($ip_address) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling CardHolderModel., must be smaller than or equal to 39.');
        }
        if (!is_null($ip_address) && (mb_strlen($ip_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Cardholder's last name.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($last_name) && (mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Associates any additional metadata you provide with the cardholder.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Cardholder's middle name.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (!is_null($middle_name) && (mb_strlen($middle_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($middle_name) && (mb_strlen($middle_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $middle_name when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality Cardholder's nationality.
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (!is_null($nationality) && (mb_strlen($nationality) > 255)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($nationality) && (mb_strlen($nationality) < 0)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Any additional information pertaining to the cardholder.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 255)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($notes) && (mb_strlen($notes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets parent_token
     *
     * @return string|null
     */
    public function getParentToken()
    {
        return $this->container['parent_token'];
    }

    /**
     * Sets parent_token
     *
     * @param string|null $parent_token Unique identifier of the parent user or business resource. Send a `GET` request to `/users` to retrieve user resource tokens or to `/businesses` to retrieve business resource tokens.  Required if `uses_parent_account = true`. This user or business is configured as the parent of the current user.
     *
     * @return self
     */
    public function setParentToken($parent_token)
    {
        if (!is_null($parent_token) && (mb_strlen($parent_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $parent_token when calling CardHolderModel., must be smaller than or equal to 36.');
        }
        if (!is_null($parent_token) && (mb_strlen($parent_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parent_token when calling CardHolderModel., must be bigger than or equal to 1.');
        }

        $this->container['parent_token'] = $parent_token;

        return $this;
    }

    /**
     * Gets passport_expiration_date
     *
     * @return string|null
     */
    public function getPassportExpirationDate()
    {
        return $this->container['passport_expiration_date'];
    }

    /**
     * Sets passport_expiration_date
     *
     * @param string|null $passport_expiration_date Expiration date of the cardholder's passport.
     *
     * @return self
     */
    public function setPassportExpirationDate($passport_expiration_date)
    {
        $this->container['passport_expiration_date'] = $passport_expiration_date;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string|null
     */
    public function getPassportNumber()
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string|null $passport_number Cardholder's passport number.
     *
     * @return self
     */
    public function setPassportNumber($passport_number)
    {
        if (!is_null($passport_number) && (mb_strlen($passport_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $passport_number when calling CardHolderModel., must be smaller than or equal to 40.');
        }
        if (!is_null($passport_number) && (mb_strlen($passport_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $passport_number when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password to the cardholder's user account on the Marqeta platform.  * Must contain at least one numeral + * Must contain at least one lowercase letter + * Must contain at least one uppercase letter + * Must contain at least one of these symbols: `@ # $ % ! ^ & * ( ) \\ _ + ~ ` - = [ ] { } , ; : ' \" , . / < > ?`
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($password) && (mb_strlen($password) < 0)) {
            throw new \InvalidArgumentException('invalid length for $password when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Telephone number of the cardholder (including area code), prepended by the `+` symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses.  *NOTE:* Required for KYC verification by certain banks (US-based cardholders only). To determine if you must provide a phone number, contact your Marqeta representative.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling CardHolderModel., must be smaller than or equal to 255.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code of the cardholder's address.  *NOTE:* Required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CardHolderModel., must be smaller than or equal to 10.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn Cardholder's Social Security Number (SSN).
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State or province where the cardholder resides.  *NOTE:* <</core-api/kyc-verification#_valid_state_provincial_and_territorial_abbreviations, Valid two-character abbreviation>> required for KYC verification (US-based cardholders only).
     *
     * @return self
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 32)) {
            throw new \InvalidArgumentException('invalid length for $state when calling CardHolderModel., must be smaller than or equal to 32.');
        }
        if (!is_null($state) && (mb_strlen($state) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state when calling CardHolderModel., must be bigger than or equal to 0.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the cardholder. If you do not include a token, the system generates one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardHolderModel., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardHolderModel., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets uses_parent_account
     *
     * @return bool|null
     */
    public function getUsesParentAccount()
    {
        return $this->container['uses_parent_account'];
    }

    /**
     * Sets uses_parent_account
     *
     * @param bool|null $uses_parent_account Indicates whether the child shares balances with the parent (`true`), or the child's balances are independent of the parent (`false`).  If set to `true`, you must also include a `parent_token` in the request. This value cannot be updated.
     *
     * @return self
     */
    public function setUsesParentAccount($uses_parent_account)
    {
        $this->container['uses_parent_account'] = $uses_parent_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


