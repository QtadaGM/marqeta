<?php
/**
 * BusinessCardholder
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BusinessCardholder Class Doc Comment
 *
 * @category Class
 * @description Contains information about a business.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BusinessCardholder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'business_cardholder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_holder_group_token' => 'string',
        'active' => 'bool',
        'attestation_consent' => 'bool',
        'attestation_date' => '\DateTime',
        'attester_name' => 'string',
        'attester_title' => 'string',
        'beneficial_owner1' => '\OpenAPI\Client\Model\BeneficialOwnerRequest',
        'beneficial_owner2' => '\OpenAPI\Client\Model\BeneficialOwnerRequest',
        'beneficial_owner3' => '\OpenAPI\Client\Model\BeneficialOwnerRequest',
        'beneficial_owner4' => '\OpenAPI\Client\Model\BeneficialOwnerRequest',
        'business_name_dba' => 'string',
        'business_name_legal' => 'string',
        'business_type' => 'string',
        'date_established' => '\DateTime',
        'duns_number' => 'string',
        'general_business_description' => 'string',
        'history' => 'string',
        'identifications' => '\OpenAPI\Client\Model\IdentificationRequestModel[]',
        'in_current_location_since' => '\DateTime',
        'incorporation' => '\OpenAPI\Client\Model\BusinessIncorporation',
        'international_office_locations' => 'string',
        'ip_address' => 'string',
        'metadata' => 'array<string,string>',
        'notes' => 'string',
        'office_location' => '\OpenAPI\Client\Model\AddressRequestModel',
        'password' => 'string',
        'phone' => 'string',
        'primary_contact' => '\OpenAPI\Client\Model\PrimaryContactInfoModel',
        'proprietor_is_beneficial_owner' => 'bool',
        'proprietor_or_officer' => '\OpenAPI\Client\Model\BusinessProprietor',
        'taxpayer_id' => 'string',
        'token' => 'string',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_holder_group_token' => null,
        'active' => null,
        'attestation_consent' => null,
        'attestation_date' => 'date-time',
        'attester_name' => null,
        'attester_title' => null,
        'beneficial_owner1' => null,
        'beneficial_owner2' => null,
        'beneficial_owner3' => null,
        'beneficial_owner4' => null,
        'business_name_dba' => null,
        'business_name_legal' => null,
        'business_type' => null,
        'date_established' => 'date-time',
        'duns_number' => null,
        'general_business_description' => null,
        'history' => null,
        'identifications' => null,
        'in_current_location_since' => 'date-time',
        'incorporation' => null,
        'international_office_locations' => null,
        'ip_address' => null,
        'metadata' => null,
        'notes' => null,
        'office_location' => null,
        'password' => null,
        'phone' => null,
        'primary_contact' => null,
        'proprietor_is_beneficial_owner' => null,
        'proprietor_or_officer' => null,
        'taxpayer_id' => null,
        'token' => null,
        'website' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_holder_group_token' => 'account_holder_group_token',
        'active' => 'active',
        'attestation_consent' => 'attestation_consent',
        'attestation_date' => 'attestation_date',
        'attester_name' => 'attester_name',
        'attester_title' => 'attester_title',
        'beneficial_owner1' => 'beneficial_owner1',
        'beneficial_owner2' => 'beneficial_owner2',
        'beneficial_owner3' => 'beneficial_owner3',
        'beneficial_owner4' => 'beneficial_owner4',
        'business_name_dba' => 'business_name_dba',
        'business_name_legal' => 'business_name_legal',
        'business_type' => 'business_type',
        'date_established' => 'date_established',
        'duns_number' => 'duns_number',
        'general_business_description' => 'general_business_description',
        'history' => 'history',
        'identifications' => 'identifications',
        'in_current_location_since' => 'in_current_location_since',
        'incorporation' => 'incorporation',
        'international_office_locations' => 'international_office_locations',
        'ip_address' => 'ip_address',
        'metadata' => 'metadata',
        'notes' => 'notes',
        'office_location' => 'office_location',
        'password' => 'password',
        'phone' => 'phone',
        'primary_contact' => 'primary_contact',
        'proprietor_is_beneficial_owner' => 'proprietor_is_beneficial_owner',
        'proprietor_or_officer' => 'proprietor_or_officer',
        'taxpayer_id' => 'taxpayer_id',
        'token' => 'token',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_holder_group_token' => 'setAccountHolderGroupToken',
        'active' => 'setActive',
        'attestation_consent' => 'setAttestationConsent',
        'attestation_date' => 'setAttestationDate',
        'attester_name' => 'setAttesterName',
        'attester_title' => 'setAttesterTitle',
        'beneficial_owner1' => 'setBeneficialOwner1',
        'beneficial_owner2' => 'setBeneficialOwner2',
        'beneficial_owner3' => 'setBeneficialOwner3',
        'beneficial_owner4' => 'setBeneficialOwner4',
        'business_name_dba' => 'setBusinessNameDba',
        'business_name_legal' => 'setBusinessNameLegal',
        'business_type' => 'setBusinessType',
        'date_established' => 'setDateEstablished',
        'duns_number' => 'setDunsNumber',
        'general_business_description' => 'setGeneralBusinessDescription',
        'history' => 'setHistory',
        'identifications' => 'setIdentifications',
        'in_current_location_since' => 'setInCurrentLocationSince',
        'incorporation' => 'setIncorporation',
        'international_office_locations' => 'setInternationalOfficeLocations',
        'ip_address' => 'setIpAddress',
        'metadata' => 'setMetadata',
        'notes' => 'setNotes',
        'office_location' => 'setOfficeLocation',
        'password' => 'setPassword',
        'phone' => 'setPhone',
        'primary_contact' => 'setPrimaryContact',
        'proprietor_is_beneficial_owner' => 'setProprietorIsBeneficialOwner',
        'proprietor_or_officer' => 'setProprietorOrOfficer',
        'taxpayer_id' => 'setTaxpayerId',
        'token' => 'setToken',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_holder_group_token' => 'getAccountHolderGroupToken',
        'active' => 'getActive',
        'attestation_consent' => 'getAttestationConsent',
        'attestation_date' => 'getAttestationDate',
        'attester_name' => 'getAttesterName',
        'attester_title' => 'getAttesterTitle',
        'beneficial_owner1' => 'getBeneficialOwner1',
        'beneficial_owner2' => 'getBeneficialOwner2',
        'beneficial_owner3' => 'getBeneficialOwner3',
        'beneficial_owner4' => 'getBeneficialOwner4',
        'business_name_dba' => 'getBusinessNameDba',
        'business_name_legal' => 'getBusinessNameLegal',
        'business_type' => 'getBusinessType',
        'date_established' => 'getDateEstablished',
        'duns_number' => 'getDunsNumber',
        'general_business_description' => 'getGeneralBusinessDescription',
        'history' => 'getHistory',
        'identifications' => 'getIdentifications',
        'in_current_location_since' => 'getInCurrentLocationSince',
        'incorporation' => 'getIncorporation',
        'international_office_locations' => 'getInternationalOfficeLocations',
        'ip_address' => 'getIpAddress',
        'metadata' => 'getMetadata',
        'notes' => 'getNotes',
        'office_location' => 'getOfficeLocation',
        'password' => 'getPassword',
        'phone' => 'getPhone',
        'primary_contact' => 'getPrimaryContact',
        'proprietor_is_beneficial_owner' => 'getProprietorIsBeneficialOwner',
        'proprietor_or_officer' => 'getProprietorOrOfficer',
        'taxpayer_id' => 'getTaxpayerId',
        'token' => 'getToken',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_holder_group_token'] = $data['account_holder_group_token'] ?? null;
        $this->container['active'] = $data['active'] ?? true;
        $this->container['attestation_consent'] = $data['attestation_consent'] ?? false;
        $this->container['attestation_date'] = $data['attestation_date'] ?? null;
        $this->container['attester_name'] = $data['attester_name'] ?? null;
        $this->container['attester_title'] = $data['attester_title'] ?? null;
        $this->container['beneficial_owner1'] = $data['beneficial_owner1'] ?? null;
        $this->container['beneficial_owner2'] = $data['beneficial_owner2'] ?? null;
        $this->container['beneficial_owner3'] = $data['beneficial_owner3'] ?? null;
        $this->container['beneficial_owner4'] = $data['beneficial_owner4'] ?? null;
        $this->container['business_name_dba'] = $data['business_name_dba'] ?? null;
        $this->container['business_name_legal'] = $data['business_name_legal'] ?? null;
        $this->container['business_type'] = $data['business_type'] ?? null;
        $this->container['date_established'] = $data['date_established'] ?? null;
        $this->container['duns_number'] = $data['duns_number'] ?? null;
        $this->container['general_business_description'] = $data['general_business_description'] ?? null;
        $this->container['history'] = $data['history'] ?? null;
        $this->container['identifications'] = $data['identifications'] ?? null;
        $this->container['in_current_location_since'] = $data['in_current_location_since'] ?? null;
        $this->container['incorporation'] = $data['incorporation'] ?? null;
        $this->container['international_office_locations'] = $data['international_office_locations'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['office_location'] = $data['office_location'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['primary_contact'] = $data['primary_contact'] ?? null;
        $this->container['proprietor_is_beneficial_owner'] = $data['proprietor_is_beneficial_owner'] ?? false;
        $this->container['proprietor_or_officer'] = $data['proprietor_or_officer'] ?? null;
        $this->container['taxpayer_id'] = $data['taxpayer_id'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_holder_group_token']) && (mb_strlen($this->container['account_holder_group_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'account_holder_group_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['account_holder_group_token']) && (mb_strlen($this->container['account_holder_group_token']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_holder_group_token', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attester_name']) && (mb_strlen($this->container['attester_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'attester_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['attester_name']) && (mb_strlen($this->container['attester_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'attester_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attester_title']) && (mb_strlen($this->container['attester_title']) > 64)) {
            $invalidProperties[] = "invalid value for 'attester_title', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['attester_title']) && (mb_strlen($this->container['attester_title']) < 0)) {
            $invalidProperties[] = "invalid value for 'attester_title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['business_name_dba']) && (mb_strlen($this->container['business_name_dba']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_name_dba', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['business_name_dba']) && (mb_strlen($this->container['business_name_dba']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_name_dba', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['business_name_legal']) && (mb_strlen($this->container['business_name_legal']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_name_legal', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['business_name_legal']) && (mb_strlen($this->container['business_name_legal']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_name_legal', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['business_type']) && (mb_strlen($this->container['business_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['business_type']) && (mb_strlen($this->container['business_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['duns_number']) && (mb_strlen($this->container['duns_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'duns_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['duns_number']) && (mb_strlen($this->container['duns_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'duns_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['general_business_description']) && (mb_strlen($this->container['general_business_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'general_business_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['general_business_description']) && (mb_strlen($this->container['general_business_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'general_business_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['history']) && (mb_strlen($this->container['history']) > 255)) {
            $invalidProperties[] = "invalid value for 'history', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['history']) && (mb_strlen($this->container['history']) < 0)) {
            $invalidProperties[] = "invalid value for 'history', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['international_office_locations']) && (mb_strlen($this->container['international_office_locations']) > 255)) {
            $invalidProperties[] = "invalid value for 'international_office_locations', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['international_office_locations']) && (mb_strlen($this->container['international_office_locations']) < 0)) {
            $invalidProperties[] = "invalid value for 'international_office_locations', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 39.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 255)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) < 0)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 255)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxpayer_id']) && (mb_strlen($this->container['taxpayer_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['taxpayer_id']) && (mb_strlen($this->container['taxpayer_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) < 0)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_holder_group_token
     *
     * @return string|null
     */
    public function getAccountHolderGroupToken()
    {
        return $this->container['account_holder_group_token'];
    }

    /**
     * Sets account_holder_group_token
     *
     * @param string|null $account_holder_group_token Existing account holder group token that associates the specified account holder group with the business. Send a `GET` request to `/accountholdergroups` to retrieve account holder group tokens.
     *
     * @return self
     */
    public function setAccountHolderGroupToken($account_holder_group_token)
    {
        if (!is_null($account_holder_group_token) && (mb_strlen($account_holder_group_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $account_holder_group_token when calling BusinessCardholder., must be smaller than or equal to 36.');
        }
        if (!is_null($account_holder_group_token) && (mb_strlen($account_holder_group_token) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_holder_group_token when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['account_holder_group_token'] = $account_holder_group_token;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Specifies if the business is in the `ACTIVE` state on the Marqeta platform.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets attestation_consent
     *
     * @return bool|null
     */
    public function getAttestationConsent()
    {
        return $this->container['attestation_consent'];
    }

    /**
     * Sets attestation_consent
     *
     * @param bool|null $attestation_consent Indicates that the attester agrees that the information provided is correct and truthful.  This field is required for KYC verification (US-based accounts only).
     *
     * @return self
     */
    public function setAttestationConsent($attestation_consent)
    {
        $this->container['attestation_consent'] = $attestation_consent;

        return $this;
    }

    /**
     * Gets attestation_date
     *
     * @return \DateTime|null
     */
    public function getAttestationDate()
    {
        return $this->container['attestation_date'];
    }

    /**
     * Sets attestation_date
     *
     * @param \DateTime|null $attestation_date Timestamp of the attestation.  This field is required for KYC verification (US-based accounts only).
     *
     * @return self
     */
    public function setAttestationDate($attestation_date)
    {
        $this->container['attestation_date'] = $attestation_date;

        return $this;
    }

    /**
     * Gets attester_name
     *
     * @return string|null
     */
    public function getAttesterName()
    {
        return $this->container['attester_name'];
    }

    /**
     * Sets attester_name
     *
     * @param string|null $attester_name Name of the attester for KYC verification.  This field is required for KYC verification (US-based accounts only).
     *
     * @return self
     */
    public function setAttesterName($attester_name)
    {
        if (!is_null($attester_name) && (mb_strlen($attester_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $attester_name when calling BusinessCardholder., must be smaller than or equal to 64.');
        }
        if (!is_null($attester_name) && (mb_strlen($attester_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attester_name when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['attester_name'] = $attester_name;

        return $this;
    }

    /**
     * Gets attester_title
     *
     * @return string|null
     */
    public function getAttesterTitle()
    {
        return $this->container['attester_title'];
    }

    /**
     * Sets attester_title
     *
     * @param string|null $attester_title Title of the attester for KYC verification.
     *
     * @return self
     */
    public function setAttesterTitle($attester_title)
    {
        if (!is_null($attester_title) && (mb_strlen($attester_title) > 64)) {
            throw new \InvalidArgumentException('invalid length for $attester_title when calling BusinessCardholder., must be smaller than or equal to 64.');
        }
        if (!is_null($attester_title) && (mb_strlen($attester_title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attester_title when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['attester_title'] = $attester_title;

        return $this;
    }

    /**
     * Gets beneficial_owner1
     *
     * @return \OpenAPI\Client\Model\BeneficialOwnerRequest|null
     */
    public function getBeneficialOwner1()
    {
        return $this->container['beneficial_owner1'];
    }

    /**
     * Sets beneficial_owner1
     *
     * @param \OpenAPI\Client\Model\BeneficialOwnerRequest|null $beneficial_owner1 beneficial_owner1
     *
     * @return self
     */
    public function setBeneficialOwner1($beneficial_owner1)
    {
        $this->container['beneficial_owner1'] = $beneficial_owner1;

        return $this;
    }

    /**
     * Gets beneficial_owner2
     *
     * @return \OpenAPI\Client\Model\BeneficialOwnerRequest|null
     */
    public function getBeneficialOwner2()
    {
        return $this->container['beneficial_owner2'];
    }

    /**
     * Sets beneficial_owner2
     *
     * @param \OpenAPI\Client\Model\BeneficialOwnerRequest|null $beneficial_owner2 beneficial_owner2
     *
     * @return self
     */
    public function setBeneficialOwner2($beneficial_owner2)
    {
        $this->container['beneficial_owner2'] = $beneficial_owner2;

        return $this;
    }

    /**
     * Gets beneficial_owner3
     *
     * @return \OpenAPI\Client\Model\BeneficialOwnerRequest|null
     */
    public function getBeneficialOwner3()
    {
        return $this->container['beneficial_owner3'];
    }

    /**
     * Sets beneficial_owner3
     *
     * @param \OpenAPI\Client\Model\BeneficialOwnerRequest|null $beneficial_owner3 beneficial_owner3
     *
     * @return self
     */
    public function setBeneficialOwner3($beneficial_owner3)
    {
        $this->container['beneficial_owner3'] = $beneficial_owner3;

        return $this;
    }

    /**
     * Gets beneficial_owner4
     *
     * @return \OpenAPI\Client\Model\BeneficialOwnerRequest|null
     */
    public function getBeneficialOwner4()
    {
        return $this->container['beneficial_owner4'];
    }

    /**
     * Sets beneficial_owner4
     *
     * @param \OpenAPI\Client\Model\BeneficialOwnerRequest|null $beneficial_owner4 beneficial_owner4
     *
     * @return self
     */
    public function setBeneficialOwner4($beneficial_owner4)
    {
        $this->container['beneficial_owner4'] = $beneficial_owner4;

        return $this;
    }

    /**
     * Gets business_name_dba
     *
     * @return string|null
     */
    public function getBusinessNameDba()
    {
        return $this->container['business_name_dba'];
    }

    /**
     * Sets business_name_dba
     *
     * @param string|null $business_name_dba Fictitious business name (\"Doing Business As\" or DBA).  This field is required for KYC verification (US-based accounts only). If your business does not use a fictitious business name, enter your legal business name again in this field.
     *
     * @return self
     */
    public function setBusinessNameDba($business_name_dba)
    {
        if (!is_null($business_name_dba) && (mb_strlen($business_name_dba) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_name_dba when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($business_name_dba) && (mb_strlen($business_name_dba) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_name_dba when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['business_name_dba'] = $business_name_dba;

        return $this;
    }

    /**
     * Gets business_name_legal
     *
     * @return string|null
     */
    public function getBusinessNameLegal()
    {
        return $this->container['business_name_legal'];
    }

    /**
     * Sets business_name_legal
     *
     * @param string|null $business_name_legal Legal name of business.  This field is required for KYC verification (US-based accounts only).
     *
     * @return self
     */
    public function setBusinessNameLegal($business_name_legal)
    {
        if (!is_null($business_name_legal) && (mb_strlen($business_name_legal) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_name_legal when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($business_name_legal) && (mb_strlen($business_name_legal) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_name_legal when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['business_name_legal'] = $business_name_legal;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string|null
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string|null $business_type Indicates the type of business, for example B2B (business-to-business) or B2C (business-to-consumer).
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        if (!is_null($business_type) && (mb_strlen($business_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_type when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($business_type) && (mb_strlen($business_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_type when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets date_established
     *
     * @return \DateTime|null
     */
    public function getDateEstablished()
    {
        return $this->container['date_established'];
    }

    /**
     * Sets date_established
     *
     * @param \DateTime|null $date_established Date when the business was established.
     *
     * @return self
     */
    public function setDateEstablished($date_established)
    {
        $this->container['date_established'] = $date_established;

        return $this;
    }

    /**
     * Gets duns_number
     *
     * @return string|null
     */
    public function getDunsNumber()
    {
        return $this->container['duns_number'];
    }

    /**
     * Sets duns_number
     *
     * @param string|null $duns_number Data Universal Numbering System (DUNS) number of the business.
     *
     * @return self
     */
    public function setDunsNumber($duns_number)
    {
        if (!is_null($duns_number) && (mb_strlen($duns_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $duns_number when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($duns_number) && (mb_strlen($duns_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $duns_number when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['duns_number'] = $duns_number;

        return $this;
    }

    /**
     * Gets general_business_description
     *
     * @return string|null
     */
    public function getGeneralBusinessDescription()
    {
        return $this->container['general_business_description'];
    }

    /**
     * Sets general_business_description
     *
     * @param string|null $general_business_description General description of the business.
     *
     * @return self
     */
    public function setGeneralBusinessDescription($general_business_description)
    {
        if (!is_null($general_business_description) && (mb_strlen($general_business_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $general_business_description when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($general_business_description) && (mb_strlen($general_business_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $general_business_description when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['general_business_description'] = $general_business_description;

        return $this;
    }

    /**
     * Gets history
     *
     * @return string|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param string|null $history History of the business.
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (!is_null($history) && (mb_strlen($history) > 255)) {
            throw new \InvalidArgumentException('invalid length for $history when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($history) && (mb_strlen($history) < 0)) {
            throw new \InvalidArgumentException('invalid length for $history when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets identifications
     *
     * @return \OpenAPI\Client\Model\IdentificationRequestModel[]|null
     */
    public function getIdentifications()
    {
        return $this->container['identifications'];
    }

    /**
     * Sets identifications
     *
     * @param \OpenAPI\Client\Model\IdentificationRequestModel[]|null $identifications One or more objects containing identifications associated with the business.
     *
     * @return self
     */
    public function setIdentifications($identifications)
    {
        $this->container['identifications'] = $identifications;

        return $this;
    }

    /**
     * Gets in_current_location_since
     *
     * @return \DateTime|null
     */
    public function getInCurrentLocationSince()
    {
        return $this->container['in_current_location_since'];
    }

    /**
     * Sets in_current_location_since
     *
     * @param \DateTime|null $in_current_location_since Date on which the business office opened in its current location.
     *
     * @return self
     */
    public function setInCurrentLocationSince($in_current_location_since)
    {
        $this->container['in_current_location_since'] = $in_current_location_since;

        return $this;
    }

    /**
     * Gets incorporation
     *
     * @return \OpenAPI\Client\Model\BusinessIncorporation|null
     */
    public function getIncorporation()
    {
        return $this->container['incorporation'];
    }

    /**
     * Sets incorporation
     *
     * @param \OpenAPI\Client\Model\BusinessIncorporation|null $incorporation incorporation
     *
     * @return self
     */
    public function setIncorporation($incorporation)
    {
        $this->container['incorporation'] = $incorporation;

        return $this;
    }

    /**
     * Gets international_office_locations
     *
     * @return string|null
     */
    public function getInternationalOfficeLocations()
    {
        return $this->container['international_office_locations'];
    }

    /**
     * Sets international_office_locations
     *
     * @param string|null $international_office_locations Locations of the business' offices outside the US.
     *
     * @return self
     */
    public function setInternationalOfficeLocations($international_office_locations)
    {
        if (!is_null($international_office_locations) && (mb_strlen($international_office_locations) > 255)) {
            throw new \InvalidArgumentException('invalid length for $international_office_locations when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($international_office_locations) && (mb_strlen($international_office_locations) < 0)) {
            throw new \InvalidArgumentException('invalid length for $international_office_locations when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['international_office_locations'] = $international_office_locations;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address IP address of the business.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (!is_null($ip_address) && (mb_strlen($ip_address) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling BusinessCardholder., must be smaller than or equal to 39.');
        }
        if (!is_null($ip_address) && (mb_strlen($ip_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Associates any additional metadata you provide with the business.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Any additional information pertaining to the business.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 255)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($notes) && (mb_strlen($notes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets office_location
     *
     * @return \OpenAPI\Client\Model\AddressRequestModel|null
     */
    public function getOfficeLocation()
    {
        return $this->container['office_location'];
    }

    /**
     * Sets office_location
     *
     * @param \OpenAPI\Client\Model\AddressRequestModel|null $office_location office_location
     *
     * @return self
     */
    public function setOfficeLocation($office_location)
    {
        $this->container['office_location'] = $office_location;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password for the business account on the Marqeta platform.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($password) && (mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling BusinessCardholder., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone 10-digit telephone number of business.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets primary_contact
     *
     * @return \OpenAPI\Client\Model\PrimaryContactInfoModel|null
     */
    public function getPrimaryContact()
    {
        return $this->container['primary_contact'];
    }

    /**
     * Sets primary_contact
     *
     * @param \OpenAPI\Client\Model\PrimaryContactInfoModel|null $primary_contact primary_contact
     *
     * @return self
     */
    public function setPrimaryContact($primary_contact)
    {
        $this->container['primary_contact'] = $primary_contact;

        return $this;
    }

    /**
     * Gets proprietor_is_beneficial_owner
     *
     * @return bool|null
     */
    public function getProprietorIsBeneficialOwner()
    {
        return $this->container['proprietor_is_beneficial_owner'];
    }

    /**
     * Sets proprietor_is_beneficial_owner
     *
     * @param bool|null $proprietor_is_beneficial_owner Indicates that the proprietor or officer of the business is also a beneficial owner.  This field is required for KYC verification if the business proprietor or officer is also a beneficial owner.
     *
     * @return self
     */
    public function setProprietorIsBeneficialOwner($proprietor_is_beneficial_owner)
    {
        $this->container['proprietor_is_beneficial_owner'] = $proprietor_is_beneficial_owner;

        return $this;
    }

    /**
     * Gets proprietor_or_officer
     *
     * @return \OpenAPI\Client\Model\BusinessProprietor|null
     */
    public function getProprietorOrOfficer()
    {
        return $this->container['proprietor_or_officer'];
    }

    /**
     * Sets proprietor_or_officer
     *
     * @param \OpenAPI\Client\Model\BusinessProprietor|null $proprietor_or_officer proprietor_or_officer
     *
     * @return self
     */
    public function setProprietorOrOfficer($proprietor_or_officer)
    {
        $this->container['proprietor_or_officer'] = $proprietor_or_officer;

        return $this;
    }

    /**
     * Gets taxpayer_id
     *
     * @return string|null
     */
    public function getTaxpayerId()
    {
        return $this->container['taxpayer_id'];
    }

    /**
     * Sets taxpayer_id
     *
     * @param string|null $taxpayer_id Taxpayer identifier of the business.
     *
     * @return self
     */
    public function setTaxpayerId($taxpayer_id)
    {
        if (!is_null($taxpayer_id) && (mb_strlen($taxpayer_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($taxpayer_id) && (mb_strlen($taxpayer_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['taxpayer_id'] = $taxpayer_id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the business resource.  If you do not include a token, the system generates one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling BusinessCardholder., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling BusinessCardholder., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website URL of the business' website.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling BusinessCardholder., must be smaller than or equal to 255.');
        }
        if (!is_null($website) && (mb_strlen($website) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website when calling BusinessCardholder., must be bigger than or equal to 0.');
        }

        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


