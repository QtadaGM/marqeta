<?php
/**
 * ChargebackResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChargebackResponse Class Doc Comment
 *
 * @category Class
 * @description Contains the chargeback object associated with this transaction if a chargeback has been initiated.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChargebackResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'chargeback_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'channel' => 'string',
        'created_time' => '\DateTime',
        'credit_user' => 'bool',
        'last_modified_time' => '\DateTime',
        'memo' => 'string',
        'network' => 'string',
        'network_case_id' => 'string',
        'reason_code' => 'string',
        'state' => 'string',
        'token' => 'string',
        'transaction_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'channel' => null,
        'created_time' => 'date-time',
        'credit_user' => null,
        'last_modified_time' => 'date-time',
        'memo' => null,
        'network' => null,
        'network_case_id' => null,
        'reason_code' => null,
        'state' => null,
        'token' => null,
        'transaction_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'channel' => 'channel',
        'created_time' => 'created_time',
        'credit_user' => 'credit_user',
        'last_modified_time' => 'last_modified_time',
        'memo' => 'memo',
        'network' => 'network',
        'network_case_id' => 'network_case_id',
        'reason_code' => 'reason_code',
        'state' => 'state',
        'token' => 'token',
        'transaction_token' => 'transaction_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'channel' => 'setChannel',
        'created_time' => 'setCreatedTime',
        'credit_user' => 'setCreditUser',
        'last_modified_time' => 'setLastModifiedTime',
        'memo' => 'setMemo',
        'network' => 'setNetwork',
        'network_case_id' => 'setNetworkCaseId',
        'reason_code' => 'setReasonCode',
        'state' => 'setState',
        'token' => 'setToken',
        'transaction_token' => 'setTransactionToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'channel' => 'getChannel',
        'created_time' => 'getCreatedTime',
        'credit_user' => 'getCreditUser',
        'last_modified_time' => 'getLastModifiedTime',
        'memo' => 'getMemo',
        'network' => 'getNetwork',
        'network_case_id' => 'getNetworkCaseId',
        'reason_code' => 'getReasonCode',
        'state' => 'getState',
        'token' => 'getToken',
        'transaction_token' => 'getTransactionToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHANNEL_GATEWAY = 'GATEWAY';
    const CHANNEL_GATEWAY_AUTOMATED = 'GATEWAY_AUTOMATED';
    const CHANNEL_ISSUER = 'ISSUER';
    const CHANNEL_ISSUER_AUTOMATED = 'ISSUER_AUTOMATED';
    const NETWORK_MARQETA = 'MARQETA';
    const NETWORK_DISCOVER = 'DISCOVER';
    const NETWORK_MASTERCARD = 'MASTERCARD';
    const NETWORK_PULSE = 'PULSE';
    const NETWORK_VISA = 'VISA';
    const STATE_INITIATED = 'INITIATED';
    const STATE_REPRESENTMENT = 'REPRESENTMENT';
    const STATE_PREARBITRATION = 'PREARBITRATION';
    const STATE_ARBITRATION = 'ARBITRATION';
    const STATE_CASE_WON = 'CASE_WON';
    const STATE_CASE_LOST = 'CASE_LOST';
    const STATE_NETWORK_REJECTED = 'NETWORK_REJECTED';
    const STATE_WITHDRAWN = 'WITHDRAWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_GATEWAY,
            self::CHANNEL_GATEWAY_AUTOMATED,
            self::CHANNEL_ISSUER,
            self::CHANNEL_ISSUER_AUTOMATED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAllowableValues()
    {
        return [
            self::NETWORK_MARQETA,
            self::NETWORK_DISCOVER,
            self::NETWORK_MASTERCARD,
            self::NETWORK_PULSE,
            self::NETWORK_VISA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_INITIATED,
            self::STATE_REPRESENTMENT,
            self::STATE_PREARBITRATION,
            self::STATE_ARBITRATION,
            self::STATE_CASE_WON,
            self::STATE_CASE_LOST,
            self::STATE_NETWORK_REJECTED,
            self::STATE_WITHDRAWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['credit_user'] = $data['credit_user'] ?? false;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['network_case_id'] = $data['network_case_id'] ?? null;
        $this->container['reason_code'] = $data['reason_code'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.01.";
        }

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['credit_user'] === null) {
            $invalidProperties[] = "'credit_user' can't be null";
        }
        if ($this->container['last_modified_time'] === null) {
            $invalidProperties[] = "'last_modified_time' can't be null";
        }
        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 1024)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        $allowedValues = $this->getNetworkAllowableValues();
        if (!is_null($this->container['network']) && !in_array($this->container['network'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network', must be one of '%s'",
                $this->container['network'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['network_case_id']) && (mb_strlen($this->container['network_case_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'network_case_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['network_case_id']) && (mb_strlen($this->container['network_case_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'network_case_id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transaction_token'] === null) {
            $invalidProperties[] = "'transaction_token' can't be null";
        }
        if ((mb_strlen($this->container['transaction_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'transaction_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['transaction_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of the chargeback.
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (($amount < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ChargebackResponse., must be bigger than or equal to 0.01.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Channel the chargeback came through.
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the chargeback was created. Not returned for transactions when the associated chargeback is in the `INITIATED` state.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets credit_user
     *
     * @return bool
     */
    public function getCreditUser()
    {
        return $this->container['credit_user'];
    }

    /**
     * Sets credit_user
     *
     * @param bool $credit_user Whether to credit the user for the chargeback amount.
     *
     * @return self
     */
    public function setCreditUser($credit_user)
    {
        $this->container['credit_user'] = $credit_user;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime $last_modified_time Date and time when the chargeback was last modified. Not returned for transactions when the associated chargeback is in the `INITIATED` state.
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Additional comments about the chargeback.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (!is_null($memo) && (mb_strlen($memo) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling ChargebackResponse., must be smaller than or equal to 1024.');
        }
        if (!is_null($memo) && (mb_strlen($memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling ChargebackResponse., must be bigger than or equal to 1.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network Network handling the chargeback.
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $allowedValues = $this->getNetworkAllowableValues();
        if (!in_array($network, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network', must be one of '%s'",
                    $network,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets network_case_id
     *
     * @return string|null
     */
    public function getNetworkCaseId()
    {
        return $this->container['network_case_id'];
    }

    /**
     * Sets network_case_id
     *
     * @param string|null $network_case_id Network-assigned identifier of the chargeback.
     *
     * @return self
     */
    public function setNetworkCaseId($network_case_id)
    {
        if (!is_null($network_case_id) && (mb_strlen($network_case_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $network_case_id when calling ChargebackResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($network_case_id) && (mb_strlen($network_case_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $network_case_id when calling ChargebackResponse., must be bigger than or equal to 0.');
        }

        $this->container['network_case_id'] = $network_case_id;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Identifies the standardized reason for the chargeback.
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the case.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the chargeback.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling ChargebackResponse., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling ChargebackResponse., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string $transaction_token Unique identifier of the transaction being charged back.
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        if ((mb_strlen($transaction_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $transaction_token when calling ChargebackResponse., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($transaction_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_token when calling ChargebackResponse., must be bigger than or equal to 1.');
        }

        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


