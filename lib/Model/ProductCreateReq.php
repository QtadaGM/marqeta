<?php
/**
 * ProductCreateReq
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductCreateReq Class Doc Comment
 *
 * @category Class
 * @description Specifies shared details for a credit program.  Once set to &#x60;ACTIVE&#x60;, cannot be edited or deleted.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductCreateReq implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductCreateReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_product_tokens' => 'string[]',
        'classification' => '\OpenAPI\Client\Model\ProductClassification',
        'config' => '\OpenAPI\Client\Model\ProductConfig',
        'credit_line' => '\OpenAPI\Client\Model\ProductCreditLine',
        'currency_code' => '\OpenAPI\Client\Model\CurrencyCode',
        'description' => 'string',
        'interest_calculation' => '\OpenAPI\Client\Model\InterestCalculation',
        'min_payment_calculation' => '\OpenAPI\Client\Model\ProductMinPaymentCalculation',
        'min_payment_flat_amount' => 'float',
        'min_payment_percentage' => 'float',
        'name' => 'string',
        'payment_allocation_order' => '\OpenAPI\Client\Model\PaymentAllocationOrderEnum[]',
        'product_sub_type' => '\OpenAPI\Client\Model\ProductSubType',
        'product_type' => '\OpenAPI\Client\Model\ProductType',
        'status' => '\OpenAPI\Client\Model\ResourceStatus',
        'token' => 'string',
        'usage' => '\OpenAPI\Client\Model\BalanceType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_product_tokens' => null,
        'classification' => null,
        'config' => null,
        'credit_line' => null,
        'currency_code' => null,
        'description' => null,
        'interest_calculation' => null,
        'min_payment_calculation' => null,
        'min_payment_flat_amount' => null,
        'min_payment_percentage' => null,
        'name' => null,
        'payment_allocation_order' => null,
        'product_sub_type' => null,
        'product_type' => null,
        'status' => null,
        'token' => null,
        'usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_product_tokens' => 'card_product_tokens',
        'classification' => 'classification',
        'config' => 'config',
        'credit_line' => 'credit_line',
        'currency_code' => 'currency_code',
        'description' => 'description',
        'interest_calculation' => 'interest_calculation',
        'min_payment_calculation' => 'min_payment_calculation',
        'min_payment_flat_amount' => 'min_payment_flat_amount',
        'min_payment_percentage' => 'min_payment_percentage',
        'name' => 'name',
        'payment_allocation_order' => 'payment_allocation_order',
        'product_sub_type' => 'product_sub_type',
        'product_type' => 'product_type',
        'status' => 'status',
        'token' => 'token',
        'usage' => 'usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_product_tokens' => 'setCardProductTokens',
        'classification' => 'setClassification',
        'config' => 'setConfig',
        'credit_line' => 'setCreditLine',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'interest_calculation' => 'setInterestCalculation',
        'min_payment_calculation' => 'setMinPaymentCalculation',
        'min_payment_flat_amount' => 'setMinPaymentFlatAmount',
        'min_payment_percentage' => 'setMinPaymentPercentage',
        'name' => 'setName',
        'payment_allocation_order' => 'setPaymentAllocationOrder',
        'product_sub_type' => 'setProductSubType',
        'product_type' => 'setProductType',
        'status' => 'setStatus',
        'token' => 'setToken',
        'usage' => 'setUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_product_tokens' => 'getCardProductTokens',
        'classification' => 'getClassification',
        'config' => 'getConfig',
        'credit_line' => 'getCreditLine',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'interest_calculation' => 'getInterestCalculation',
        'min_payment_calculation' => 'getMinPaymentCalculation',
        'min_payment_flat_amount' => 'getMinPaymentFlatAmount',
        'min_payment_percentage' => 'getMinPaymentPercentage',
        'name' => 'getName',
        'payment_allocation_order' => 'getPaymentAllocationOrder',
        'product_sub_type' => 'getProductSubType',
        'product_type' => 'getProductType',
        'status' => 'getStatus',
        'token' => 'getToken',
        'usage' => 'getUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_product_tokens'] = $data['card_product_tokens'] ?? null;
        $this->container['classification'] = $data['classification'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
        $this->container['credit_line'] = $data['credit_line'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['interest_calculation'] = $data['interest_calculation'] ?? null;
        $this->container['min_payment_calculation'] = $data['min_payment_calculation'] ?? null;
        $this->container['min_payment_flat_amount'] = $data['min_payment_flat_amount'] ?? null;
        $this->container['min_payment_percentage'] = $data['min_payment_percentage'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['payment_allocation_order'] = $data['payment_allocation_order'] ?? null;
        $this->container['product_sub_type'] = $data['product_sub_type'] ?? null;
        $this->container['product_type'] = $data['product_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['usage'] = $data['usage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_product_tokens'] === null) {
            $invalidProperties[] = "'card_product_tokens' can't be null";
        }
        if ((count($this->container['card_product_tokens']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_product_tokens', number of items must be greater than or equal to 1.";
        }

        if ($this->container['classification'] === null) {
            $invalidProperties[] = "'classification' can't be null";
        }
        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        if ($this->container['credit_line'] === null) {
            $invalidProperties[] = "'credit_line' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['interest_calculation'] === null) {
            $invalidProperties[] = "'interest_calculation' can't be null";
        }
        if ($this->container['min_payment_flat_amount'] === null) {
            $invalidProperties[] = "'min_payment_flat_amount' can't be null";
        }
        if (($this->container['min_payment_flat_amount'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'min_payment_flat_amount', must be bigger than or equal to 0.01.";
        }

        if ($this->container['min_payment_percentage'] === null) {
            $invalidProperties[] = "'min_payment_percentage' can't be null";
        }
        if (($this->container['min_payment_percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'min_payment_percentage', must be smaller than or equal to 100.";
        }

        if (($this->container['min_payment_percentage'] < 0.00010)) {
            $invalidProperties[] = "invalid value for 'min_payment_percentage', must be bigger than or equal to 0.00010.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['payment_allocation_order'] === null) {
            $invalidProperties[] = "'payment_allocation_order' can't be null";
        }
        if ((count($this->container['payment_allocation_order']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_allocation_order', number of items must be greater than or equal to 1.";
        }

        if ($this->container['product_sub_type'] === null) {
            $invalidProperties[] = "'product_sub_type' can't be null";
        }
        if ($this->container['product_type'] === null) {
            $invalidProperties[] = "'product_type' can't be null";
        }
        if (!is_null($this->container['token']) && (mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['token']) && !preg_match("/(?!^ +$)^.+$/", $this->container['token'])) {
            $invalidProperties[] = "invalid value for 'token', must be conform to the pattern /(?!^ +$)^.+$/.";
        }

        if ($this->container['usage'] === null) {
            $invalidProperties[] = "'usage' can't be null";
        }
        if ((count($this->container['usage']) < 1)) {
            $invalidProperties[] = "invalid value for 'usage', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_product_tokens
     *
     * @return string[]
     */
    public function getCardProductTokens()
    {
        return $this->container['card_product_tokens'];
    }

    /**
     * Sets card_product_tokens
     *
     * @param string[] $card_product_tokens One or more associated card product tokens.
     *
     * @return self
     */
    public function setCardProductTokens($card_product_tokens)
    {


        if ((count($card_product_tokens) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_product_tokens when calling ProductCreateReq., number of items must be greater than or equal to 1.');
        }
        $this->container['card_product_tokens'] = $card_product_tokens;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return \OpenAPI\Client\Model\ProductClassification
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param \OpenAPI\Client\Model\ProductClassification $classification classification
     *
     * @return self
     */
    public function setClassification($classification)
    {
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\ProductConfig
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\ProductConfig $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets credit_line
     *
     * @return \OpenAPI\Client\Model\ProductCreditLine
     */
    public function getCreditLine()
    {
        return $this->container['credit_line'];
    }

    /**
     * Sets credit_line
     *
     * @param \OpenAPI\Client\Model\ProductCreditLine $credit_line credit_line
     *
     * @return self
     */
    public function setCreditLine($credit_line)
    {
        $this->container['credit_line'] = $credit_line;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return \OpenAPI\Client\Model\CurrencyCode
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param \OpenAPI\Client\Model\CurrencyCode $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the credit product.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets interest_calculation
     *
     * @return \OpenAPI\Client\Model\InterestCalculation
     */
    public function getInterestCalculation()
    {
        return $this->container['interest_calculation'];
    }

    /**
     * Sets interest_calculation
     *
     * @param \OpenAPI\Client\Model\InterestCalculation $interest_calculation interest_calculation
     *
     * @return self
     */
    public function setInterestCalculation($interest_calculation)
    {
        $this->container['interest_calculation'] = $interest_calculation;

        return $this;
    }

    /**
     * Gets min_payment_calculation
     *
     * @return \OpenAPI\Client\Model\ProductMinPaymentCalculation|null
     */
    public function getMinPaymentCalculation()
    {
        return $this->container['min_payment_calculation'];
    }

    /**
     * Sets min_payment_calculation
     *
     * @param \OpenAPI\Client\Model\ProductMinPaymentCalculation|null $min_payment_calculation min_payment_calculation
     *
     * @return self
     */
    public function setMinPaymentCalculation($min_payment_calculation)
    {
        $this->container['min_payment_calculation'] = $min_payment_calculation;

        return $this;
    }

    /**
     * Gets min_payment_flat_amount
     *
     * @return float
     */
    public function getMinPaymentFlatAmount()
    {
        return $this->container['min_payment_flat_amount'];
    }

    /**
     * Sets min_payment_flat_amount
     *
     * @param float $min_payment_flat_amount Minimum payment, expressed as a flat amount, due on the payment due day.
     *
     * @return self
     */
    public function setMinPaymentFlatAmount($min_payment_flat_amount)
    {

        if (($min_payment_flat_amount < 0.01)) {
            throw new \InvalidArgumentException('invalid value for $min_payment_flat_amount when calling ProductCreateReq., must be bigger than or equal to 0.01.');
        }

        $this->container['min_payment_flat_amount'] = $min_payment_flat_amount;

        return $this;
    }

    /**
     * Gets min_payment_percentage
     *
     * @return float
     */
    public function getMinPaymentPercentage()
    {
        return $this->container['min_payment_percentage'];
    }

    /**
     * Sets min_payment_percentage
     *
     * @param float $min_payment_percentage Minimum payment, expressed as a percentage of the total statement balance, due on the payment due day.
     *
     * @return self
     */
    public function setMinPaymentPercentage($min_payment_percentage)
    {

        if (($min_payment_percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $min_payment_percentage when calling ProductCreateReq., must be smaller than or equal to 100.');
        }
        if (($min_payment_percentage < 0.00010)) {
            throw new \InvalidArgumentException('invalid value for $min_payment_percentage when calling ProductCreateReq., must be bigger than or equal to 0.00010.');
        }

        $this->container['min_payment_percentage'] = $min_payment_percentage;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the credit product.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductCreateReq., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets payment_allocation_order
     *
     * @return \OpenAPI\Client\Model\PaymentAllocationOrderEnum[]
     */
    public function getPaymentAllocationOrder()
    {
        return $this->container['payment_allocation_order'];
    }

    /**
     * Sets payment_allocation_order
     *
     * @param \OpenAPI\Client\Model\PaymentAllocationOrderEnum[] $payment_allocation_order Ordered list of balance types to which payments are allocated, from first to last.
     *
     * @return self
     */
    public function setPaymentAllocationOrder($payment_allocation_order)
    {


        if ((count($payment_allocation_order) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_allocation_order when calling ProductCreateReq., number of items must be greater than or equal to 1.');
        }
        $this->container['payment_allocation_order'] = $payment_allocation_order;

        return $this;
    }

    /**
     * Gets product_sub_type
     *
     * @return \OpenAPI\Client\Model\ProductSubType
     */
    public function getProductSubType()
    {
        return $this->container['product_sub_type'];
    }

    /**
     * Sets product_sub_type
     *
     * @param \OpenAPI\Client\Model\ProductSubType $product_sub_type product_sub_type
     *
     * @return self
     */
    public function setProductSubType($product_sub_type)
    {
        $this->container['product_sub_type'] = $product_sub_type;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return \OpenAPI\Client\Model\ProductType
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param \OpenAPI\Client\Model\ProductType $product_type product_type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ResourceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ResourceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token Unique identifier of the credit product.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (!is_null($token) && (mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling ProductCreateReq., must be smaller than or equal to 36.');
        }
        if (!is_null($token) && (!preg_match("/(?!^ +$)^.+$/", $token))) {
            throw new \InvalidArgumentException("invalid value for $token when calling ProductCreateReq., must conform to the pattern /(?!^ +$)^.+$/.");
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \OpenAPI\Client\Model\BalanceType[]
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \OpenAPI\Client\Model\BalanceType[] $usage One or more usage types for the credit product.
     *
     * @return self
     */
    public function setUsage($usage)
    {


        if ((count($usage) < 1)) {
            throw new \InvalidArgumentException('invalid length for $usage when calling ProductCreateReq., number of items must be greater than or equal to 1.');
        }
        $this->container['usage'] = $usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


