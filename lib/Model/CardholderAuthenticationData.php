<?php
/**
 * CardholderAuthenticationData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardholderAuthenticationData Class Doc Comment
 *
 * @category Class
 * @description Contains authentication data for 3D Secure and digital wallet token transactions:  * &#x60;electronic_commerce_indicator&#x60; – The level of verification performed. * &#x60;verification_result&#x60; – The result of the verification. * &#x60;verification_value_created_by&#x60; – The transaction participant who determined the verification result. * &#x60;three_ds_message_version&#x60; – The 3D Secure message version used for authentication. * &#x60;authentication_method&#x60; – The 3D Secure authentication method. * &#x60;authentication_status&#x60; – The 3D Secure authentication status. * &#x60;acquirer_exemption&#x60; – Indicates a 3D Secure authentication exemption from the acquirer. * &#x60;issuer_exemption&#x60; – Indicates a 3D Secure authentication exemption from the issuer.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardholderAuthenticationData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cardholder_authentication_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acquirer_exemption' => 'string[]',
        'authentication_method' => 'string',
        'authentication_status' => 'string',
        'cavv_authentication_amount' => 'string',
        'electronic_commerce_indicator' => 'string',
        'issuer_exemption' => 'string',
        'raw_cavv_data' => 'string',
        'three_ds_message_version' => 'string',
        'verification_result' => 'string',
        'verification_value_created_by' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acquirer_exemption' => null,
        'authentication_method' => null,
        'authentication_status' => null,
        'cavv_authentication_amount' => null,
        'electronic_commerce_indicator' => null,
        'issuer_exemption' => null,
        'raw_cavv_data' => null,
        'three_ds_message_version' => null,
        'verification_result' => null,
        'verification_value_created_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acquirer_exemption' => 'acquirer_exemption',
        'authentication_method' => 'authentication_method',
        'authentication_status' => 'authentication_status',
        'cavv_authentication_amount' => 'cavv_authentication_amount',
        'electronic_commerce_indicator' => 'electronic_commerce_indicator',
        'issuer_exemption' => 'issuer_exemption',
        'raw_cavv_data' => 'raw_cavv_data',
        'three_ds_message_version' => 'three_ds_message_version',
        'verification_result' => 'verification_result',
        'verification_value_created_by' => 'verification_value_created_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acquirer_exemption' => 'setAcquirerExemption',
        'authentication_method' => 'setAuthenticationMethod',
        'authentication_status' => 'setAuthenticationStatus',
        'cavv_authentication_amount' => 'setCavvAuthenticationAmount',
        'electronic_commerce_indicator' => 'setElectronicCommerceIndicator',
        'issuer_exemption' => 'setIssuerExemption',
        'raw_cavv_data' => 'setRawCavvData',
        'three_ds_message_version' => 'setThreeDsMessageVersion',
        'verification_result' => 'setVerificationResult',
        'verification_value_created_by' => 'setVerificationValueCreatedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acquirer_exemption' => 'getAcquirerExemption',
        'authentication_method' => 'getAuthenticationMethod',
        'authentication_status' => 'getAuthenticationStatus',
        'cavv_authentication_amount' => 'getCavvAuthenticationAmount',
        'electronic_commerce_indicator' => 'getElectronicCommerceIndicator',
        'issuer_exemption' => 'getIssuerExemption',
        'raw_cavv_data' => 'getRawCavvData',
        'three_ds_message_version' => 'getThreeDsMessageVersion',
        'verification_result' => 'getVerificationResult',
        'verification_value_created_by' => 'getVerificationValueCreatedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acquirer_exemption'] = $data['acquirer_exemption'] ?? null;
        $this->container['authentication_method'] = $data['authentication_method'] ?? null;
        $this->container['authentication_status'] = $data['authentication_status'] ?? null;
        $this->container['cavv_authentication_amount'] = $data['cavv_authentication_amount'] ?? null;
        $this->container['electronic_commerce_indicator'] = $data['electronic_commerce_indicator'] ?? null;
        $this->container['issuer_exemption'] = $data['issuer_exemption'] ?? null;
        $this->container['raw_cavv_data'] = $data['raw_cavv_data'] ?? null;
        $this->container['three_ds_message_version'] = $data['three_ds_message_version'] ?? null;
        $this->container['verification_result'] = $data['verification_result'] ?? null;
        $this->container['verification_value_created_by'] = $data['verification_value_created_by'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acquirer_exemption
     *
     * @return string[]|null
     */
    public function getAcquirerExemption()
    {
        return $this->container['acquirer_exemption'];
    }

    /**
     * Sets acquirer_exemption
     *
     * @param string[]|null $acquirer_exemption Indicates 3D Secure authentication exemptions from the acquirer. This array is returned if it is included in the transaction data from the card network.
     *
     * @return self
     */
    public function setAcquirerExemption($acquirer_exemption)
    {
        $this->container['acquirer_exemption'] = $acquirer_exemption;

        return $this;
    }

    /**
     * Gets authentication_method
     *
     * @return string|null
     */
    public function getAuthenticationMethod()
    {
        return $this->container['authentication_method'];
    }

    /**
     * Sets authentication_method
     *
     * @param string|null $authentication_method Specifies the 3D Secure authentication method.
     *
     * @return self
     */
    public function setAuthenticationMethod($authentication_method)
    {
        $this->container['authentication_method'] = $authentication_method;

        return $this;
    }

    /**
     * Gets authentication_status
     *
     * @return string|null
     */
    public function getAuthenticationStatus()
    {
        return $this->container['authentication_status'];
    }

    /**
     * Sets authentication_status
     *
     * @param string|null $authentication_status Specifies the status of the 3D Secure authentication:  * `ATTEMPTED`: Indicates that 3D Secure authentication was requested and processed by the card network. * `DATA_SHARE_EXEMPTION`: Indicates that 3D Secure authentication was for information only and exempted. * `EXEMPTED`: Indicates that 3D Secure authentication was requested but the challenge was exempted. * `EXEMPTION_CLAIMED`: Indicates that 3D Secure authentication was exempted because acquirer transaction risk analysis (TRA) was already performed. * `SCA_EXEMPTION`: Indicates that 3D Secure authentication was exempted because strong customer authentication (SCA) was already performed. * `SUCCESSFUL`: Indicates that 3D Secure authentication was successful. * `SUCCESSFUL_NON_PAYMENT`: Indicates that 3D Secure non-payment authentication was successful. * `THREEDS_REQUESTER_DATA_SHARE_EXEMPTION`: Status is deprecated and will be removed from a future release of the Marqeta platform. After June 2023, use `DATA_SHARE_EXEMPTION` instead. * `THREEDS_REQUESTER_SCA_EXEMPTION`: Status is deprecated and will be removed in a June 2023 release of the Marqeta platform. After June 2023, use `SCA_EXEMPTION` instead. * `THREEDS_REQUESTER_TRA_EXEMPTION`: Status is deprecated and will be removed in a June 2023 release of the Marqeta platform. After June 2023, use `EXEMPTION_CLAIMED` instead. * `UNAVAILABLE`: ** For Visa transactions, this status indicates that 3D Secure authentication was requested, but Marqeta's access control server (ACS) was not available. ** For Mastercard transactions, this status indicates that 3D Secure authentication was not available.
     *
     * @return self
     */
    public function setAuthenticationStatus($authentication_status)
    {
        $this->container['authentication_status'] = $authentication_status;

        return $this;
    }

    /**
     * Gets cavv_authentication_amount
     *
     * @return string|null
     */
    public function getCavvAuthenticationAmount()
    {
        return $this->container['cavv_authentication_amount'];
    }

    /**
     * Sets cavv_authentication_amount
     *
     * @param string|null $cavv_authentication_amount Authentication amount from the cardholder authentication verification value (CAVV) used to validate an authorization. This field is returned if it is included in the transaction data from the card network.  To enable this field, contact your Marqeta representative.
     *
     * @return self
     */
    public function setCavvAuthenticationAmount($cavv_authentication_amount)
    {
        $this->container['cavv_authentication_amount'] = $cavv_authentication_amount;

        return $this;
    }

    /**
     * Gets electronic_commerce_indicator
     *
     * @return string|null
     */
    public function getElectronicCommerceIndicator()
    {
        return $this->container['electronic_commerce_indicator'];
    }

    /**
     * Sets electronic_commerce_indicator
     *
     * @param string|null $electronic_commerce_indicator Status of the 3D Secure or digital wallet token transaction authentication attempt, as provided by a transaction participant.  * `authentication_attempted`: Merchant attempted to authenticate, but either the issuer or the cardholder does not participate in 3D Secure or card tokenization. * `authentication_successful`: Cardholder authentication successful. * `no_authentication`: Non-authenticated e-commerce transaction.
     *
     * @return self
     */
    public function setElectronicCommerceIndicator($electronic_commerce_indicator)
    {
        $this->container['electronic_commerce_indicator'] = $electronic_commerce_indicator;

        return $this;
    }

    /**
     * Gets issuer_exemption
     *
     * @return string|null
     */
    public function getIssuerExemption()
    {
        return $this->container['issuer_exemption'];
    }

    /**
     * Sets issuer_exemption
     *
     * @param string|null $issuer_exemption Indicates a 3D Secure authentication exemption from the issuer. This field is returned if it is included in the transaction data from the card network.
     *
     * @return self
     */
    public function setIssuerExemption($issuer_exemption)
    {
        $this->container['issuer_exemption'] = $issuer_exemption;

        return $this;
    }

    /**
     * Gets raw_cavv_data
     *
     * @return string|null
     */
    public function getRawCavvData()
    {
        return $this->container['raw_cavv_data'];
    }

    /**
     * Sets raw_cavv_data
     *
     * @param string|null $raw_cavv_data Raw cardholder authentication verification value provided by the card network. This field is returned if it is included in the transaction data from the card network.  To enable this field, contact your Marqeta representative.
     *
     * @return self
     */
    public function setRawCavvData($raw_cavv_data)
    {
        $this->container['raw_cavv_data'] = $raw_cavv_data;

        return $this;
    }

    /**
     * Gets three_ds_message_version
     *
     * @return string|null
     */
    public function getThreeDsMessageVersion()
    {
        return $this->container['three_ds_message_version'];
    }

    /**
     * Sets three_ds_message_version
     *
     * @param string|null $three_ds_message_version Specifies the 3D Secure message version used for authentication.
     *
     * @return self
     */
    public function setThreeDsMessageVersion($three_ds_message_version)
    {
        $this->container['three_ds_message_version'] = $three_ds_message_version;

        return $this;
    }

    /**
     * Gets verification_result
     *
     * @return string|null
     */
    public function getVerificationResult()
    {
        return $this->container['verification_result'];
    }

    /**
     * Sets verification_result
     *
     * @param string|null $verification_result Result of cardholder authentication verification value (CAVV) or accountholder authentication value (AAV) verification performed by the card network.  * `failed` * `not_present` * `not_provided` * `not_verified` * `not_verified_authentication_outage` * `verified` * `verified_amount_checked` * `verified_amount_greater_than_20_percent`: For Mastercard AAV verification, indicates that the original authentication amount and final authorization amount are mismatched, and that the final authorization amount exceeds the original authentication amount by more than 20%. This 20% margin falls outside Mastercard's suggested tolerance for what a European cardholder might reasonably expect when the total transaction amount is not known in advance. * `verified_amount_less_than_20_percent`: For Mastercard AAV verification, indicates that the original authentication amount and final authorization amount are mismatched, and that the final authorization amount exceeds the original authentication amount by 20% or less. This 20% margin falls within Mastercard's suggested tolerance for what a European cardholder might reasonably expect when the total transaction amount is not known in advance. * `not_verified_mac_key_validation_passed`: For Mastercard only. This field is present when the transaction passes MAC key validation but Dynamic Linking was not performed by the Mastercard card network due to system connectivity issues. * `not_verified_mac_key_validation_failed`: For Mastercard only. This field is present when the transaction fails MAC key validation and Dynamic Linking was not performed by the Mastercard card network due to system connectivity issues.
     *
     * @return self
     */
    public function setVerificationResult($verification_result)
    {
        $this->container['verification_result'] = $verification_result;

        return $this;
    }

    /**
     * Gets verification_value_created_by
     *
     * @return string|null
     */
    public function getVerificationValueCreatedBy()
    {
        return $this->container['verification_value_created_by'];
    }

    /**
     * Sets verification_value_created_by
     *
     * @param string|null $verification_value_created_by Transaction participant who determined the verification result.
     *
     * @return self
     */
    public function setVerificationValueCreatedBy($verification_value_created_by)
    {
        $this->container['verification_value_created_by'] = $verification_value_created_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


