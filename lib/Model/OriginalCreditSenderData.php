<?php
/**
 * OriginalCreditSenderData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OriginalCreditSenderData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OriginalCreditSenderData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'original_credit_sender_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deferred_hold_by' => 'string',
        'fast_funds_enabled' => 'bool',
        'funding_source' => 'string',
        'sender_account_number' => 'string',
        'sender_account_type' => 'string',
        'sender_address' => 'string',
        'sender_city' => 'string',
        'sender_country' => 'string',
        'sender_name' => 'string',
        'sender_reference_number' => 'string',
        'sender_state' => 'string',
        'transaction_purpose' => 'string',
        'unique_transaction_reference_number' => 'string',
        'visa_transaction_purpose' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deferred_hold_by' => null,
        'fast_funds_enabled' => null,
        'funding_source' => null,
        'sender_account_number' => null,
        'sender_account_type' => null,
        'sender_address' => null,
        'sender_city' => null,
        'sender_country' => null,
        'sender_name' => null,
        'sender_reference_number' => null,
        'sender_state' => null,
        'transaction_purpose' => null,
        'unique_transaction_reference_number' => null,
        'visa_transaction_purpose' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deferred_hold_by' => 'deferred_hold_by',
        'fast_funds_enabled' => 'fast_funds_enabled',
        'funding_source' => 'funding_source',
        'sender_account_number' => 'sender_account_number',
        'sender_account_type' => 'sender_account_type',
        'sender_address' => 'sender_address',
        'sender_city' => 'sender_city',
        'sender_country' => 'sender_country',
        'sender_name' => 'sender_name',
        'sender_reference_number' => 'sender_reference_number',
        'sender_state' => 'sender_state',
        'transaction_purpose' => 'transaction_purpose',
        'unique_transaction_reference_number' => 'unique_transaction_reference_number',
        'visa_transaction_purpose' => 'visa_transaction_purpose'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deferred_hold_by' => 'setDeferredHoldBy',
        'fast_funds_enabled' => 'setFastFundsEnabled',
        'funding_source' => 'setFundingSource',
        'sender_account_number' => 'setSenderAccountNumber',
        'sender_account_type' => 'setSenderAccountType',
        'sender_address' => 'setSenderAddress',
        'sender_city' => 'setSenderCity',
        'sender_country' => 'setSenderCountry',
        'sender_name' => 'setSenderName',
        'sender_reference_number' => 'setSenderReferenceNumber',
        'sender_state' => 'setSenderState',
        'transaction_purpose' => 'setTransactionPurpose',
        'unique_transaction_reference_number' => 'setUniqueTransactionReferenceNumber',
        'visa_transaction_purpose' => 'setVisaTransactionPurpose'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deferred_hold_by' => 'getDeferredHoldBy',
        'fast_funds_enabled' => 'getFastFundsEnabled',
        'funding_source' => 'getFundingSource',
        'sender_account_number' => 'getSenderAccountNumber',
        'sender_account_type' => 'getSenderAccountType',
        'sender_address' => 'getSenderAddress',
        'sender_city' => 'getSenderCity',
        'sender_country' => 'getSenderCountry',
        'sender_name' => 'getSenderName',
        'sender_reference_number' => 'getSenderReferenceNumber',
        'sender_state' => 'getSenderState',
        'transaction_purpose' => 'getTransactionPurpose',
        'unique_transaction_reference_number' => 'getUniqueTransactionReferenceNumber',
        'visa_transaction_purpose' => 'getVisaTransactionPurpose'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEFERRED_HOLD_BY_ABSENT = 'absent';
    const DEFERRED_HOLD_BY_VISA = 'visa';
    const DEFERRED_HOLD_BY_ORIGINATOR = 'originator';
    const FUNDING_SOURCE_CREDIT = 'credit';
    const FUNDING_SOURCE_DEBIT = 'debit';
    const FUNDING_SOURCE_PREPAID = 'prepaid';
    const FUNDING_SOURCE_DEPOSIT_ACCOUNT = 'deposit_account';
    const FUNDING_SOURCE_CASH = 'cash';
    const FUNDING_SOURCE_MOBILE_MONEY_PAYMENT = 'mobile_money_payment';
    const FUNDING_SOURCE_NON_VISA_CREDIT = 'non_visa_credit';
    const FUNDING_SOURCE_CHECK = 'check';
    const FUNDING_SOURCE_ACH = 'ach';
    const SENDER_ACCOUNT_TYPE_OTHER = 'other';
    const SENDER_ACCOUNT_TYPE_RTN_BANK_ACCOUNT = 'rtn_bank_account';
    const SENDER_ACCOUNT_TYPE_IBAN = 'iban';
    const SENDER_ACCOUNT_TYPE_CARD_ACCOUNT = 'card_account';
    const SENDER_ACCOUNT_TYPE_EMAIL = 'email';
    const SENDER_ACCOUNT_TYPE_PHONE_NUMBER = 'phone_number';
    const SENDER_ACCOUNT_TYPE_BANK_ACCOUNT_NUMBER_AND_IDENTIFICATION_CODE = 'bank_account_number_and_identification_code';
    const SENDER_ACCOUNT_TYPE_WALLET_ID = 'wallet_id';
    const SENDER_ACCOUNT_TYPE_SOCIAL_NETWORK_ID = 'social_network_id';
    const TRANSACTION_PURPOSE_FAMILY_SUPPORT = 'family_support';
    const TRANSACTION_PURPOSE_LABOR_TRANSFERS = 'labor_transfers';
    const TRANSACTION_PURPOSE_TRAVEL = 'travel';
    const TRANSACTION_PURPOSE_EDUCATION = 'education';
    const TRANSACTION_PURPOSE_MEDICAL_TREATMENT = 'medical_treatment';
    const TRANSACTION_PURPOSE_EMERGENCY_NEED = 'emergency_need';
    const TRANSACTION_PURPOSE_SAVINGS = 'savings';
    const TRANSACTION_PURPOSE_GIFTS = 'gifts';
    const TRANSACTION_PURPOSE_OTHER = 'other';
    const TRANSACTION_PURPOSE_SALARY = 'salary';
    const TRANSACTION_PURPOSE_LENDING = 'lending';
    const TRANSACTION_PURPOSE_CRYPTO_CURRENCY = 'crypto_currency';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeferredHoldByAllowableValues()
    {
        return [
            self::DEFERRED_HOLD_BY_ABSENT,
            self::DEFERRED_HOLD_BY_VISA,
            self::DEFERRED_HOLD_BY_ORIGINATOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFundingSourceAllowableValues()
    {
        return [
            self::FUNDING_SOURCE_CREDIT,
            self::FUNDING_SOURCE_DEBIT,
            self::FUNDING_SOURCE_PREPAID,
            self::FUNDING_SOURCE_DEPOSIT_ACCOUNT,
            self::FUNDING_SOURCE_CASH,
            self::FUNDING_SOURCE_MOBILE_MONEY_PAYMENT,
            self::FUNDING_SOURCE_NON_VISA_CREDIT,
            self::FUNDING_SOURCE_CHECK,
            self::FUNDING_SOURCE_ACH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSenderAccountTypeAllowableValues()
    {
        return [
            self::SENDER_ACCOUNT_TYPE_OTHER,
            self::SENDER_ACCOUNT_TYPE_RTN_BANK_ACCOUNT,
            self::SENDER_ACCOUNT_TYPE_IBAN,
            self::SENDER_ACCOUNT_TYPE_CARD_ACCOUNT,
            self::SENDER_ACCOUNT_TYPE_EMAIL,
            self::SENDER_ACCOUNT_TYPE_PHONE_NUMBER,
            self::SENDER_ACCOUNT_TYPE_BANK_ACCOUNT_NUMBER_AND_IDENTIFICATION_CODE,
            self::SENDER_ACCOUNT_TYPE_WALLET_ID,
            self::SENDER_ACCOUNT_TYPE_SOCIAL_NETWORK_ID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionPurposeAllowableValues()
    {
        return [
            self::TRANSACTION_PURPOSE_FAMILY_SUPPORT,
            self::TRANSACTION_PURPOSE_LABOR_TRANSFERS,
            self::TRANSACTION_PURPOSE_TRAVEL,
            self::TRANSACTION_PURPOSE_EDUCATION,
            self::TRANSACTION_PURPOSE_MEDICAL_TREATMENT,
            self::TRANSACTION_PURPOSE_EMERGENCY_NEED,
            self::TRANSACTION_PURPOSE_SAVINGS,
            self::TRANSACTION_PURPOSE_GIFTS,
            self::TRANSACTION_PURPOSE_OTHER,
            self::TRANSACTION_PURPOSE_SALARY,
            self::TRANSACTION_PURPOSE_LENDING,
            self::TRANSACTION_PURPOSE_CRYPTO_CURRENCY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deferred_hold_by'] = $data['deferred_hold_by'] ?? null;
        $this->container['fast_funds_enabled'] = $data['fast_funds_enabled'] ?? null;
        $this->container['funding_source'] = $data['funding_source'] ?? null;
        $this->container['sender_account_number'] = $data['sender_account_number'] ?? null;
        $this->container['sender_account_type'] = $data['sender_account_type'] ?? null;
        $this->container['sender_address'] = $data['sender_address'] ?? null;
        $this->container['sender_city'] = $data['sender_city'] ?? null;
        $this->container['sender_country'] = $data['sender_country'] ?? null;
        $this->container['sender_name'] = $data['sender_name'] ?? null;
        $this->container['sender_reference_number'] = $data['sender_reference_number'] ?? null;
        $this->container['sender_state'] = $data['sender_state'] ?? null;
        $this->container['transaction_purpose'] = $data['transaction_purpose'] ?? null;
        $this->container['unique_transaction_reference_number'] = $data['unique_transaction_reference_number'] ?? null;
        $this->container['visa_transaction_purpose'] = $data['visa_transaction_purpose'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeferredHoldByAllowableValues();
        if (!is_null($this->container['deferred_hold_by']) && !in_array($this->container['deferred_hold_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deferred_hold_by', must be one of '%s'",
                $this->container['deferred_hold_by'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['funding_source'] === null) {
            $invalidProperties[] = "'funding_source' can't be null";
        }
        $allowedValues = $this->getFundingSourceAllowableValues();
        if (!is_null($this->container['funding_source']) && !in_array($this->container['funding_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'funding_source', must be one of '%s'",
                $this->container['funding_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSenderAccountTypeAllowableValues();
        if (!is_null($this->container['sender_account_type']) && !in_array($this->container['sender_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sender_account_type', must be one of '%s'",
                $this->container['sender_account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionPurposeAllowableValues();
        if (!is_null($this->container['transaction_purpose']) && !in_array($this->container['transaction_purpose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_purpose', must be one of '%s'",
                $this->container['transaction_purpose'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['unique_transaction_reference_number']) && (mb_strlen($this->container['unique_transaction_reference_number']) > 17)) {
            $invalidProperties[] = "invalid value for 'unique_transaction_reference_number', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['unique_transaction_reference_number']) && (mb_strlen($this->container['unique_transaction_reference_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'unique_transaction_reference_number', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deferred_hold_by
     *
     * @return string|null
     */
    public function getDeferredHoldBy()
    {
        return $this->container['deferred_hold_by'];
    }

    /**
     * Sets deferred_hold_by
     *
     * @param string|null $deferred_hold_by deferred_hold_by
     *
     * @return self
     */
    public function setDeferredHoldBy($deferred_hold_by)
    {
        $allowedValues = $this->getDeferredHoldByAllowableValues();
        if (!is_null($deferred_hold_by) && !in_array($deferred_hold_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deferred_hold_by', must be one of '%s'",
                    $deferred_hold_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deferred_hold_by'] = $deferred_hold_by;

        return $this;
    }

    /**
     * Gets fast_funds_enabled
     *
     * @return bool|null
     */
    public function getFastFundsEnabled()
    {
        return $this->container['fast_funds_enabled'];
    }

    /**
     * Sets fast_funds_enabled
     *
     * @param bool|null $fast_funds_enabled fast_funds_enabled
     *
     * @return self
     */
    public function setFastFundsEnabled($fast_funds_enabled)
    {
        $this->container['fast_funds_enabled'] = $fast_funds_enabled;

        return $this;
    }

    /**
     * Gets funding_source
     *
     * @return string
     */
    public function getFundingSource()
    {
        return $this->container['funding_source'];
    }

    /**
     * Sets funding_source
     *
     * @param string $funding_source funding_source
     *
     * @return self
     */
    public function setFundingSource($funding_source)
    {
        $allowedValues = $this->getFundingSourceAllowableValues();
        if (!in_array($funding_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'funding_source', must be one of '%s'",
                    $funding_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['funding_source'] = $funding_source;

        return $this;
    }

    /**
     * Gets sender_account_number
     *
     * @return string|null
     */
    public function getSenderAccountNumber()
    {
        return $this->container['sender_account_number'];
    }

    /**
     * Sets sender_account_number
     *
     * @param string|null $sender_account_number sender_account_number
     *
     * @return self
     */
    public function setSenderAccountNumber($sender_account_number)
    {
        $this->container['sender_account_number'] = $sender_account_number;

        return $this;
    }

    /**
     * Gets sender_account_type
     *
     * @return string|null
     */
    public function getSenderAccountType()
    {
        return $this->container['sender_account_type'];
    }

    /**
     * Sets sender_account_type
     *
     * @param string|null $sender_account_type sender_account_type
     *
     * @return self
     */
    public function setSenderAccountType($sender_account_type)
    {
        $allowedValues = $this->getSenderAccountTypeAllowableValues();
        if (!is_null($sender_account_type) && !in_array($sender_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sender_account_type', must be one of '%s'",
                    $sender_account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sender_account_type'] = $sender_account_type;

        return $this;
    }

    /**
     * Gets sender_address
     *
     * @return string|null
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     *
     * @param string|null $sender_address sender_address
     *
     * @return self
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets sender_city
     *
     * @return string|null
     */
    public function getSenderCity()
    {
        return $this->container['sender_city'];
    }

    /**
     * Sets sender_city
     *
     * @param string|null $sender_city sender_city
     *
     * @return self
     */
    public function setSenderCity($sender_city)
    {
        $this->container['sender_city'] = $sender_city;

        return $this;
    }

    /**
     * Gets sender_country
     *
     * @return string|null
     */
    public function getSenderCountry()
    {
        return $this->container['sender_country'];
    }

    /**
     * Sets sender_country
     *
     * @param string|null $sender_country sender_country
     *
     * @return self
     */
    public function setSenderCountry($sender_country)
    {
        $this->container['sender_country'] = $sender_country;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string|null
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string|null $sender_name sender_name
     *
     * @return self
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_reference_number
     *
     * @return string|null
     */
    public function getSenderReferenceNumber()
    {
        return $this->container['sender_reference_number'];
    }

    /**
     * Sets sender_reference_number
     *
     * @param string|null $sender_reference_number sender_reference_number
     *
     * @return self
     */
    public function setSenderReferenceNumber($sender_reference_number)
    {
        $this->container['sender_reference_number'] = $sender_reference_number;

        return $this;
    }

    /**
     * Gets sender_state
     *
     * @return string|null
     */
    public function getSenderState()
    {
        return $this->container['sender_state'];
    }

    /**
     * Sets sender_state
     *
     * @param string|null $sender_state sender_state
     *
     * @return self
     */
    public function setSenderState($sender_state)
    {
        $this->container['sender_state'] = $sender_state;

        return $this;
    }

    /**
     * Gets transaction_purpose
     *
     * @return string|null
     */
    public function getTransactionPurpose()
    {
        return $this->container['transaction_purpose'];
    }

    /**
     * Sets transaction_purpose
     *
     * @param string|null $transaction_purpose transaction_purpose
     *
     * @return self
     */
    public function setTransactionPurpose($transaction_purpose)
    {
        $allowedValues = $this->getTransactionPurposeAllowableValues();
        if (!is_null($transaction_purpose) && !in_array($transaction_purpose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_purpose', must be one of '%s'",
                    $transaction_purpose,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_purpose'] = $transaction_purpose;

        return $this;
    }

    /**
     * Gets unique_transaction_reference_number
     *
     * @return string|null
     */
    public function getUniqueTransactionReferenceNumber()
    {
        return $this->container['unique_transaction_reference_number'];
    }

    /**
     * Sets unique_transaction_reference_number
     *
     * @param string|null $unique_transaction_reference_number unique_transaction_reference_number
     *
     * @return self
     */
    public function setUniqueTransactionReferenceNumber($unique_transaction_reference_number)
    {
        if (!is_null($unique_transaction_reference_number) && (mb_strlen($unique_transaction_reference_number) > 17)) {
            throw new \InvalidArgumentException('invalid length for $unique_transaction_reference_number when calling OriginalCreditSenderData., must be smaller than or equal to 17.');
        }
        if (!is_null($unique_transaction_reference_number) && (mb_strlen($unique_transaction_reference_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unique_transaction_reference_number when calling OriginalCreditSenderData., must be bigger than or equal to 1.');
        }

        $this->container['unique_transaction_reference_number'] = $unique_transaction_reference_number;

        return $this;
    }

    /**
     * Gets visa_transaction_purpose
     *
     * @return string|null
     */
    public function getVisaTransactionPurpose()
    {
        return $this->container['visa_transaction_purpose'];
    }

    /**
     * Sets visa_transaction_purpose
     *
     * @param string|null $visa_transaction_purpose visa_transaction_purpose
     *
     * @return self
     */
    public function setVisaTransactionPurpose($visa_transaction_purpose)
    {
        $this->container['visa_transaction_purpose'] = $visa_transaction_purpose;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


