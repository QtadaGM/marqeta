<?php
/**
 * NetworkMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkMetadata Class Doc Comment
 *
 * @category Class
 * @description Contains network-related metadata for the transaction, including details about the card program and the card product. Returned if provided by the card network
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NetworkMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_identification_1' => 'string',
        'incoming_response_code' => 'string',
        'product_id' => 'string',
        'program_id' => 'string',
        'spend_qualifier' => 'string',
        'surcharge_free_atm_network' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_identification_1' => null,
        'incoming_response_code' => null,
        'product_id' => null,
        'program_id' => null,
        'spend_qualifier' => null,
        'surcharge_free_atm_network' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_identification_1' => 'account_identification_1',
        'incoming_response_code' => 'incoming_response_code',
        'product_id' => 'product_id',
        'program_id' => 'program_id',
        'spend_qualifier' => 'spend_qualifier',
        'surcharge_free_atm_network' => 'surcharge_free_atm_network'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_identification_1' => 'setAccountIdentification1',
        'incoming_response_code' => 'setIncomingResponseCode',
        'product_id' => 'setProductId',
        'program_id' => 'setProgramId',
        'spend_qualifier' => 'setSpendQualifier',
        'surcharge_free_atm_network' => 'setSurchargeFreeAtmNetwork'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_identification_1' => 'getAccountIdentification1',
        'incoming_response_code' => 'getIncomingResponseCode',
        'product_id' => 'getProductId',
        'program_id' => 'getProgramId',
        'spend_qualifier' => 'getSpendQualifier',
        'surcharge_free_atm_network' => 'getSurchargeFreeAtmNetwork'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_identification_1'] = $data['account_identification_1'] ?? null;
        $this->container['incoming_response_code'] = $data['incoming_response_code'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['program_id'] = $data['program_id'] ?? null;
        $this->container['spend_qualifier'] = $data['spend_qualifier'] ?? null;
        $this->container['surcharge_free_atm_network'] = $data['surcharge_free_atm_network'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_identification_1
     *
     * @return string|null
     */
    public function getAccountIdentification1()
    {
        return $this->container['account_identification_1'];
    }

    /**
     * Sets account_identification_1
     *
     * @param string|null $account_identification_1 account_identification_1
     *
     * @return self
     */
    public function setAccountIdentification1($account_identification_1)
    {
        $this->container['account_identification_1'] = $account_identification_1;

        return $this;
    }

    /**
     * Gets incoming_response_code
     *
     * @return string|null
     */
    public function getIncomingResponseCode()
    {
        return $this->container['incoming_response_code'];
    }

    /**
     * Sets incoming_response_code
     *
     * @param string|null $incoming_response_code Visa Risk Management esponse code `59`, indicating suspected fraud.
     *
     * @return self
     */
    public function setIncomingResponseCode($incoming_response_code)
    {
        $this->container['incoming_response_code'] = $incoming_response_code;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Product identification value assigned by the card network to each card product. Can be used to track card-level activity by individual account number for premium card products.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return string|null
     */
    public function getProgramId()
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param string|null $program_id Program identification number used with `product_id` that identifies the programs associated with a card within a program registered by the issuer with the card network.
     *
     * @return self
     */
    public function setProgramId($program_id)
    {
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets spend_qualifier
     *
     * @return string|null
     */
    public function getSpendQualifier()
    {
        return $this->container['spend_qualifier'];
    }

    /**
     * Sets spend_qualifier
     *
     * @param string|null $spend_qualifier Indicates whether or not the base spend-assessment threshold defined by the card network has been met.
     *
     * @return self
     */
    public function setSpendQualifier($spend_qualifier)
    {
        $this->container['spend_qualifier'] = $spend_qualifier;

        return $this;
    }

    /**
     * Gets surcharge_free_atm_network
     *
     * @return string|null
     */
    public function getSurchargeFreeAtmNetwork()
    {
        return $this->container['surcharge_free_atm_network'];
    }

    /**
     * Sets surcharge_free_atm_network
     *
     * @param string|null $surcharge_free_atm_network Name of the surcharge-free ATM network used to complete the transaction.
     *
     * @return self
     */
    public function setSurchargeFreeAtmNetwork($surcharge_free_atm_network)
    {
        $this->container['surcharge_free_atm_network'] = $surcharge_free_atm_network;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


