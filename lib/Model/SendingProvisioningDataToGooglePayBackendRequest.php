<?php
/**
 * SendingProvisioningDataToGooglePayBackendRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendingProvisioningDataToGooglePayBackendRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SendingProvisioningDataToGooglePayBackendRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sending_provisioning_data_to_google_pay_backend_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_setting' => 'int',
        'card_token' => 'string',
        'client_session_id' => 'string',
        'integrator_id' => 'string',
        'public_device_id' => 'string',
        'public_wallet_id' => 'string',
        'server_session_id' => 'string',
        'token_setting' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_setting' => 'int32',
        'card_token' => null,
        'client_session_id' => null,
        'integrator_id' => null,
        'public_device_id' => null,
        'public_wallet_id' => null,
        'server_session_id' => null,
        'token_setting' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_setting' => 'card_setting',
        'card_token' => 'card_token',
        'client_session_id' => 'client_session_id',
        'integrator_id' => 'integrator_id',
        'public_device_id' => 'public_device_id',
        'public_wallet_id' => 'public_wallet_id',
        'server_session_id' => 'server_session_id',
        'token_setting' => 'token_setting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_setting' => 'setCardSetting',
        'card_token' => 'setCardToken',
        'client_session_id' => 'setClientSessionId',
        'integrator_id' => 'setIntegratorId',
        'public_device_id' => 'setPublicDeviceId',
        'public_wallet_id' => 'setPublicWalletId',
        'server_session_id' => 'setServerSessionId',
        'token_setting' => 'setTokenSetting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_setting' => 'getCardSetting',
        'card_token' => 'getCardToken',
        'client_session_id' => 'getClientSessionId',
        'integrator_id' => 'getIntegratorId',
        'public_device_id' => 'getPublicDeviceId',
        'public_wallet_id' => 'getPublicWalletId',
        'server_session_id' => 'getServerSessionId',
        'token_setting' => 'getTokenSetting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARD_SETTING_0 = 0;
    const CARD_SETTING_1 = 1;
    const TOKEN_SETTING_0 = 0;
    const TOKEN_SETTING_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardSettingAllowableValues()
    {
        return [
            self::CARD_SETTING_0,
            self::CARD_SETTING_1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTokenSettingAllowableValues()
    {
        return [
            self::TOKEN_SETTING_0,
            self::TOKEN_SETTING_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_setting'] = $data['card_setting'] ?? null;
        $this->container['card_token'] = $data['card_token'] ?? null;
        $this->container['client_session_id'] = $data['client_session_id'] ?? null;
        $this->container['integrator_id'] = $data['integrator_id'] ?? null;
        $this->container['public_device_id'] = $data['public_device_id'] ?? null;
        $this->container['public_wallet_id'] = $data['public_wallet_id'] ?? null;
        $this->container['server_session_id'] = $data['server_session_id'] ?? null;
        $this->container['token_setting'] = $data['token_setting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_setting'] === null) {
            $invalidProperties[] = "'card_setting' can't be null";
        }
        $allowedValues = $this->getCardSettingAllowableValues();
        if (!is_null($this->container['card_setting']) && !in_array($this->container['card_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_setting', must be one of '%s'",
                $this->container['card_setting'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_token'] === null) {
            $invalidProperties[] = "'card_token' can't be null";
        }
        if ($this->container['client_session_id'] === null) {
            $invalidProperties[] = "'client_session_id' can't be null";
        }
        if ($this->container['integrator_id'] === null) {
            $invalidProperties[] = "'integrator_id' can't be null";
        }
        if ($this->container['public_device_id'] === null) {
            $invalidProperties[] = "'public_device_id' can't be null";
        }
        if ($this->container['public_wallet_id'] === null) {
            $invalidProperties[] = "'public_wallet_id' can't be null";
        }
        if ($this->container['server_session_id'] === null) {
            $invalidProperties[] = "'server_session_id' can't be null";
        }
        if ($this->container['token_setting'] === null) {
            $invalidProperties[] = "'token_setting' can't be null";
        }
        $allowedValues = $this->getTokenSettingAllowableValues();
        if (!is_null($this->container['token_setting']) && !in_array($this->container['token_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'token_setting', must be one of '%s'",
                $this->container['token_setting'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_setting
     *
     * @return int
     */
    public function getCardSetting()
    {
        return $this->container['card_setting'];
    }

    /**
     * Sets card_setting
     *
     * @param int $card_setting Indicates if the Funding Primary Account Number (FPAN) will be attempted.  * *1* - FPAN save will be attempted. * *0* - FPAN save will not be attempted.
     *
     * @return self
     */
    public function setCardSetting($card_setting)
    {
        $allowedValues = $this->getCardSettingAllowableValues();
        if (!in_array($card_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_setting', must be one of '%s'",
                    $card_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_setting'] = $card_setting;

        return $this;
    }

    /**
     * Gets card_token
     *
     * @return string
     */
    public function getCardToken()
    {
        return $this->container['card_token'];
    }

    /**
     * Sets card_token
     *
     * @param string $card_token Unique identifier of the card resource.
     *
     * @return self
     */
    public function setCardToken($card_token)
    {
        $this->container['card_token'] = $card_token;

        return $this;
    }

    /**
     * Gets client_session_id
     *
     * @return string
     */
    public function getClientSessionId()
    {
        return $this->container['client_session_id'];
    }

    /**
     * Sets client_session_id
     *
     * @param string $client_session_id String provided by Google Wallet that identifies the client session.
     *
     * @return self
     */
    public function setClientSessionId($client_session_id)
    {
        $this->container['client_session_id'] = $client_session_id;

        return $this;
    }

    /**
     * Gets integrator_id
     *
     * @return string
     */
    public function getIntegratorId()
    {
        return $this->container['integrator_id'];
    }

    /**
     * Sets integrator_id
     *
     * @param string $integrator_id Google-assigned string that uniquely identifies both the integrator that is initiating the session and the issuer of the card.
     *
     * @return self
     */
    public function setIntegratorId($integrator_id)
    {
        $this->container['integrator_id'] = $integrator_id;

        return $this;
    }

    /**
     * Gets public_device_id
     *
     * @return string
     */
    public function getPublicDeviceId()
    {
        return $this->container['public_device_id'];
    }

    /**
     * Sets public_device_id
     *
     * @param string $public_device_id String provided by Google Wallet that identifies the Android device that will receive the digital wallet token.
     *
     * @return self
     */
    public function setPublicDeviceId($public_device_id)
    {
        $this->container['public_device_id'] = $public_device_id;

        return $this;
    }

    /**
     * Gets public_wallet_id
     *
     * @return string
     */
    public function getPublicWalletId()
    {
        return $this->container['public_wallet_id'];
    }

    /**
     * Sets public_wallet_id
     *
     * @param string $public_wallet_id String provided by Google Wallet that identifies the device-scoped wallet that receives the digital wallet token.
     *
     * @return self
     */
    public function setPublicWalletId($public_wallet_id)
    {
        $this->container['public_wallet_id'] = $public_wallet_id;

        return $this;
    }

    /**
     * Gets server_session_id
     *
     * @return string
     */
    public function getServerSessionId()
    {
        return $this->container['server_session_id'];
    }

    /**
     * Sets server_session_id
     *
     * @param string $server_session_id String provided by Google Wallet that identifies the backend session.
     *
     * @return self
     */
    public function setServerSessionId($server_session_id)
    {
        $this->container['server_session_id'] = $server_session_id;

        return $this;
    }

    /**
     * Gets token_setting
     *
     * @return int
     */
    public function getTokenSetting()
    {
        return $this->container['token_setting'];
    }

    /**
     * Sets token_setting
     *
     * @param int $token_setting Indicates if tokenization will be attempted.  * *1* - Tokenization will be attempted. * *0* - Tokenization will not be attempted.
     *
     * @return self
     */
    public function setTokenSetting($token_setting)
    {
        $allowedValues = $this->getTokenSettingAllowableValues();
        if (!in_array($token_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'token_setting', must be one of '%s'",
                    $token_setting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['token_setting'] = $token_setting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


