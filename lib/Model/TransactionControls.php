<?php
/**
 * TransactionControls
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionControls Class Doc Comment
 *
 * @category Class
 * @description Controls transactional characteristics of card usage.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionControls implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_controls';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepted_countries_token' => 'string',
        'address_verification' => '\OpenAPI\Client\Model\AvsControls',
        'allow_chip_fallback' => 'bool',
        'allow_first_pin_set_via_financial_transaction' => 'bool',
        'allow_gpa_auth' => 'bool',
        'allow_mcc_group_authorization_controls' => 'bool',
        'allow_network_load' => 'bool',
        'allow_network_load_card_activation' => 'bool',
        'allow_quasi_cash' => 'bool',
        'always_require_icc' => 'bool',
        'always_require_pin' => 'bool',
        'enable_credit_service' => 'bool',
        'enable_partial_auth_approval' => 'bool',
        'ignore_card_suspended_state' => 'bool',
        'notification_language' => 'string',
        'quasi_cash_exempt_merchant_group_token' => 'string',
        'quasi_cash_exempt_mids' => 'string',
        'require_card_not_present_card_security_code' => 'bool',
        'strong_customer_authentication_limits' => '\OpenAPI\Client\Model\StrongCustomerAuthenticationLimits'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accepted_countries_token' => null,
        'address_verification' => null,
        'allow_chip_fallback' => null,
        'allow_first_pin_set_via_financial_transaction' => null,
        'allow_gpa_auth' => null,
        'allow_mcc_group_authorization_controls' => null,
        'allow_network_load' => null,
        'allow_network_load_card_activation' => null,
        'allow_quasi_cash' => null,
        'always_require_icc' => null,
        'always_require_pin' => null,
        'enable_credit_service' => null,
        'enable_partial_auth_approval' => null,
        'ignore_card_suspended_state' => null,
        'notification_language' => null,
        'quasi_cash_exempt_merchant_group_token' => null,
        'quasi_cash_exempt_mids' => null,
        'require_card_not_present_card_security_code' => null,
        'strong_customer_authentication_limits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted_countries_token' => 'accepted_countries_token',
        'address_verification' => 'address_verification',
        'allow_chip_fallback' => 'allow_chip_fallback',
        'allow_first_pin_set_via_financial_transaction' => 'allow_first_pin_set_via_financial_transaction',
        'allow_gpa_auth' => 'allow_gpa_auth',
        'allow_mcc_group_authorization_controls' => 'allow_mcc_group_authorization_controls',
        'allow_network_load' => 'allow_network_load',
        'allow_network_load_card_activation' => 'allow_network_load_card_activation',
        'allow_quasi_cash' => 'allow_quasi_cash',
        'always_require_icc' => 'always_require_icc',
        'always_require_pin' => 'always_require_pin',
        'enable_credit_service' => 'enable_credit_service',
        'enable_partial_auth_approval' => 'enable_partial_auth_approval',
        'ignore_card_suspended_state' => 'ignore_card_suspended_state',
        'notification_language' => 'notification_language',
        'quasi_cash_exempt_merchant_group_token' => 'quasi_cash_exempt_merchant_group_token',
        'quasi_cash_exempt_mids' => 'quasi_cash_exempt_mids',
        'require_card_not_present_card_security_code' => 'require_card_not_present_card_security_code',
        'strong_customer_authentication_limits' => 'strong_customer_authentication_limits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted_countries_token' => 'setAcceptedCountriesToken',
        'address_verification' => 'setAddressVerification',
        'allow_chip_fallback' => 'setAllowChipFallback',
        'allow_first_pin_set_via_financial_transaction' => 'setAllowFirstPinSetViaFinancialTransaction',
        'allow_gpa_auth' => 'setAllowGpaAuth',
        'allow_mcc_group_authorization_controls' => 'setAllowMccGroupAuthorizationControls',
        'allow_network_load' => 'setAllowNetworkLoad',
        'allow_network_load_card_activation' => 'setAllowNetworkLoadCardActivation',
        'allow_quasi_cash' => 'setAllowQuasiCash',
        'always_require_icc' => 'setAlwaysRequireIcc',
        'always_require_pin' => 'setAlwaysRequirePin',
        'enable_credit_service' => 'setEnableCreditService',
        'enable_partial_auth_approval' => 'setEnablePartialAuthApproval',
        'ignore_card_suspended_state' => 'setIgnoreCardSuspendedState',
        'notification_language' => 'setNotificationLanguage',
        'quasi_cash_exempt_merchant_group_token' => 'setQuasiCashExemptMerchantGroupToken',
        'quasi_cash_exempt_mids' => 'setQuasiCashExemptMids',
        'require_card_not_present_card_security_code' => 'setRequireCardNotPresentCardSecurityCode',
        'strong_customer_authentication_limits' => 'setStrongCustomerAuthenticationLimits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted_countries_token' => 'getAcceptedCountriesToken',
        'address_verification' => 'getAddressVerification',
        'allow_chip_fallback' => 'getAllowChipFallback',
        'allow_first_pin_set_via_financial_transaction' => 'getAllowFirstPinSetViaFinancialTransaction',
        'allow_gpa_auth' => 'getAllowGpaAuth',
        'allow_mcc_group_authorization_controls' => 'getAllowMccGroupAuthorizationControls',
        'allow_network_load' => 'getAllowNetworkLoad',
        'allow_network_load_card_activation' => 'getAllowNetworkLoadCardActivation',
        'allow_quasi_cash' => 'getAllowQuasiCash',
        'always_require_icc' => 'getAlwaysRequireIcc',
        'always_require_pin' => 'getAlwaysRequirePin',
        'enable_credit_service' => 'getEnableCreditService',
        'enable_partial_auth_approval' => 'getEnablePartialAuthApproval',
        'ignore_card_suspended_state' => 'getIgnoreCardSuspendedState',
        'notification_language' => 'getNotificationLanguage',
        'quasi_cash_exempt_merchant_group_token' => 'getQuasiCashExemptMerchantGroupToken',
        'quasi_cash_exempt_mids' => 'getQuasiCashExemptMids',
        'require_card_not_present_card_security_code' => 'getRequireCardNotPresentCardSecurityCode',
        'strong_customer_authentication_limits' => 'getStrongCustomerAuthenticationLimits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_countries_token'] = $data['accepted_countries_token'] ?? null;
        $this->container['address_verification'] = $data['address_verification'] ?? null;
        $this->container['allow_chip_fallback'] = $data['allow_chip_fallback'] ?? false;
        $this->container['allow_first_pin_set_via_financial_transaction'] = $data['allow_first_pin_set_via_financial_transaction'] ?? false;
        $this->container['allow_gpa_auth'] = $data['allow_gpa_auth'] ?? false;
        $this->container['allow_mcc_group_authorization_controls'] = $data['allow_mcc_group_authorization_controls'] ?? false;
        $this->container['allow_network_load'] = $data['allow_network_load'] ?? false;
        $this->container['allow_network_load_card_activation'] = $data['allow_network_load_card_activation'] ?? false;
        $this->container['allow_quasi_cash'] = $data['allow_quasi_cash'] ?? false;
        $this->container['always_require_icc'] = $data['always_require_icc'] ?? false;
        $this->container['always_require_pin'] = $data['always_require_pin'] ?? false;
        $this->container['enable_credit_service'] = $data['enable_credit_service'] ?? false;
        $this->container['enable_partial_auth_approval'] = $data['enable_partial_auth_approval'] ?? false;
        $this->container['ignore_card_suspended_state'] = $data['ignore_card_suspended_state'] ?? false;
        $this->container['notification_language'] = $data['notification_language'] ?? null;
        $this->container['quasi_cash_exempt_merchant_group_token'] = $data['quasi_cash_exempt_merchant_group_token'] ?? null;
        $this->container['quasi_cash_exempt_mids'] = $data['quasi_cash_exempt_mids'] ?? null;
        $this->container['require_card_not_present_card_security_code'] = $data['require_card_not_present_card_security_code'] ?? false;
        $this->container['strong_customer_authentication_limits'] = $data['strong_customer_authentication_limits'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['quasi_cash_exempt_merchant_group_token']) && (mb_strlen($this->container['quasi_cash_exempt_merchant_group_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'quasi_cash_exempt_merchant_group_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['quasi_cash_exempt_merchant_group_token']) && (mb_strlen($this->container['quasi_cash_exempt_merchant_group_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'quasi_cash_exempt_merchant_group_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepted_countries_token
     *
     * @return string|null
     */
    public function getAcceptedCountriesToken()
    {
        return $this->container['accepted_countries_token'];
    }

    /**
     * Sets accepted_countries_token
     *
     * @param string|null $accepted_countries_token Set to `accept_us_only` to allow transactions only within the US.  Set to `decline_ofac_countries` to allow international transactions except with countries that the Financial Action Task Force (FATF) and Office of Foreign Assets Control (OFAC) have identified as high risk.  Users with the Admin role can create and update additional lists of accepted countries for transactions at the `/acceptedcountries` endpoint. See <</core-api/accepted-countries, Accepted Countries>>.
     *
     * @return self
     */
    public function setAcceptedCountriesToken($accepted_countries_token)
    {
        $this->container['accepted_countries_token'] = $accepted_countries_token;

        return $this;
    }

    /**
     * Gets address_verification
     *
     * @return \OpenAPI\Client\Model\AvsControls|null
     */
    public function getAddressVerification()
    {
        return $this->container['address_verification'];
    }

    /**
     * Sets address_verification
     *
     * @param \OpenAPI\Client\Model\AvsControls|null $address_verification address_verification
     *
     * @return self
     */
    public function setAddressVerification($address_verification)
    {
        $this->container['address_verification'] = $address_verification;

        return $this;
    }

    /**
     * Gets allow_chip_fallback
     *
     * @return bool|null
     */
    public function getAllowChipFallback()
    {
        return $this->container['allow_chip_fallback'];
    }

    /**
     * Sets allow_chip_fallback
     *
     * @param bool|null $allow_chip_fallback Indicates whether to allow transactions where a Europay Mastercard and Visa (EMV) chip-enabled card was processed using the magstripe as fallback.
     *
     * @return self
     */
    public function setAllowChipFallback($allow_chip_fallback)
    {
        $this->container['allow_chip_fallback'] = $allow_chip_fallback;

        return $this;
    }

    /**
     * Gets allow_first_pin_set_via_financial_transaction
     *
     * @return bool|null
     */
    public function getAllowFirstPinSetViaFinancialTransaction()
    {
        return $this->container['allow_first_pin_set_via_financial_transaction'];
    }

    /**
     * Sets allow_first_pin_set_via_financial_transaction
     *
     * @param bool|null $allow_first_pin_set_via_financial_transaction *WARNING:* This field is deprecated and will be unsupported in a future release.  Allows cardholders to define a personal identification number (PIN) as they complete their first PIN-debit transaction.
     *
     * @return self
     */
    public function setAllowFirstPinSetViaFinancialTransaction($allow_first_pin_set_via_financial_transaction)
    {
        $this->container['allow_first_pin_set_via_financial_transaction'] = $allow_first_pin_set_via_financial_transaction;

        return $this;
    }

    /**
     * Gets allow_gpa_auth
     *
     * @return bool|null
     */
    public function getAllowGpaAuth()
    {
        return $this->container['allow_gpa_auth'];
    }

    /**
     * Sets allow_gpa_auth
     *
     * @param bool|null $allow_gpa_auth If set to `true`, transactions can be authorized using GPA funds.  *NOTE:* For most programs, this field should be set to `true`.
     *
     * @return self
     */
    public function setAllowGpaAuth($allow_gpa_auth)
    {
        $this->container['allow_gpa_auth'] = $allow_gpa_auth;

        return $this;
    }

    /**
     * Gets allow_mcc_group_authorization_controls
     *
     * @return bool|null
     */
    public function getAllowMccGroupAuthorizationControls()
    {
        return $this->container['allow_mcc_group_authorization_controls'];
    }

    /**
     * Sets allow_mcc_group_authorization_controls
     *
     * @param bool|null $allow_mcc_group_authorization_controls The <</core-api/mcc-groups, MCC group>> `authorization_controls` object allows you to automatically increase authorization holds and to specify authorization expiration times based on merchant type. By default, these settings apply to all cards in your program. You can, however, exempt cards associated with a particular card product by setting this field to `false`.  *NOTE:* Partial authorizations are disallowed if this field is set to `true`.
     *
     * @return self
     */
    public function setAllowMccGroupAuthorizationControls($allow_mcc_group_authorization_controls)
    {
        $this->container['allow_mcc_group_authorization_controls'] = $allow_mcc_group_authorization_controls;

        return $this;
    }

    /**
     * Gets allow_network_load
     *
     * @return bool|null
     */
    public function getAllowNetworkLoad()
    {
        return $this->container['allow_network_load'];
    }

    /**
     * Sets allow_network_load
     *
     * @param bool|null $allow_network_load Indicates whether card network loads are allowed. The associated card's state must be `ACTIVE` or the load will be rejected.
     *
     * @return self
     */
    public function setAllowNetworkLoad($allow_network_load)
    {
        $this->container['allow_network_load'] = $allow_network_load;

        return $this;
    }

    /**
     * Gets allow_network_load_card_activation
     *
     * @return bool|null
     */
    public function getAllowNetworkLoadCardActivation()
    {
        return $this->container['allow_network_load_card_activation'];
    }

    /**
     * Sets allow_network_load_card_activation
     *
     * @param bool|null $allow_network_load_card_activation Indicates whether card network loads are allowed. Sets the associated card's state to `ACTIVE` if its current state is `INACTIVE`.
     *
     * @return self
     */
    public function setAllowNetworkLoadCardActivation($allow_network_load_card_activation)
    {
        $this->container['allow_network_load_card_activation'] = $allow_network_load_card_activation;

        return $this;
    }

    /**
     * Gets allow_quasi_cash
     *
     * @return bool|null
     */
    public function getAllowQuasiCash()
    {
        return $this->container['allow_quasi_cash'];
    }

    /**
     * Sets allow_quasi_cash
     *
     * @param bool|null $allow_quasi_cash Indicates whether quasi-cash transactions are allowed. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler's checks, money orders, casino chips, or lottery tickets.
     *
     * @return self
     */
    public function setAllowQuasiCash($allow_quasi_cash)
    {
        $this->container['allow_quasi_cash'] = $allow_quasi_cash;

        return $this;
    }

    /**
     * Gets always_require_icc
     *
     * @return bool|null
     */
    public function getAlwaysRequireIcc()
    {
        return $this->container['always_require_icc'];
    }

    /**
     * Sets always_require_icc
     *
     * @param bool|null $always_require_icc If set to `true`, cards of this card product type require an Integrated Circuit Card.
     *
     * @return self
     */
    public function setAlwaysRequireIcc($always_require_icc)
    {
        $this->container['always_require_icc'] = $always_require_icc;

        return $this;
    }

    /**
     * Gets always_require_pin
     *
     * @return bool|null
     */
    public function getAlwaysRequirePin()
    {
        return $this->container['always_require_pin'];
    }

    /**
     * Sets always_require_pin
     *
     * @param bool|null $always_require_pin If set to `true`, cards of this card product type require a personal identification number (PIN).
     *
     * @return self
     */
    public function setAlwaysRequirePin($always_require_pin)
    {
        $this->container['always_require_pin'] = $always_require_pin;

        return $this;
    }

    /**
     * Gets enable_credit_service
     *
     * @return bool|null
     */
    public function getEnableCreditService()
    {
        return $this->container['enable_credit_service'];
    }

    /**
     * Sets enable_credit_service
     *
     * @param bool|null $enable_credit_service enable_credit_service
     *
     * @return self
     */
    public function setEnableCreditService($enable_credit_service)
    {
        $this->container['enable_credit_service'] = $enable_credit_service;

        return $this;
    }

    /**
     * Gets enable_partial_auth_approval
     *
     * @return bool|null
     */
    public function getEnablePartialAuthApproval()
    {
        return $this->container['enable_partial_auth_approval'];
    }

    /**
     * Sets enable_partial_auth_approval
     *
     * @param bool|null $enable_partial_auth_approval Set to `true` to enable partial authorizations.  When this setting is `false` and the requested authorization amount exceeds available funds, the transaction is declined. When this setting is `true` and the requested authorization amount exceeds available funds, the transaction is authorized for the amount of available funds.
     *
     * @return self
     */
    public function setEnablePartialAuthApproval($enable_partial_auth_approval)
    {
        $this->container['enable_partial_auth_approval'] = $enable_partial_auth_approval;

        return $this;
    }

    /**
     * Gets ignore_card_suspended_state
     *
     * @return bool|null
     */
    public function getIgnoreCardSuspendedState()
    {
        return $this->container['ignore_card_suspended_state'];
    }

    /**
     * Sets ignore_card_suspended_state
     *
     * @param bool|null $ignore_card_suspended_state Allows transactions to be approved even if the card's `state = SUSPENDED`. When this field is set to `true`, the card behaves as if its `state = ACTIVE`.
     *
     * @return self
     */
    public function setIgnoreCardSuspendedState($ignore_card_suspended_state)
    {
        $this->container['ignore_card_suspended_state'] = $ignore_card_suspended_state;

        return $this;
    }

    /**
     * Gets notification_language
     *
     * @return string|null
     */
    public function getNotificationLanguage()
    {
        return $this->container['notification_language'];
    }

    /**
     * Sets notification_language
     *
     * @param string|null $notification_language Specifies the language for 3D Secure and digital wallet token notifications sent to cardholders under this card program.  You can send notifications to your cardholders in the following languages:  * *ces* – Czech * *deu* – German * *eng* – English * *fra* – French * *grc* – Greek * *ita* – Italian * *nld* – Dutch * *pol* – Polish * *prt* – Portuguese * *rou* – Romanian * *spa* – Spanish * *swe* – Swedish  By default, notifications are sent in English.  To specify the language for OTP notifications at the user level, see <</core-api/users, Users>>. Languages set at the user level take precedence over the language set at the card product level.
     *
     * @return self
     */
    public function setNotificationLanguage($notification_language)
    {
        $this->container['notification_language'] = $notification_language;

        return $this;
    }

    /**
     * Gets quasi_cash_exempt_merchant_group_token
     *
     * @return string|null
     */
    public function getQuasiCashExemptMerchantGroupToken()
    {
        return $this->container['quasi_cash_exempt_merchant_group_token'];
    }

    /**
     * Sets quasi_cash_exempt_merchant_group_token
     *
     * @param string|null $quasi_cash_exempt_merchant_group_token The token of the merchant group that you want to exempt from quasi-cash transaction authorization control, allowing your cardholders to conduct quasi-cash transactions. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler's checks, money orders, casino chips, or lottery tickets.  You can specify a merchant group token in addition to whatever merchant identifiers you listed in the `quasi_cash_exempt_mids` field, if any. For more information, see <</core-api/merchant-groups, Merchant Groups>>.
     *
     * @return self
     */
    public function setQuasiCashExemptMerchantGroupToken($quasi_cash_exempt_merchant_group_token)
    {
        if (!is_null($quasi_cash_exempt_merchant_group_token) && (mb_strlen($quasi_cash_exempt_merchant_group_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $quasi_cash_exempt_merchant_group_token when calling TransactionControls., must be smaller than or equal to 36.');
        }
        if (!is_null($quasi_cash_exempt_merchant_group_token) && (mb_strlen($quasi_cash_exempt_merchant_group_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quasi_cash_exempt_merchant_group_token when calling TransactionControls., must be bigger than or equal to 1.');
        }

        $this->container['quasi_cash_exempt_merchant_group_token'] = $quasi_cash_exempt_merchant_group_token;

        return $this;
    }

    /**
     * Gets quasi_cash_exempt_mids
     *
     * @return string|null
     */
    public function getQuasiCashExemptMids()
    {
        return $this->container['quasi_cash_exempt_mids'];
    }

    /**
     * Sets quasi_cash_exempt_mids
     *
     * @param string|null $quasi_cash_exempt_mids Comma-separated list of merchant identifiers that you want to exempt from quasi-cash transaction authorization control, allowing your cardholders to conduct quasi-cash transactions. In a quasi-cash transaction, the cardholder purchases an item that can be directly converted to cash, such as traveler's checks, money orders, casino chips, or lottery tickets.
     *
     * @return self
     */
    public function setQuasiCashExemptMids($quasi_cash_exempt_mids)
    {
        $this->container['quasi_cash_exempt_mids'] = $quasi_cash_exempt_mids;

        return $this;
    }

    /**
     * Gets require_card_not_present_card_security_code
     *
     * @return bool|null
     */
    public function getRequireCardNotPresentCardSecurityCode()
    {
        return $this->container['require_card_not_present_card_security_code'];
    }

    /**
     * Sets require_card_not_present_card_security_code
     *
     * @param bool|null $require_card_not_present_card_security_code A value of `true` indicates that if `card_presence_required` is `true`, the card's security code is required.
     *
     * @return self
     */
    public function setRequireCardNotPresentCardSecurityCode($require_card_not_present_card_security_code)
    {
        $this->container['require_card_not_present_card_security_code'] = $require_card_not_present_card_security_code;

        return $this;
    }

    /**
     * Gets strong_customer_authentication_limits
     *
     * @return \OpenAPI\Client\Model\StrongCustomerAuthenticationLimits|null
     */
    public function getStrongCustomerAuthenticationLimits()
    {
        return $this->container['strong_customer_authentication_limits'];
    }

    /**
     * Sets strong_customer_authentication_limits
     *
     * @param \OpenAPI\Client\Model\StrongCustomerAuthenticationLimits|null $strong_customer_authentication_limits strong_customer_authentication_limits
     *
     * @return self
     */
    public function setStrongCustomerAuthenticationLimits($strong_customer_authentication_limits)
    {
        $this->container['strong_customer_authentication_limits'] = $strong_customer_authentication_limits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


