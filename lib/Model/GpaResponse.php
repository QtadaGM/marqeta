<?php
/**
 * GpaResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GpaResponse Class Doc Comment
 *
 * @category Class
 * @description Contains information about a GPA order, including fees, funding sources, and addresses. See &lt;&lt;/core-api/gpa-orders, GPA Orders&gt;&gt; for more information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GpaResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'gpa_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'business_token' => 'string',
        'created_time' => '\DateTime',
        'currency_code' => 'string',
        'fees' => '\OpenAPI\Client\Model\FeeDetail[]',
        'funding' => '\OpenAPI\Client\Model\Funding',
        'funding_source_address_token' => 'string',
        'funding_source_token' => 'string',
        'gateway_message' => 'string',
        'gateway_token' => 'int',
        'jit_funding' => '\OpenAPI\Client\Model\JitFundingApi',
        'last_modified_time' => '\DateTime',
        'memo' => 'string',
        'response' => '\OpenAPI\Client\Model\Response',
        'state' => 'string',
        'tags' => 'string',
        'token' => 'string',
        'transaction_token' => 'string',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'business_token' => null,
        'created_time' => 'date-time',
        'currency_code' => null,
        'fees' => null,
        'funding' => null,
        'funding_source_address_token' => null,
        'funding_source_token' => null,
        'gateway_message' => null,
        'gateway_token' => 'int64',
        'jit_funding' => null,
        'last_modified_time' => 'date-time',
        'memo' => null,
        'response' => null,
        'state' => null,
        'tags' => null,
        'token' => null,
        'transaction_token' => null,
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'business_token' => 'business_token',
        'created_time' => 'created_time',
        'currency_code' => 'currency_code',
        'fees' => 'fees',
        'funding' => 'funding',
        'funding_source_address_token' => 'funding_source_address_token',
        'funding_source_token' => 'funding_source_token',
        'gateway_message' => 'gateway_message',
        'gateway_token' => 'gateway_token',
        'jit_funding' => 'jit_funding',
        'last_modified_time' => 'last_modified_time',
        'memo' => 'memo',
        'response' => 'response',
        'state' => 'state',
        'tags' => 'tags',
        'token' => 'token',
        'transaction_token' => 'transaction_token',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'business_token' => 'setBusinessToken',
        'created_time' => 'setCreatedTime',
        'currency_code' => 'setCurrencyCode',
        'fees' => 'setFees',
        'funding' => 'setFunding',
        'funding_source_address_token' => 'setFundingSourceAddressToken',
        'funding_source_token' => 'setFundingSourceToken',
        'gateway_message' => 'setGatewayMessage',
        'gateway_token' => 'setGatewayToken',
        'jit_funding' => 'setJitFunding',
        'last_modified_time' => 'setLastModifiedTime',
        'memo' => 'setMemo',
        'response' => 'setResponse',
        'state' => 'setState',
        'tags' => 'setTags',
        'token' => 'setToken',
        'transaction_token' => 'setTransactionToken',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'business_token' => 'getBusinessToken',
        'created_time' => 'getCreatedTime',
        'currency_code' => 'getCurrencyCode',
        'fees' => 'getFees',
        'funding' => 'getFunding',
        'funding_source_address_token' => 'getFundingSourceAddressToken',
        'funding_source_token' => 'getFundingSourceToken',
        'gateway_message' => 'getGatewayMessage',
        'gateway_token' => 'getGatewayToken',
        'jit_funding' => 'getJitFunding',
        'last_modified_time' => 'getLastModifiedTime',
        'memo' => 'getMemo',
        'response' => 'getResponse',
        'state' => 'getState',
        'tags' => 'getTags',
        'token' => 'getToken',
        'transaction_token' => 'getTransactionToken',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['business_token'] = $data['business_token'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['fees'] = $data['fees'] ?? null;
        $this->container['funding'] = $data['funding'] ?? null;
        $this->container['funding_source_address_token'] = $data['funding_source_address_token'] ?? null;
        $this->container['funding_source_token'] = $data['funding_source_token'] ?? null;
        $this->container['gateway_message'] = $data['gateway_message'] ?? null;
        $this->container['gateway_token'] = $data['gateway_token'] ?? null;
        $this->container['jit_funding'] = $data['jit_funding'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['response'] = $data['response'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['transaction_token'] = $data['transaction_token'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['created_time'] === null) {
            $invalidProperties[] = "'created_time' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['funding'] === null) {
            $invalidProperties[] = "'funding' can't be null";
        }
        if ($this->container['funding_source_token'] === null) {
            $invalidProperties[] = "'funding_source_token' can't be null";
        }
        if ($this->container['last_modified_time'] === null) {
            $invalidProperties[] = "'last_modified_time' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ($this->container['transaction_token'] === null) {
            $invalidProperties[] = "'transaction_token' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount funded.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets business_token
     *
     * @return string|null
     */
    public function getBusinessToken()
    {
        return $this->container['business_token'];
    }

    /**
     * Sets business_token
     *
     * @param string|null $business_token Unique identifier of the business.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setBusinessToken($business_token)
    {
        $this->container['business_token'] = $business_token;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime $created_time Date and time when the GPA order was created, in UTC.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Three-digit ISO 4217 currency code.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\FeeDetail[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\FeeDetail[]|null $fees List of fees associated with the funding transaction.  This array is returned if it exists in the resource.
     *
     * @return self
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets funding
     *
     * @return \OpenAPI\Client\Model\Funding
     */
    public function getFunding()
    {
        return $this->container['funding'];
    }

    /**
     * Sets funding
     *
     * @param \OpenAPI\Client\Model\Funding $funding funding
     *
     * @return self
     */
    public function setFunding($funding)
    {
        $this->container['funding'] = $funding;

        return $this;
    }

    /**
     * Gets funding_source_address_token
     *
     * @return string|null
     */
    public function getFundingSourceAddressToken()
    {
        return $this->container['funding_source_address_token'];
    }

    /**
     * Sets funding_source_address_token
     *
     * @param string|null $funding_source_address_token Unique identifier of the funding source address to use for this order.
     *
     * @return self
     */
    public function setFundingSourceAddressToken($funding_source_address_token)
    {
        $this->container['funding_source_address_token'] = $funding_source_address_token;

        return $this;
    }

    /**
     * Gets funding_source_token
     *
     * @return string
     */
    public function getFundingSourceToken()
    {
        return $this->container['funding_source_token'];
    }

    /**
     * Sets funding_source_token
     *
     * @param string $funding_source_token Unique identifier of the funding source to use for this order.
     *
     * @return self
     */
    public function setFundingSourceToken($funding_source_token)
    {
        $this->container['funding_source_token'] = $funding_source_token;

        return $this;
    }

    /**
     * Gets gateway_message
     *
     * @return string|null
     */
    public function getGatewayMessage()
    {
        return $this->container['gateway_message'];
    }

    /**
     * Sets gateway_message
     *
     * @param string|null $gateway_message Message about the status of the funding request. Useful for determining whether it was approved and completed successfully, declined by the gateway, or timed out.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setGatewayMessage($gateway_message)
    {
        $this->container['gateway_message'] = $gateway_message;

        return $this;
    }

    /**
     * Gets gateway_token
     *
     * @return int|null
     */
    public function getGatewayToken()
    {
        return $this->container['gateway_token'];
    }

    /**
     * Sets gateway_token
     *
     * @param int|null $gateway_token Unique identifier of the JIT Funding request and response.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setGatewayToken($gateway_token)
    {
        $this->container['gateway_token'] = $gateway_token;

        return $this;
    }

    /**
     * Gets jit_funding
     *
     * @return \OpenAPI\Client\Model\JitFundingApi|null
     */
    public function getJitFunding()
    {
        return $this->container['jit_funding'];
    }

    /**
     * Sets jit_funding
     *
     * @param \OpenAPI\Client\Model\JitFundingApi|null $jit_funding jit_funding
     *
     * @return self
     */
    public function setJitFunding($jit_funding)
    {
        $this->container['jit_funding'] = $jit_funding;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime $last_modified_time Date and time when the GPA order was last modified, in UTC.
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Additional descriptive text.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets response
     *
     * @return \OpenAPI\Client\Model\Response
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param \OpenAPI\Client\Model\Response $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Current status of the funding transaction.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Comma-delimited list of tags describing the GPA order.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the GPA order.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets transaction_token
     *
     * @return string
     */
    public function getTransactionToken()
    {
        return $this->container['transaction_token'];
    }

    /**
     * Sets transaction_token
     *
     * @param string $transaction_token Unique identifier of the transaction being funded.
     *
     * @return self
     */
    public function setTransactionToken($transaction_token)
    {
        $this->container['transaction_token'] = $transaction_token;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token Unique identifier of the user resource.  This field is returned if it exists in the resource.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


