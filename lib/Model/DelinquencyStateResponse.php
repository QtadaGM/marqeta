<?php
/**
 * DelinquencyStateResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DelinquencyStateResponse Class Doc Comment
 *
 * @category Class
 * @description Contains details of the delinquency state of an account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DelinquencyStateResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DelinquencyStateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_token' => 'string',
        'buckets' => '\OpenAPI\Client\Model\DelinquencyBucketResponse[]',
        'current_due' => 'float',
        'date_account_current' => '\DateTime',
        'date_account_delinquent' => '\DateTime',
        'is_delinquent' => 'bool',
        'total_days_past_due' => 'int',
        'total_due' => 'float',
        'total_past_due' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_token' => 'string',
        'buckets' => null,
        'current_due' => null,
        'date_account_current' => 'date-time',
        'date_account_delinquent' => 'date-time',
        'is_delinquent' => null,
        'total_days_past_due' => null,
        'total_due' => null,
        'total_past_due' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_token' => 'account_token',
        'buckets' => 'buckets',
        'current_due' => 'current_due',
        'date_account_current' => 'date_account_current',
        'date_account_delinquent' => 'date_account_delinquent',
        'is_delinquent' => 'is_delinquent',
        'total_days_past_due' => 'total_days_past_due',
        'total_due' => 'total_due',
        'total_past_due' => 'total_past_due'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_token' => 'setAccountToken',
        'buckets' => 'setBuckets',
        'current_due' => 'setCurrentDue',
        'date_account_current' => 'setDateAccountCurrent',
        'date_account_delinquent' => 'setDateAccountDelinquent',
        'is_delinquent' => 'setIsDelinquent',
        'total_days_past_due' => 'setTotalDaysPastDue',
        'total_due' => 'setTotalDue',
        'total_past_due' => 'setTotalPastDue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_token' => 'getAccountToken',
        'buckets' => 'getBuckets',
        'current_due' => 'getCurrentDue',
        'date_account_current' => 'getDateAccountCurrent',
        'date_account_delinquent' => 'getDateAccountDelinquent',
        'is_delinquent' => 'getIsDelinquent',
        'total_days_past_due' => 'getTotalDaysPastDue',
        'total_due' => 'getTotalDue',
        'total_past_due' => 'getTotalPastDue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_token'] = $data['account_token'] ?? null;
        $this->container['buckets'] = $data['buckets'] ?? null;
        $this->container['current_due'] = $data['current_due'] ?? null;
        $this->container['date_account_current'] = $data['date_account_current'] ?? null;
        $this->container['date_account_delinquent'] = $data['date_account_delinquent'] ?? null;
        $this->container['is_delinquent'] = $data['is_delinquent'] ?? null;
        $this->container['total_days_past_due'] = $data['total_days_past_due'] ?? null;
        $this->container['total_due'] = $data['total_due'] ?? null;
        $this->container['total_past_due'] = $data['total_past_due'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_token'] === null) {
            $invalidProperties[] = "'account_token' can't be null";
        }
        if ($this->container['current_due'] === null) {
            $invalidProperties[] = "'current_due' can't be null";
        }
        if ($this->container['is_delinquent'] === null) {
            $invalidProperties[] = "'is_delinquent' can't be null";
        }
        if ($this->container['total_days_past_due'] === null) {
            $invalidProperties[] = "'total_days_past_due' can't be null";
        }
        if ($this->container['total_due'] === null) {
            $invalidProperties[] = "'total_due' can't be null";
        }
        if ($this->container['total_past_due'] === null) {
            $invalidProperties[] = "'total_past_due' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_token
     *
     * @return string
     */
    public function getAccountToken()
    {
        return $this->container['account_token'];
    }

    /**
     * Sets account_token
     *
     * @param string $account_token Unique identifier of the credit account.
     *
     * @return self
     */
    public function setAccountToken($account_token)
    {
        $this->container['account_token'] = $account_token;

        return $this;
    }

    /**
     * Gets buckets
     *
     * @return \OpenAPI\Client\Model\DelinquencyBucketResponse[]|null
     */
    public function getBuckets()
    {
        return $this->container['buckets'];
    }

    /**
     * Sets buckets
     *
     * @param \OpenAPI\Client\Model\DelinquencyBucketResponse[]|null $buckets One or more delinquency buckets for an account. Each delinquency bucket represents a billing cycle during which the account was delinquent.
     *
     * @return self
     */
    public function setBuckets($buckets)
    {
        $this->container['buckets'] = $buckets;

        return $this;
    }

    /**
     * Gets current_due
     *
     * @return float
     */
    public function getCurrentDue()
    {
        return $this->container['current_due'];
    }

    /**
     * Sets current_due
     *
     * @param float $current_due Amount that is due for the current billing cycle.
     *
     * @return self
     */
    public function setCurrentDue($current_due)
    {
        $this->container['current_due'] = $current_due;

        return $this;
    }

    /**
     * Gets date_account_current
     *
     * @return \DateTime|null
     */
    public function getDateAccountCurrent()
    {
        return $this->container['date_account_current'];
    }

    /**
     * Sets date_account_current
     *
     * @param \DateTime|null $date_account_current Date and time when the account was last made current on the Marqeta platform, in UTC.  If the account was never delinquent, this field returns the date and time the account was created on the Marqeta platform, in UTC.  If `is_delinquent` is `true`, a null value is returned.
     *
     * @return self
     */
    public function setDateAccountCurrent($date_account_current)
    {
        $this->container['date_account_current'] = $date_account_current;

        return $this;
    }

    /**
     * Gets date_account_delinquent
     *
     * @return \DateTime|null
     */
    public function getDateAccountDelinquent()
    {
        return $this->container['date_account_delinquent'];
    }

    /**
     * Sets date_account_delinquent
     *
     * @param \DateTime|null $date_account_delinquent Date and time when the account last fell delinquent on the Marqeta platform, in UTC.  If `is_delinquent` is `false`, a null value is returned.
     *
     * @return self
     */
    public function setDateAccountDelinquent($date_account_delinquent)
    {
        $this->container['date_account_delinquent'] = $date_account_delinquent;

        return $this;
    }

    /**
     * Gets is_delinquent
     *
     * @return bool
     */
    public function getIsDelinquent()
    {
        return $this->container['is_delinquent'];
    }

    /**
     * Sets is_delinquent
     *
     * @param bool $is_delinquent A value of `true` indicates that the account is currently delinquent.
     *
     * @return self
     */
    public function setIsDelinquent($is_delinquent)
    {
        $this->container['is_delinquent'] = $is_delinquent;

        return $this;
    }

    /**
     * Gets total_days_past_due
     *
     * @return int
     */
    public function getTotalDaysPastDue()
    {
        return $this->container['total_days_past_due'];
    }

    /**
     * Sets total_days_past_due
     *
     * @param int $total_days_past_due Total number of days that the account is past due.
     *
     * @return self
     */
    public function setTotalDaysPastDue($total_days_past_due)
    {
        $this->container['total_days_past_due'] = $total_days_past_due;

        return $this;
    }

    /**
     * Gets total_due
     *
     * @return float
     */
    public function getTotalDue()
    {
        return $this->container['total_due'];
    }

    /**
     * Sets total_due
     *
     * @param float $total_due Total amount that is due for the current billing cycle; the sum of `total_past_due_amount` and `current_due_amount`.
     *
     * @return self
     */
    public function setTotalDue($total_due)
    {
        $this->container['total_due'] = $total_due;

        return $this;
    }

    /**
     * Gets total_past_due
     *
     * @return float
     */
    public function getTotalPastDue()
    {
        return $this->container['total_past_due'];
    }

    /**
     * Sets total_past_due
     *
     * @param float $total_past_due Total amount that is past due.
     *
     * @return self
     */
    public function setTotalPastDue($total_past_due)
    {
        $this->container['total_past_due'] = $total_past_due;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


