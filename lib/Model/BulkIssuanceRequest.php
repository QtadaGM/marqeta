<?php
/**
 * BulkIssuanceRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BulkIssuanceRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BulkIssuanceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'bulk_issuance_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_allocation' => 'int',
        'card_product_token' => 'string',
        'expedite' => 'bool',
        'expiration_offset' => '\OpenAPI\Client\Model\ExpirationOffset',
        'fulfillment' => '\OpenAPI\Client\Model\FulfillmentRequest',
        'name_line_1_numeric_postfix' => 'bool',
        'name_line_1_random_postfix' => 'bool',
        'token' => 'string',
        'user_association' => '\OpenAPI\Client\Model\UserAssociation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_allocation' => 'int32',
        'card_product_token' => null,
        'expedite' => null,
        'expiration_offset' => null,
        'fulfillment' => null,
        'name_line_1_numeric_postfix' => null,
        'name_line_1_random_postfix' => null,
        'token' => null,
        'user_association' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_allocation' => 'card_allocation',
        'card_product_token' => 'card_product_token',
        'expedite' => 'expedite',
        'expiration_offset' => 'expiration_offset',
        'fulfillment' => 'fulfillment',
        'name_line_1_numeric_postfix' => 'name_line_1_numeric_postfix',
        'name_line_1_random_postfix' => 'name_line_1_random_postfix',
        'token' => 'token',
        'user_association' => 'user_association'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_allocation' => 'setCardAllocation',
        'card_product_token' => 'setCardProductToken',
        'expedite' => 'setExpedite',
        'expiration_offset' => 'setExpirationOffset',
        'fulfillment' => 'setFulfillment',
        'name_line_1_numeric_postfix' => 'setNameLine1NumericPostfix',
        'name_line_1_random_postfix' => 'setNameLine1RandomPostfix',
        'token' => 'setToken',
        'user_association' => 'setUserAssociation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_allocation' => 'getCardAllocation',
        'card_product_token' => 'getCardProductToken',
        'expedite' => 'getExpedite',
        'expiration_offset' => 'getExpirationOffset',
        'fulfillment' => 'getFulfillment',
        'name_line_1_numeric_postfix' => 'getNameLine1NumericPostfix',
        'name_line_1_random_postfix' => 'getNameLine1RandomPostfix',
        'token' => 'getToken',
        'user_association' => 'getUserAssociation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_allocation'] = $data['card_allocation'] ?? null;
        $this->container['card_product_token'] = $data['card_product_token'] ?? null;
        $this->container['expedite'] = $data['expedite'] ?? false;
        $this->container['expiration_offset'] = $data['expiration_offset'] ?? null;
        $this->container['fulfillment'] = $data['fulfillment'] ?? null;
        $this->container['name_line_1_numeric_postfix'] = $data['name_line_1_numeric_postfix'] ?? false;
        $this->container['name_line_1_random_postfix'] = $data['name_line_1_random_postfix'] ?? false;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['user_association'] = $data['user_association'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_allocation'] === null) {
            $invalidProperties[] = "'card_allocation' can't be null";
        }
        if (($this->container['card_allocation'] > 50000)) {
            $invalidProperties[] = "invalid value for 'card_allocation', must be smaller than or equal to 50000.";
        }

        if ($this->container['card_product_token'] === null) {
            $invalidProperties[] = "'card_product_token' can't be null";
        }
        if ((mb_strlen($this->container['card_product_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['card_product_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_product_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['fulfillment'] === null) {
            $invalidProperties[] = "'fulfillment' can't be null";
        }
        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_allocation
     *
     * @return int
     */
    public function getCardAllocation()
    {
        return $this->container['card_allocation'];
    }

    /**
     * Sets card_allocation
     *
     * @param int $card_allocation Number of cards in the order.
     *
     * @return self
     */
    public function setCardAllocation($card_allocation)
    {

        if (($card_allocation > 50000)) {
            throw new \InvalidArgumentException('invalid value for $card_allocation when calling BulkIssuanceRequest., must be smaller than or equal to 50000.');
        }

        $this->container['card_allocation'] = $card_allocation;

        return $this;
    }

    /**
     * Gets card_product_token
     *
     * @return string
     */
    public function getCardProductToken()
    {
        return $this->container['card_product_token'];
    }

    /**
     * Sets card_product_token
     *
     * @param string $card_product_token Specifies the card product from which to create your cards.
     *
     * @return self
     */
    public function setCardProductToken($card_product_token)
    {
        if ((mb_strlen($card_product_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling BulkIssuanceRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($card_product_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_product_token when calling BulkIssuanceRequest., must be bigger than or equal to 1.');
        }

        $this->container['card_product_token'] = $card_product_token;

        return $this;
    }

    /**
     * Gets expedite
     *
     * @return bool|null
     */
    public function getExpedite()
    {
        return $this->container['expedite'];
    }

    /**
     * Sets expedite
     *
     * @param bool|null $expedite Set to `true` to request expedited processing of the order by your card fulfillment provider.  This expedited service is available for cards fulfilled by link:http://perfectplastic.com/[Perfect Plastic Printing, window=\"_blank\"], link:http://www.idemia.com[IDEMIA, window=\"_blank\"], and link:https://www.arroweye.com/[Arroweye Solutions, window=\"_blank\"].  *NOTE:* Contact your Marqeta representative for information regarding the cost of expedited service.
     *
     * @return self
     */
    public function setExpedite($expedite)
    {
        $this->container['expedite'] = $expedite;

        return $this;
    }

    /**
     * Gets expiration_offset
     *
     * @return \OpenAPI\Client\Model\ExpirationOffset|null
     */
    public function getExpirationOffset()
    {
        return $this->container['expiration_offset'];
    }

    /**
     * Sets expiration_offset
     *
     * @param \OpenAPI\Client\Model\ExpirationOffset|null $expiration_offset expiration_offset
     *
     * @return self
     */
    public function setExpirationOffset($expiration_offset)
    {
        $this->container['expiration_offset'] = $expiration_offset;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \OpenAPI\Client\Model\FulfillmentRequest
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \OpenAPI\Client\Model\FulfillmentRequest $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets name_line_1_numeric_postfix
     *
     * @return bool|null
     */
    public function getNameLine1NumericPostfix()
    {
        return $this->container['name_line_1_numeric_postfix'];
    }

    /**
     * Sets name_line_1_numeric_postfix
     *
     * @param bool|null $name_line_1_numeric_postfix If set to `true`, the unique numeric postfix appended to each card's token field is also appended to the card's `fulfillment.card_personalization.text.name_line_1.value` field.
     *
     * @return self
     */
    public function setNameLine1NumericPostfix($name_line_1_numeric_postfix)
    {
        $this->container['name_line_1_numeric_postfix'] = $name_line_1_numeric_postfix;

        return $this;
    }

    /**
     * Gets name_line_1_random_postfix
     *
     * @return bool|null
     */
    public function getNameLine1RandomPostfix()
    {
        return $this->container['name_line_1_random_postfix'];
    }

    /**
     * Sets name_line_1_random_postfix
     *
     * @param bool|null $name_line_1_random_postfix If set to `true`, the unique random postfix appended to each card's token field is also appended to the card's `fulfillment.card_personalization.text.name_line_1.value` field.
     *
     * @return self
     */
    public function setNameLine1RandomPostfix($name_line_1_random_postfix)
    {
        $this->container['name_line_1_random_postfix'] = $name_line_1_random_postfix;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling BulkIssuanceRequest., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling BulkIssuanceRequest., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_association
     *
     * @return \OpenAPI\Client\Model\UserAssociation|null
     */
    public function getUserAssociation()
    {
        return $this->container['user_association'];
    }

    /**
     * Sets user_association
     *
     * @param \OpenAPI\Client\Model\UserAssociation|null $user_association user_association
     *
     * @return self
     */
    public function setUserAssociation($user_association)
    {
        $this->container['user_association'] = $user_association;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


