<?php
/**
 * CardGroup
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CardGroup Class Doc Comment
 *
 * @category Class
 * @description Request body for a Card Group object
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CardGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_tokens' => 'string[]',
        'created_time' => '\DateTime',
        'last_issued_card_token' => 'string',
        'source_card_token' => 'string',
        'token' => 'string',
        'updated_time' => '\DateTime',
        'user_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_tokens' => null,
        'created_time' => 'date-time',
        'last_issued_card_token' => null,
        'source_card_token' => null,
        'token' => null,
        'updated_time' => 'date-time',
        'user_token' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_tokens' => 'card_tokens',
        'created_time' => 'created_time',
        'last_issued_card_token' => 'last_issued_card_token',
        'source_card_token' => 'source_card_token',
        'token' => 'token',
        'updated_time' => 'updated_time',
        'user_token' => 'user_token'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_tokens' => 'setCardTokens',
        'created_time' => 'setCreatedTime',
        'last_issued_card_token' => 'setLastIssuedCardToken',
        'source_card_token' => 'setSourceCardToken',
        'token' => 'setToken',
        'updated_time' => 'setUpdatedTime',
        'user_token' => 'setUserToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_tokens' => 'getCardTokens',
        'created_time' => 'getCreatedTime',
        'last_issued_card_token' => 'getLastIssuedCardToken',
        'source_card_token' => 'getSourceCardToken',
        'token' => 'getToken',
        'updated_time' => 'getUpdatedTime',
        'user_token' => 'getUserToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_tokens'] = $data['card_tokens'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['last_issued_card_token'] = $data['last_issued_card_token'] ?? null;
        $this->container['source_card_token'] = $data['source_card_token'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['updated_time'] = $data['updated_time'] ?? null;
        $this->container['user_token'] = $data['user_token'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['last_issued_card_token']) && (mb_strlen($this->container['last_issued_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'last_issued_card_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['last_issued_card_token']) && (mb_strlen($this->container['last_issued_card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_issued_card_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['source_card_token'] === null) {
            $invalidProperties[] = "'source_card_token' can't be null";
        }
        if ((mb_strlen($this->container['source_card_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'source_card_token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['source_card_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_card_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 36)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['user_token']) && (mb_strlen($this->container['user_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['user_token']) && (mb_strlen($this->container['user_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_token', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_tokens
     *
     * @return string[]|null
     */
    public function getCardTokens()
    {
        return $this->container['card_tokens'];
    }

    /**
     * Sets card_tokens
     *
     * @param string[]|null $card_tokens Array of card tokens associated with group. There will be at least one card token in the array.
     *
     * @return self
     */
    public function setCardTokens($card_tokens)
    {
        $this->container['card_tokens'] = $card_tokens;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time Date and time the card group was created in the system. The date and time is provided in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets last_issued_card_token
     *
     * @return string|null
     */
    public function getLastIssuedCardToken()
    {
        return $this->container['last_issued_card_token'];
    }

    /**
     * Sets last_issued_card_token
     *
     * @param string|null $last_issued_card_token Unique identifier of the last reissued card token associated with group. It may be empty if there is no reissued card.
     *
     * @return self
     */
    public function setLastIssuedCardToken($last_issued_card_token)
    {
        if (!is_null($last_issued_card_token) && (mb_strlen($last_issued_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $last_issued_card_token when calling CardGroup., must be smaller than or equal to 36.');
        }
        if (!is_null($last_issued_card_token) && (mb_strlen($last_issued_card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_issued_card_token when calling CardGroup., must be bigger than or equal to 1.');
        }

        $this->container['last_issued_card_token'] = $last_issued_card_token;

        return $this;
    }

    /**
     * Gets source_card_token
     *
     * @return string
     */
    public function getSourceCardToken()
    {
        return $this->container['source_card_token'];
    }

    /**
     * Sets source_card_token
     *
     * @param string $source_card_token Unique identifier of the card token associated with group. This is the card that will be used to create the card group. The Card Group Service will send a request to JCard to verify that this card is not a reissue or replacement.
     *
     * @return self
     */
    public function setSourceCardToken($source_card_token)
    {
        if ((mb_strlen($source_card_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $source_card_token when calling CardGroup., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($source_card_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_card_token when calling CardGroup., must be bigger than or equal to 1.');
        }

        $this->container['source_card_token'] = $source_card_token;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Unique identifier of the card group.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
     *
     * @return self
     */
    public function setToken($token)
    {
        if ((mb_strlen($token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardGroup., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling CardGroup., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time Date and time the card group was last updated in the system. The date and time is provided in ISO 8601 format.
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets user_token
     *
     * @return string|null
     */
    public function getUserToken()
    {
        return $this->container['user_token'];
    }

    /**
     * Sets user_token
     *
     * @param string|null $user_token Unique identifier of the user this card group belongs to.
     *
     * @return self
     */
    public function setUserToken($user_token)
    {
        if (!is_null($user_token) && (mb_strlen($user_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling CardGroup., must be smaller than or equal to 36.');
        }
        if (!is_null($user_token) && (mb_strlen($user_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_token when calling CardGroup., must be bigger than or equal to 1.');
        }

        $this->container['user_token'] = $user_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


