<?php
/**
 * FundingViaACHBetaApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FundingViaACHBetaApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FundingViaACHBetaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getBanktransfersAch
     *
     * List ACH transfers
     *
     * @param  int $count Number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $user_token Unique identifier of the user resource. (optional)
     * @param  string $business_token Unique identifier of the business resource. (optional)
     * @param  string $funding_source_token Unique identifier of the funding source. (optional)
     * @param  string $statuses Comma-delimited list of bank transfer statuses. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     * @param  string $expand Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     * @param  string $funding_source_type Funding source type to filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferListResponse
     */
    public function getBanktransfersAch($count = 5, $start_index = 0, $user_token = null, $business_token = null, $funding_source_token = null, $statuses = null, $sort_by = '-lastModifiedTime', $expand = null, $funding_source_type = null)
    {
        list($response) = $this->getBanktransfersAchWithHttpInfo($count, $start_index, $user_token, $business_token, $funding_source_token, $statuses, $sort_by, $expand, $funding_source_type);
        return $response;
    }

    /**
     * Operation getBanktransfersAchWithHttpInfo
     *
     * List ACH transfers
     *
     * @param  int $count Number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $user_token Unique identifier of the user resource. (optional)
     * @param  string $business_token Unique identifier of the business resource. (optional)
     * @param  string $funding_source_token Unique identifier of the funding source. (optional)
     * @param  string $statuses Comma-delimited list of bank transfer statuses. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     * @param  string $expand Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     * @param  string $funding_source_type Funding source type to filter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBanktransfersAchWithHttpInfo($count = 5, $start_index = 0, $user_token = null, $business_token = null, $funding_source_token = null, $statuses = null, $sort_by = '-lastModifiedTime', $expand = null, $funding_source_type = null)
    {
        $request = $this->getBanktransfersAchRequest($count, $start_index, $user_token, $business_token, $funding_source_token, $statuses, $sort_by, $expand, $funding_source_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BankTransferListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBanktransfersAchAsync
     *
     * List ACH transfers
     *
     * @param  int $count Number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $user_token Unique identifier of the user resource. (optional)
     * @param  string $business_token Unique identifier of the business resource. (optional)
     * @param  string $funding_source_token Unique identifier of the funding source. (optional)
     * @param  string $statuses Comma-delimited list of bank transfer statuses. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     * @param  string $expand Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     * @param  string $funding_source_type Funding source type to filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchAsync($count = 5, $start_index = 0, $user_token = null, $business_token = null, $funding_source_token = null, $statuses = null, $sort_by = '-lastModifiedTime', $expand = null, $funding_source_type = null)
    {
        return $this->getBanktransfersAchAsyncWithHttpInfo($count, $start_index, $user_token, $business_token, $funding_source_token, $statuses, $sort_by, $expand, $funding_source_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBanktransfersAchAsyncWithHttpInfo
     *
     * List ACH transfers
     *
     * @param  int $count Number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $user_token Unique identifier of the user resource. (optional)
     * @param  string $business_token Unique identifier of the business resource. (optional)
     * @param  string $funding_source_token Unique identifier of the funding source. (optional)
     * @param  string $statuses Comma-delimited list of bank transfer statuses. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     * @param  string $expand Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     * @param  string $funding_source_type Funding source type to filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchAsyncWithHttpInfo($count = 5, $start_index = 0, $user_token = null, $business_token = null, $funding_source_token = null, $statuses = null, $sort_by = '-lastModifiedTime', $expand = null, $funding_source_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferListResponse';
        $request = $this->getBanktransfersAchRequest($count, $start_index, $user_token, $business_token, $funding_source_token, $statuses, $sort_by, $expand, $funding_source_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBanktransfersAch'
     *
     * @param  int $count Number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $user_token Unique identifier of the user resource. (optional)
     * @param  string $business_token Unique identifier of the business resource. (optional)
     * @param  string $funding_source_token Unique identifier of the funding source. (optional)
     * @param  string $statuses Comma-delimited list of bank transfer statuses. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     * @param  string $expand Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token. (optional)
     * @param  string $funding_source_type Funding source type to filter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBanktransfersAchRequest($count = 5, $start_index = 0, $user_token = null, $business_token = null, $funding_source_token = null, $statuses = null, $sort_by = '-lastModifiedTime', $expand = null, $funding_source_type = null)
    {

        $resourcePath = '/banktransfers/ach';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($business_token !== null) {
            if('form' === 'form' && is_array($business_token)) {
                foreach($business_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['business_token'] = $business_token;
            }
        }
        // query params
        if ($funding_source_token !== null) {
            if('form' === 'form' && is_array($funding_source_token)) {
                foreach($funding_source_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['funding_source_token'] = $funding_source_token;
            }
        }
        // query params
        if ($statuses !== null) {
            if('form' === 'form' && is_array($statuses)) {
                foreach($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['statuses'] = $statuses;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($expand !== null) {
            if('form' === 'form' && is_array($expand)) {
                foreach($expand as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expand'] = $expand;
            }
        }
        // query params
        if ($funding_source_type !== null) {
            if('form' === 'form' && is_array($funding_source_type)) {
                foreach($funding_source_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['funding_source_type'] = $funding_source_type;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBanktransfersAchToken
     *
     * Retrieve ACH transfer
     *
     * @param  string $token Unique identifier of the bank transfer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferResponseModel
     */
    public function getBanktransfersAchToken($token)
    {
        list($response) = $this->getBanktransfersAchTokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getBanktransfersAchTokenWithHttpInfo
     *
     * Retrieve ACH transfer
     *
     * @param  string $token Unique identifier of the bank transfer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBanktransfersAchTokenWithHttpInfo($token)
    {
        $request = $this->getBanktransfersAchTokenRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BankTransferResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBanktransfersAchTokenAsync
     *
     * Retrieve ACH transfer
     *
     * @param  string $token Unique identifier of the bank transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchTokenAsync($token)
    {
        return $this->getBanktransfersAchTokenAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBanktransfersAchTokenAsyncWithHttpInfo
     *
     * Retrieve ACH transfer
     *
     * @param  string $token Unique identifier of the bank transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchTokenAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
        $request = $this->getBanktransfersAchTokenRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBanktransfersAchToken'
     *
     * @param  string $token Unique identifier of the bank transfer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBanktransfersAchTokenRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getBanktransfersAchToken'
            );
        }

        $resourcePath = '/banktransfers/ach/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBanktransfersAchTransitions
     *
     * List ACH transfer transitions
     *
     * @param  int $count Number of bank transfer transitions to retrieve. (optional, default to 5)
     * @param  string $token Unique identifier of the bank transfer transition. (optional)
     * @param  string $bank_transfer_token Unique identifier of the bank transfer. (optional)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $statuses Comma-delimited list of bank transfer states to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferTransitionListResponse
     */
    public function getBanktransfersAchTransitions($count = 5, $token = null, $bank_transfer_token = null, $start_index = 0, $sort_by = '-createdTime', $statuses = null)
    {
        list($response) = $this->getBanktransfersAchTransitionsWithHttpInfo($count, $token, $bank_transfer_token, $start_index, $sort_by, $statuses);
        return $response;
    }

    /**
     * Operation getBanktransfersAchTransitionsWithHttpInfo
     *
     * List ACH transfer transitions
     *
     * @param  int $count Number of bank transfer transitions to retrieve. (optional, default to 5)
     * @param  string $token Unique identifier of the bank transfer transition. (optional)
     * @param  string $bank_transfer_token Unique identifier of the bank transfer. (optional)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $statuses Comma-delimited list of bank transfer states to display. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferTransitionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBanktransfersAchTransitionsWithHttpInfo($count = 5, $token = null, $bank_transfer_token = null, $start_index = 0, $sort_by = '-createdTime', $statuses = null)
    {
        $request = $this->getBanktransfersAchTransitionsRequest($count, $token, $bank_transfer_token, $start_index, $sort_by, $statuses);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BankTransferTransitionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferTransitionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferTransitionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferTransitionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBanktransfersAchTransitionsAsync
     *
     * List ACH transfer transitions
     *
     * @param  int $count Number of bank transfer transitions to retrieve. (optional, default to 5)
     * @param  string $token Unique identifier of the bank transfer transition. (optional)
     * @param  string $bank_transfer_token Unique identifier of the bank transfer. (optional)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $statuses Comma-delimited list of bank transfer states to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchTransitionsAsync($count = 5, $token = null, $bank_transfer_token = null, $start_index = 0, $sort_by = '-createdTime', $statuses = null)
    {
        return $this->getBanktransfersAchTransitionsAsyncWithHttpInfo($count, $token, $bank_transfer_token, $start_index, $sort_by, $statuses)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBanktransfersAchTransitionsAsyncWithHttpInfo
     *
     * List ACH transfer transitions
     *
     * @param  int $count Number of bank transfer transitions to retrieve. (optional, default to 5)
     * @param  string $token Unique identifier of the bank transfer transition. (optional)
     * @param  string $bank_transfer_token Unique identifier of the bank transfer. (optional)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $statuses Comma-delimited list of bank transfer states to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBanktransfersAchTransitionsAsyncWithHttpInfo($count = 5, $token = null, $bank_transfer_token = null, $start_index = 0, $sort_by = '-createdTime', $statuses = null)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferTransitionListResponse';
        $request = $this->getBanktransfersAchTransitionsRequest($count, $token, $bank_transfer_token, $start_index, $sort_by, $statuses);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBanktransfersAchTransitions'
     *
     * @param  int $count Number of bank transfer transitions to retrieve. (optional, default to 5)
     * @param  string $token Unique identifier of the bank transfer transition. (optional)
     * @param  string $bank_transfer_token Unique identifier of the bank transfer. (optional)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $statuses Comma-delimited list of bank transfer states to display. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBanktransfersAchTransitionsRequest($count = 5, $token = null, $bank_transfer_token = null, $start_index = 0, $sort_by = '-createdTime', $statuses = null)
    {
        if ($count !== null && $count > 50) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling FundingViaACHBetaApi.getBanktransfersAchTransitions, must be smaller than or equal to 50.');
        }


        $resourcePath = '/banktransfers/ach/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($token !== null) {
            if('form' === 'form' && is_array($token)) {
                foreach($token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token'] = $token;
            }
        }
        // query params
        if ($bank_transfer_token !== null) {
            if('form' === 'form' && is_array($bank_transfer_token)) {
                foreach($bank_transfer_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bank_transfer_token'] = $bank_transfer_token;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($statuses !== null) {
            if('form' === 'form' && is_array($statuses)) {
                foreach($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['statuses'] = $statuses;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplyProvisionalCreditToBankTransfer
     *
     * Apply a provisional credit to ACH transfer
     *
     * @param  \OpenAPI\Client\Model\EarlyFundsRequestModel $early_funds_request_model ACH early funds request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferResponseModel|\OpenAPI\Client\Model\BankTransferResponseModel
     */
    public function postApplyProvisionalCreditToBankTransfer($early_funds_request_model)
    {
        list($response) = $this->postApplyProvisionalCreditToBankTransferWithHttpInfo($early_funds_request_model);
        return $response;
    }

    /**
     * Operation postApplyProvisionalCreditToBankTransferWithHttpInfo
     *
     * Apply a provisional credit to ACH transfer
     *
     * @param  \OpenAPI\Client\Model\EarlyFundsRequestModel $early_funds_request_model ACH early funds request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferResponseModel|\OpenAPI\Client\Model\BankTransferResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplyProvisionalCreditToBankTransferWithHttpInfo($early_funds_request_model)
    {
        $request = $this->postApplyProvisionalCreditToBankTransferRequest($early_funds_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BankTransferResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\BankTransferResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApplyProvisionalCreditToBankTransferAsync
     *
     * Apply a provisional credit to ACH transfer
     *
     * @param  \OpenAPI\Client\Model\EarlyFundsRequestModel $early_funds_request_model ACH early funds request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplyProvisionalCreditToBankTransferAsync($early_funds_request_model)
    {
        return $this->postApplyProvisionalCreditToBankTransferAsyncWithHttpInfo($early_funds_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplyProvisionalCreditToBankTransferAsyncWithHttpInfo
     *
     * Apply a provisional credit to ACH transfer
     *
     * @param  \OpenAPI\Client\Model\EarlyFundsRequestModel $early_funds_request_model ACH early funds request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplyProvisionalCreditToBankTransferAsyncWithHttpInfo($early_funds_request_model)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
        $request = $this->postApplyProvisionalCreditToBankTransferRequest($early_funds_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplyProvisionalCreditToBankTransfer'
     *
     * @param  \OpenAPI\Client\Model\EarlyFundsRequestModel $early_funds_request_model ACH early funds request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplyProvisionalCreditToBankTransferRequest($early_funds_request_model)
    {
        // verify the required parameter 'early_funds_request_model' is set
        if ($early_funds_request_model === null || (is_array($early_funds_request_model) && count($early_funds_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $early_funds_request_model when calling postApplyProvisionalCreditToBankTransfer'
            );
        }

        $resourcePath = '/banktransfers/ach/earlyfunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($early_funds_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($early_funds_request_model));
            } else {
                $httpBody = $early_funds_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBanktransfersAch
     *
     * Create ACH transfer
     *
     * @param  \OpenAPI\Client\Model\BankTransferRequestModel $bank_transfer_request_model Create bank transfer request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferResponseModel
     */
    public function postBanktransfersAch($bank_transfer_request_model)
    {
        list($response) = $this->postBanktransfersAchWithHttpInfo($bank_transfer_request_model);
        return $response;
    }

    /**
     * Operation postBanktransfersAchWithHttpInfo
     *
     * Create ACH transfer
     *
     * @param  \OpenAPI\Client\Model\BankTransferRequestModel $bank_transfer_request_model Create bank transfer request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBanktransfersAchWithHttpInfo($bank_transfer_request_model)
    {
        $request = $this->postBanktransfersAchRequest($bank_transfer_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\BankTransferResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBanktransfersAchAsync
     *
     * Create ACH transfer
     *
     * @param  \OpenAPI\Client\Model\BankTransferRequestModel $bank_transfer_request_model Create bank transfer request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBanktransfersAchAsync($bank_transfer_request_model)
    {
        return $this->postBanktransfersAchAsyncWithHttpInfo($bank_transfer_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBanktransfersAchAsyncWithHttpInfo
     *
     * Create ACH transfer
     *
     * @param  \OpenAPI\Client\Model\BankTransferRequestModel $bank_transfer_request_model Create bank transfer request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBanktransfersAchAsyncWithHttpInfo($bank_transfer_request_model)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferResponseModel';
        $request = $this->postBanktransfersAchRequest($bank_transfer_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBanktransfersAch'
     *
     * @param  \OpenAPI\Client\Model\BankTransferRequestModel $bank_transfer_request_model Create bank transfer request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBanktransfersAchRequest($bank_transfer_request_model)
    {
        // verify the required parameter 'bank_transfer_request_model' is set
        if ($bank_transfer_request_model === null || (is_array($bank_transfer_request_model) && count($bank_transfer_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_transfer_request_model when calling postBanktransfersAch'
            );
        }

        $resourcePath = '/banktransfers/ach';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bank_transfer_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bank_transfer_request_model));
            } else {
                $httpBody = $bank_transfer_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBanktransfersAchTransitions
     *
     * Create ACH transfer transition
     *
     * @param  \OpenAPI\Client\Model\BankTransferTransitionRequestModel $bank_transfer_transition_request_model Create bank transfer transition request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BankTransferTransitionResponseModel
     */
    public function postBanktransfersAchTransitions($bank_transfer_transition_request_model)
    {
        list($response) = $this->postBanktransfersAchTransitionsWithHttpInfo($bank_transfer_transition_request_model);
        return $response;
    }

    /**
     * Operation postBanktransfersAchTransitionsWithHttpInfo
     *
     * Create ACH transfer transition
     *
     * @param  \OpenAPI\Client\Model\BankTransferTransitionRequestModel $bank_transfer_transition_request_model Create bank transfer transition request model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BankTransferTransitionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBanktransfersAchTransitionsWithHttpInfo($bank_transfer_transition_request_model)
    {
        $request = $this->postBanktransfersAchTransitionsRequest($bank_transfer_transition_request_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\BankTransferTransitionResponseModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BankTransferTransitionResponseModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BankTransferTransitionResponseModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BankTransferTransitionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBanktransfersAchTransitionsAsync
     *
     * Create ACH transfer transition
     *
     * @param  \OpenAPI\Client\Model\BankTransferTransitionRequestModel $bank_transfer_transition_request_model Create bank transfer transition request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBanktransfersAchTransitionsAsync($bank_transfer_transition_request_model)
    {
        return $this->postBanktransfersAchTransitionsAsyncWithHttpInfo($bank_transfer_transition_request_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBanktransfersAchTransitionsAsyncWithHttpInfo
     *
     * Create ACH transfer transition
     *
     * @param  \OpenAPI\Client\Model\BankTransferTransitionRequestModel $bank_transfer_transition_request_model Create bank transfer transition request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBanktransfersAchTransitionsAsyncWithHttpInfo($bank_transfer_transition_request_model)
    {
        $returnType = '\OpenAPI\Client\Model\BankTransferTransitionResponseModel';
        $request = $this->postBanktransfersAchTransitionsRequest($bank_transfer_transition_request_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBanktransfersAchTransitions'
     *
     * @param  \OpenAPI\Client\Model\BankTransferTransitionRequestModel $bank_transfer_transition_request_model Create bank transfer transition request model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBanktransfersAchTransitionsRequest($bank_transfer_transition_request_model)
    {
        // verify the required parameter 'bank_transfer_transition_request_model' is set
        if ($bank_transfer_transition_request_model === null || (is_array($bank_transfer_transition_request_model) && count($bank_transfer_transition_request_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_transfer_transition_request_model when calling postBanktransfersAchTransitions'
            );
        }

        $resourcePath = '/banktransfers/ach/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bank_transfer_transition_request_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bank_transfer_transition_request_model));
            } else {
                $httpBody = $bank_transfer_transition_request_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
