<?php
/**
 * ApplicationsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ApplicationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation creditApplicationsPost
     *
     * Create application
     *
     * @param  \OpenAPI\Client\Model\CreateApplicationsRequest $create_applications_request create_applications_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApplicationsResponse
     */
    public function creditApplicationsPost($create_applications_request = null)
    {
        list($response) = $this->creditApplicationsPostWithHttpInfo($create_applications_request);
        return $response;
    }

    /**
     * Operation creditApplicationsPostWithHttpInfo
     *
     * Create application
     *
     * @param  \OpenAPI\Client\Model\CreateApplicationsRequest $create_applications_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApplicationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditApplicationsPostWithHttpInfo($create_applications_request = null)
    {
        $request = $this->creditApplicationsPostRequest($create_applications_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ApplicationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApplicationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApplicationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApplicationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditApplicationsPostAsync
     *
     * Create application
     *
     * @param  \OpenAPI\Client\Model\CreateApplicationsRequest $create_applications_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditApplicationsPostAsync($create_applications_request = null)
    {
        return $this->creditApplicationsPostAsyncWithHttpInfo($create_applications_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditApplicationsPostAsyncWithHttpInfo
     *
     * Create application
     *
     * @param  \OpenAPI\Client\Model\CreateApplicationsRequest $create_applications_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditApplicationsPostAsyncWithHttpInfo($create_applications_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApplicationsResponse';
        $request = $this->creditApplicationsPostRequest($create_applications_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditApplicationsPost'
     *
     * @param  \OpenAPI\Client\Model\CreateApplicationsRequest $create_applications_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function creditApplicationsPostRequest($create_applications_request = null)
    {

        $resourcePath = '/credit/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_applications_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_applications_request));
            } else {
                $httpBody = $create_applications_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFileByType
     *
     * Retrieve file on a bundle or application
     *
     * @param  \OpenAPI\Client\Model\FileType $type The type of file to retrieve.  * &#x60;SOCT&#x60; - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user&#39;s credit account if their application is approved. * &#x60;BENEFITS_DISCLOSURE&#x60; - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user&#39;s credit account. * &#x60;CARD_MEMBER_AGREEMENT&#x60; - The Card Member Agreement, which specifies the terms and conditions of the user&#39;s credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * &#x60;PRIVACY_POLICY&#x60; - The Privacy Policy, which explains how the information on the user&#39;s application is collected, handled, and processed. * &#x60;E_DISCLOSURE&#x60; - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * &#x60;TERMS_SCHEDULE&#x60; - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user&#39;s credit account. * &#x60;NOAA&#x60; - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account. (required)
     * @param  string $bundle_token Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FileResponse
     */
    public function getFileByType($type, $bundle_token = null, $application_token = null)
    {
        list($response) = $this->getFileByTypeWithHttpInfo($type, $bundle_token, $application_token);
        return $response;
    }

    /**
     * Operation getFileByTypeWithHttpInfo
     *
     * Retrieve file on a bundle or application
     *
     * @param  \OpenAPI\Client\Model\FileType $type The type of file to retrieve.  * &#x60;SOCT&#x60; - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user&#39;s credit account if their application is approved. * &#x60;BENEFITS_DISCLOSURE&#x60; - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user&#39;s credit account. * &#x60;CARD_MEMBER_AGREEMENT&#x60; - The Card Member Agreement, which specifies the terms and conditions of the user&#39;s credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * &#x60;PRIVACY_POLICY&#x60; - The Privacy Policy, which explains how the information on the user&#39;s application is collected, handled, and processed. * &#x60;E_DISCLOSURE&#x60; - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * &#x60;TERMS_SCHEDULE&#x60; - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user&#39;s credit account. * &#x60;NOAA&#x60; - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account. (required)
     * @param  string $bundle_token Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileByTypeWithHttpInfo($type, $bundle_token = null, $application_token = null)
    {
        $request = $this->getFileByTypeRequest($type, $bundle_token, $application_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FileResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FileResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFileByTypeAsync
     *
     * Retrieve file on a bundle or application
     *
     * @param  \OpenAPI\Client\Model\FileType $type The type of file to retrieve.  * &#x60;SOCT&#x60; - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user&#39;s credit account if their application is approved. * &#x60;BENEFITS_DISCLOSURE&#x60; - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user&#39;s credit account. * &#x60;CARD_MEMBER_AGREEMENT&#x60; - The Card Member Agreement, which specifies the terms and conditions of the user&#39;s credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * &#x60;PRIVACY_POLICY&#x60; - The Privacy Policy, which explains how the information on the user&#39;s application is collected, handled, and processed. * &#x60;E_DISCLOSURE&#x60; - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * &#x60;TERMS_SCHEDULE&#x60; - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user&#39;s credit account. * &#x60;NOAA&#x60; - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account. (required)
     * @param  string $bundle_token Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileByTypeAsync($type, $bundle_token = null, $application_token = null)
    {
        return $this->getFileByTypeAsyncWithHttpInfo($type, $bundle_token, $application_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileByTypeAsyncWithHttpInfo
     *
     * Retrieve file on a bundle or application
     *
     * @param  \OpenAPI\Client\Model\FileType $type The type of file to retrieve.  * &#x60;SOCT&#x60; - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user&#39;s credit account if their application is approved. * &#x60;BENEFITS_DISCLOSURE&#x60; - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user&#39;s credit account. * &#x60;CARD_MEMBER_AGREEMENT&#x60; - The Card Member Agreement, which specifies the terms and conditions of the user&#39;s credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * &#x60;PRIVACY_POLICY&#x60; - The Privacy Policy, which explains how the information on the user&#39;s application is collected, handled, and processed. * &#x60;E_DISCLOSURE&#x60; - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * &#x60;TERMS_SCHEDULE&#x60; - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user&#39;s credit account. * &#x60;NOAA&#x60; - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account. (required)
     * @param  string $bundle_token Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileByTypeAsyncWithHttpInfo($type, $bundle_token = null, $application_token = null)
    {
        $returnType = '\OpenAPI\Client\Model\FileResponse';
        $request = $this->getFileByTypeRequest($type, $bundle_token, $application_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFileByType'
     *
     * @param  \OpenAPI\Client\Model\FileType $type The type of file to retrieve.  * &#x60;SOCT&#x60; - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user&#39;s credit account if their application is approved. * &#x60;BENEFITS_DISCLOSURE&#x60; - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user&#39;s credit account. * &#x60;CARD_MEMBER_AGREEMENT&#x60; - The Card Member Agreement, which specifies the terms and conditions of the user&#39;s credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * &#x60;PRIVACY_POLICY&#x60; - The Privacy Policy, which explains how the information on the user&#39;s application is collected, handled, and processed. * &#x60;E_DISCLOSURE&#x60; - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * &#x60;TERMS_SCHEDULE&#x60; - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user&#39;s credit account. * &#x60;NOAA&#x60; - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account. (required)
     * @param  string $bundle_token Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFileByTypeRequest($type, $bundle_token = null, $application_token = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getFileByType'
            );
        }

        $resourcePath = '/credit/applications/files/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bundle_token !== null) {
            if('form' === 'form' && is_array($bundle_token)) {
                foreach($bundle_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bundle_token'] = $bundle_token;
            }
        }
        // query params
        if ($application_token !== null) {
            if('form' === 'form' && is_array($application_token)) {
                foreach($application_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['application_token'] = $application_token;
            }
        }


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageApplicationTransitions
     *
     * List application transitions
     *
     * @param  string $token The unique identifier of the application for which you want to retrieve transitions. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApplicationsTransitionPage
     */
    public function pageApplicationTransitions($token)
    {
        list($response) = $this->pageApplicationTransitionsWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation pageApplicationTransitionsWithHttpInfo
     *
     * List application transitions
     *
     * @param  string $token The unique identifier of the application for which you want to retrieve transitions. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApplicationsTransitionPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageApplicationTransitionsWithHttpInfo($token)
    {
        $request = $this->pageApplicationTransitionsRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ApplicationsTransitionPage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApplicationsTransitionPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApplicationsTransitionPage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApplicationsTransitionPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageApplicationTransitionsAsync
     *
     * List application transitions
     *
     * @param  string $token The unique identifier of the application for which you want to retrieve transitions. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageApplicationTransitionsAsync($token)
    {
        return $this->pageApplicationTransitionsAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageApplicationTransitionsAsyncWithHttpInfo
     *
     * List application transitions
     *
     * @param  string $token The unique identifier of the application for which you want to retrieve transitions. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageApplicationTransitionsAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\ApplicationsTransitionPage';
        $request = $this->pageApplicationTransitionsRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageApplicationTransitions'
     *
     * @param  string $token The unique identifier of the application for which you want to retrieve transitions. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pageApplicationTransitionsRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling pageApplicationTransitions'
            );
        }

        $resourcePath = '/credit/applications/{token}/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveApplication
     *
     * Retrieve application
     *
     * @param  string $token Unique identifier of the application to retrieve. (required)
     * @param  \OpenAPI\Client\Model\ExpandObjects[] $expand Embeds the specified object into the response. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApplicationsResponse
     */
    public function retrieveApplication($token, $expand = null)
    {
        list($response) = $this->retrieveApplicationWithHttpInfo($token, $expand);
        return $response;
    }

    /**
     * Operation retrieveApplicationWithHttpInfo
     *
     * Retrieve application
     *
     * @param  string $token Unique identifier of the application to retrieve. (required)
     * @param  \OpenAPI\Client\Model\ExpandObjects[] $expand Embeds the specified object into the response. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApplicationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveApplicationWithHttpInfo($token, $expand = null)
    {
        $request = $this->retrieveApplicationRequest($token, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ApplicationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApplicationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApplicationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApplicationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveApplicationAsync
     *
     * Retrieve application
     *
     * @param  string $token Unique identifier of the application to retrieve. (required)
     * @param  \OpenAPI\Client\Model\ExpandObjects[] $expand Embeds the specified object into the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveApplicationAsync($token, $expand = null)
    {
        return $this->retrieveApplicationAsyncWithHttpInfo($token, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveApplicationAsyncWithHttpInfo
     *
     * Retrieve application
     *
     * @param  string $token Unique identifier of the application to retrieve. (required)
     * @param  \OpenAPI\Client\Model\ExpandObjects[] $expand Embeds the specified object into the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveApplicationAsyncWithHttpInfo($token, $expand = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApplicationsResponse';
        $request = $this->retrieveApplicationRequest($token, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveApplication'
     *
     * @param  string $token Unique identifier of the application to retrieve. (required)
     * @param  \OpenAPI\Client\Model\ExpandObjects[] $expand Embeds the specified object into the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveApplicationRequest($token, $expand = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling retrieveApplication'
            );
        }

        $resourcePath = '/credit/applications/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            if('form' === 'form' && is_array($expand)) {
                foreach($expand as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expand'] = $expand;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveFiles
     *
     * List files on a bundle or application
     *
     * @param  string $bundle_token Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\FileResponse>
     */
    public function retrieveFiles($bundle_token = null, $application_token = null)
    {
        list($response) = $this->retrieveFilesWithHttpInfo($bundle_token, $application_token);
        return $response;
    }

    /**
     * Operation retrieveFilesWithHttpInfo
     *
     * List files on a bundle or application
     *
     * @param  string $bundle_token Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\FileResponse>, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveFilesWithHttpInfo($bundle_token = null, $application_token = null)
    {
        $request = $this->retrieveFilesRequest($bundle_token, $application_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\FileResponse>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\FileResponse>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\FileResponse>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\FileResponse>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveFilesAsync
     *
     * List files on a bundle or application
     *
     * @param  string $bundle_token Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveFilesAsync($bundle_token = null, $application_token = null)
    {
        return $this->retrieveFilesAsyncWithHttpInfo($bundle_token, $application_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveFilesAsyncWithHttpInfo
     *
     * List files on a bundle or application
     *
     * @param  string $bundle_token Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveFilesAsyncWithHttpInfo($bundle_token = null, $application_token = null)
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\FileResponse>';
        $request = $this->retrieveFilesRequest($bundle_token, $application_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveFiles'
     *
     * @param  string $bundle_token Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; (optional)
     * @param  string $application_token Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveFilesRequest($bundle_token = null, $application_token = null)
    {

        $resourcePath = '/credit/applications/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bundle_token !== null) {
            if('form' === 'form' && is_array($bundle_token)) {
                foreach($bundle_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bundle_token'] = $bundle_token;
            }
        }
        // query params
        if ($application_token !== null) {
            if('form' === 'form' && is_array($application_token)) {
                foreach($application_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['application_token'] = $application_token;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transitionApplication
     *
     * Transition application state
     *
     * @param  string $token Unique identifier of the application whose state you want to transition. (required)
     * @param  \OpenAPI\Client\Model\ApplicationTransitionRequest $application_transition_request application_transition_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApplicationTransitionResponse
     */
    public function transitionApplication($token, $application_transition_request)
    {
        list($response) = $this->transitionApplicationWithHttpInfo($token, $application_transition_request);
        return $response;
    }

    /**
     * Operation transitionApplicationWithHttpInfo
     *
     * Transition application state
     *
     * @param  string $token Unique identifier of the application whose state you want to transition. (required)
     * @param  \OpenAPI\Client\Model\ApplicationTransitionRequest $application_transition_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApplicationTransitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transitionApplicationWithHttpInfo($token, $application_transition_request)
    {
        $request = $this->transitionApplicationRequest($token, $application_transition_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ApplicationTransitionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApplicationTransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApplicationTransitionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApplicationTransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transitionApplicationAsync
     *
     * Transition application state
     *
     * @param  string $token Unique identifier of the application whose state you want to transition. (required)
     * @param  \OpenAPI\Client\Model\ApplicationTransitionRequest $application_transition_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transitionApplicationAsync($token, $application_transition_request)
    {
        return $this->transitionApplicationAsyncWithHttpInfo($token, $application_transition_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transitionApplicationAsyncWithHttpInfo
     *
     * Transition application state
     *
     * @param  string $token Unique identifier of the application whose state you want to transition. (required)
     * @param  \OpenAPI\Client\Model\ApplicationTransitionRequest $application_transition_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transitionApplicationAsyncWithHttpInfo($token, $application_transition_request)
    {
        $returnType = '\OpenAPI\Client\Model\ApplicationTransitionResponse';
        $request = $this->transitionApplicationRequest($token, $application_transition_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transitionApplication'
     *
     * @param  string $token Unique identifier of the application whose state you want to transition. (required)
     * @param  \OpenAPI\Client\Model\ApplicationTransitionRequest $application_transition_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transitionApplicationRequest($token, $application_transition_request)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling transitionApplication'
            );
        }
        // verify the required parameter 'application_transition_request' is set
        if ($application_transition_request === null || (is_array($application_transition_request) && count($application_transition_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_transition_request when calling transitionApplication'
            );
        }

        $resourcePath = '/credit/applications/{token}/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($application_transition_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($application_transition_request));
            } else {
                $httpBody = $application_transition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
