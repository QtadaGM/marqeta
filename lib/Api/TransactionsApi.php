<?php
/**
 * TransactionsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTransactions
     *
     * List transactions
     *
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $user_token The unique identifier of the user account holder. (optional)
     * @param  string $business_token The unique identifier of the business account holder. (optional)
     * @param  string $acting_user_token The unique identifier of the acting user. (optional)
     * @param  string $card_token The unique identifier of the card. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'PENDING,COMPLETION')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     * @param  int $start_identifier Start identifier (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionModelListResponse
     */
    public function getTransactions($count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $user_token = null, $business_token = null, $acting_user_token = null, $card_token = null, $state = 'PENDING,COMPLETION', $version = null, $verbose = null, $start_identifier = null)
    {
        list($response) = $this->getTransactionsWithHttpInfo($count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $user_token, $business_token, $acting_user_token, $card_token, $state, $version, $verbose, $start_identifier);
        return $response;
    }

    /**
     * Operation getTransactionsWithHttpInfo
     *
     * List transactions
     *
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $user_token The unique identifier of the user account holder. (optional)
     * @param  string $business_token The unique identifier of the business account holder. (optional)
     * @param  string $acting_user_token The unique identifier of the acting user. (optional)
     * @param  string $card_token The unique identifier of the card. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'PENDING,COMPLETION')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     * @param  int $start_identifier Start identifier (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionModelListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWithHttpInfo($count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $user_token = null, $business_token = null, $acting_user_token = null, $card_token = null, $state = 'PENDING,COMPLETION', $version = null, $verbose = null, $start_identifier = null)
    {
        $request = $this->getTransactionsRequest($count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $user_token, $business_token, $acting_user_token, $card_token, $state, $version, $verbose, $start_identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionModelListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionModelListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionModelListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsAsync
     *
     * List transactions
     *
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $user_token The unique identifier of the user account holder. (optional)
     * @param  string $business_token The unique identifier of the business account holder. (optional)
     * @param  string $acting_user_token The unique identifier of the acting user. (optional)
     * @param  string $card_token The unique identifier of the card. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'PENDING,COMPLETION')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     * @param  int $start_identifier Start identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsync($count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $user_token = null, $business_token = null, $acting_user_token = null, $card_token = null, $state = 'PENDING,COMPLETION', $version = null, $verbose = null, $start_identifier = null)
    {
        return $this->getTransactionsAsyncWithHttpInfo($count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $user_token, $business_token, $acting_user_token, $card_token, $state, $version, $verbose, $start_identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsAsyncWithHttpInfo
     *
     * List transactions
     *
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $user_token The unique identifier of the user account holder. (optional)
     * @param  string $business_token The unique identifier of the business account holder. (optional)
     * @param  string $acting_user_token The unique identifier of the acting user. (optional)
     * @param  string $card_token The unique identifier of the card. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'PENDING,COMPLETION')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     * @param  int $start_identifier Start identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsyncWithHttpInfo($count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $user_token = null, $business_token = null, $acting_user_token = null, $card_token = null, $state = 'PENDING,COMPLETION', $version = null, $verbose = null, $start_identifier = null)
    {
        $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
        $request = $this->getTransactionsRequest($count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $user_token, $business_token, $acting_user_token, $card_token, $state, $version, $verbose, $start_identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactions'
     *
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $user_token The unique identifier of the user account holder. (optional)
     * @param  string $business_token The unique identifier of the business account holder. (optional)
     * @param  string $acting_user_token The unique identifier of the acting user. (optional)
     * @param  string $card_token The unique identifier of the card. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'PENDING,COMPLETION')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     * @param  int $start_identifier Start identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsRequest($count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $user_token = null, $business_token = null, $acting_user_token = null, $card_token = null, $state = 'PENDING,COMPLETION', $version = null, $verbose = null, $start_identifier = null)
    {

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_date'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_date'] = $end_date;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($business_token !== null) {
            if('form' === 'form' && is_array($business_token)) {
                foreach($business_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['business_token'] = $business_token;
            }
        }
        // query params
        if ($acting_user_token !== null) {
            if('form' === 'form' && is_array($acting_user_token)) {
                foreach($acting_user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['acting_user_token'] = $acting_user_token;
            }
        }
        // query params
        if ($card_token !== null) {
            if('form' === 'form' && is_array($card_token)) {
                foreach($card_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['card_token'] = $card_token;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($verbose !== null) {
            if('form' === 'form' && is_array($verbose)) {
                foreach($verbose as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['verbose'] = $verbose;
            }
        }
        // query params
        if ($start_identifier !== null) {
            if('form' === 'form' && is_array($start_identifier)) {
                foreach($start_identifier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_identifier'] = $start_identifier;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsFundingsourceFundingsourcetoken
     *
     * List transactions for a funding account
     *
     * @param  string $funding_source_token The unique identifier of the funding account. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $polarity Specifies whether to return credit or debit transactions. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionModelListResponse
     */
    public function getTransactionsFundingsourceFundingsourcetoken($funding_source_token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $polarity = null, $version = null, $verbose = null)
    {
        list($response) = $this->getTransactionsFundingsourceFundingsourcetokenWithHttpInfo($funding_source_token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $polarity, $version, $verbose);
        return $response;
    }

    /**
     * Operation getTransactionsFundingsourceFundingsourcetokenWithHttpInfo
     *
     * List transactions for a funding account
     *
     * @param  string $funding_source_token The unique identifier of the funding account. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $polarity Specifies whether to return credit or debit transactions. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionModelListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsFundingsourceFundingsourcetokenWithHttpInfo($funding_source_token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $polarity = null, $version = null, $verbose = null)
    {
        $request = $this->getTransactionsFundingsourceFundingsourcetokenRequest($funding_source_token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $polarity, $version, $verbose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionModelListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionModelListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionModelListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsFundingsourceFundingsourcetokenAsync
     *
     * List transactions for a funding account
     *
     * @param  string $funding_source_token The unique identifier of the funding account. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $polarity Specifies whether to return credit or debit transactions. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsFundingsourceFundingsourcetokenAsync($funding_source_token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $polarity = null, $version = null, $verbose = null)
    {
        return $this->getTransactionsFundingsourceFundingsourcetokenAsyncWithHttpInfo($funding_source_token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $polarity, $version, $verbose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsFundingsourceFundingsourcetokenAsyncWithHttpInfo
     *
     * List transactions for a funding account
     *
     * @param  string $funding_source_token The unique identifier of the funding account. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $polarity Specifies whether to return credit or debit transactions. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsFundingsourceFundingsourcetokenAsyncWithHttpInfo($funding_source_token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $polarity = null, $version = null, $verbose = null)
    {
        $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
        $request = $this->getTransactionsFundingsourceFundingsourcetokenRequest($funding_source_token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $polarity, $version, $verbose);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsFundingsourceFundingsourcetoken'
     *
     * @param  string $funding_source_token The unique identifier of the funding account. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $polarity Specifies whether to return credit or debit transactions. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsFundingsourceFundingsourcetokenRequest($funding_source_token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $polarity = null, $version = null, $verbose = null)
    {
        // verify the required parameter 'funding_source_token' is set
        if ($funding_source_token === null || (is_array($funding_source_token) && count($funding_source_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $funding_source_token when calling getTransactionsFundingsourceFundingsourcetoken'
            );
        }

        $resourcePath = '/transactions/fundingsource/{funding_source_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_date'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_date'] = $end_date;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($polarity !== null) {
            if('form' === 'form' && is_array($polarity)) {
                foreach($polarity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['polarity'] = $polarity;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($verbose !== null) {
            if('form' === 'form' && is_array($verbose)) {
                foreach($verbose as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['verbose'] = $verbose;
            }
        }


        // path params
        if ($funding_source_token !== null) {
            $resourcePath = str_replace(
                '{' . 'funding_source_token' . '}',
                ObjectSerializer::toPathValue($funding_source_token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsToken
     *
     * Retrieve transaction
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionModel
     */
    public function getTransactionsToken($token, $fields = null, $version = null, $verbose = null)
    {
        list($response) = $this->getTransactionsTokenWithHttpInfo($token, $fields, $version, $verbose);
        return $response;
    }

    /**
     * Operation getTransactionsTokenWithHttpInfo
     *
     * Retrieve transaction
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsTokenWithHttpInfo($token, $fields = null, $version = null, $verbose = null)
    {
        $request = $this->getTransactionsTokenRequest($token, $fields, $version, $verbose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsTokenAsync
     *
     * Retrieve transaction
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsTokenAsync($token, $fields = null, $version = null, $verbose = null)
    {
        return $this->getTransactionsTokenAsyncWithHttpInfo($token, $fields, $version, $verbose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsTokenAsyncWithHttpInfo
     *
     * Retrieve transaction
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsTokenAsyncWithHttpInfo($token, $fields = null, $version = null, $verbose = null)
    {
        $returnType = '\OpenAPI\Client\Model\TransactionModel';
        $request = $this->getTransactionsTokenRequest($token, $fields, $version, $verbose);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsToken'
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsTokenRequest($token, $fields = null, $version = null, $verbose = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getTransactionsToken'
            );
        }

        $resourcePath = '/transactions/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($verbose !== null) {
            if('form' === 'form' && is_array($verbose)) {
                foreach($verbose as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['verbose'] = $verbose;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsTokenRelated
     *
     * List related transactions
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'ALL')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionModelListResponse
     */
    public function getTransactionsTokenRelated($token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $state = 'ALL', $version = null, $verbose = null)
    {
        list($response) = $this->getTransactionsTokenRelatedWithHttpInfo($token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $state, $version, $verbose);
        return $response;
    }

    /**
     * Operation getTransactionsTokenRelatedWithHttpInfo
     *
     * List related transactions
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'ALL')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionModelListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsTokenRelatedWithHttpInfo($token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $state = 'ALL', $version = null, $verbose = null)
    {
        $request = $this->getTransactionsTokenRelatedRequest($token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $state, $version, $verbose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionModelListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionModelListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionModelListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsTokenRelatedAsync
     *
     * List related transactions
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'ALL')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsTokenRelatedAsync($token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $state = 'ALL', $version = null, $verbose = null)
    {
        return $this->getTransactionsTokenRelatedAsyncWithHttpInfo($token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $state, $version, $verbose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsTokenRelatedAsyncWithHttpInfo
     *
     * List related transactions
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'ALL')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsTokenRelatedAsyncWithHttpInfo($token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $state = 'ALL', $version = null, $verbose = null)
    {
        $returnType = '\OpenAPI\Client\Model\TransactionModelListResponse';
        $request = $this->getTransactionsTokenRelatedRequest($token, $count, $start_index, $fields, $sort_by, $start_date, $end_date, $type, $state, $version, $verbose);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsTokenRelated'
     *
     * @param  string $token The unique identifier of the transaction. (required)
     * @param  int $count The number of transactions to retrieve. (optional, default to 10)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-user_transaction_time')
     * @param  string $start_date The starting date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;start_date&#x60; and &#x60;end_date&#x60; fields. (optional)
     * @param  string $end_date The ending date (or date-time) of a date range from which to return transactions. To return transactions for a single day, enter the same date in both the &#x60;end_date&#x60; and &#x60;start_date&#x60; fields. (optional)
     * @param  string $type Comma-delimited list of transaction types to include. (optional)
     * @param  string $state Comma-delimited list of transaction states to display. (optional, default to 'ALL')
     * @param  string $version Specifies the API version for the request. (optional)
     * @param  bool $verbose If &#x60;true&#x60;, the query returns additional information for diagnostic purposes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsTokenRelatedRequest($token, $count = 10, $start_index = 0, $fields = null, $sort_by = '-user_transaction_time', $start_date = null, $end_date = null, $type = null, $state = 'ALL', $version = null, $verbose = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getTransactionsTokenRelated'
            );
        }

        $resourcePath = '/transactions/{token}/related';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_date'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_date'] = $end_date;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($verbose !== null) {
            if('form' === 'form' && is_array($verbose)) {
                foreach($verbose as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['verbose'] = $verbose;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
