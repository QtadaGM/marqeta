<?php
/**
 * AuthorizationControlsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AuthorizationControlsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthorizationControlsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAuthcontrols
     *
     * List authorization controls
     *
     * @param  string $card_product Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlListResponse
     */
    public function getAuthcontrols($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        list($response) = $this->getAuthcontrolsWithHttpInfo($card_product, $user, $count, $start_index, $fields, $sort_by);
        return $response;
    }

    /**
     * Operation getAuthcontrolsWithHttpInfo
     *
     * List authorization controls
     *
     * @param  string $card_product Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthcontrolsWithHttpInfo($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        $request = $this->getAuthcontrolsRequest($card_product, $user, $count, $start_index, $fields, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthControlListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthcontrolsAsync
     *
     * List authorization controls
     *
     * @param  string $card_product Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsAsync($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        return $this->getAuthcontrolsAsyncWithHttpInfo($card_product, $user, $count, $start_index, $fields, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthcontrolsAsyncWithHttpInfo
     *
     * List authorization controls
     *
     * @param  string $card_product Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsAsyncWithHttpInfo($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlListResponse';
        $request = $this->getAuthcontrolsRequest($card_product, $user, $count, $start_index, $fields, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthcontrols'
     *
     * @param  string $card_product Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthcontrolsRequest($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {

        $resourcePath = '/authcontrols';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($card_product !== null) {
            if('form' === 'form' && is_array($card_product)) {
                foreach($card_product as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['card_product'] = $card_product;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthcontrolsExemptmids
     *
     * List merchant identifier (MID) exemptions
     *
     * @param  string $card_product Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlExemptMidsListResponse
     */
    public function getAuthcontrolsExemptmids($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        list($response) = $this->getAuthcontrolsExemptmidsWithHttpInfo($card_product, $user, $count, $start_index, $fields, $sort_by);
        return $response;
    }

    /**
     * Operation getAuthcontrolsExemptmidsWithHttpInfo
     *
     * List merchant identifier (MID) exemptions
     *
     * @param  string $card_product Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlExemptMidsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthcontrolsExemptmidsWithHttpInfo($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        $request = $this->getAuthcontrolsExemptmidsRequest($card_product, $user, $count, $start_index, $fields, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthControlExemptMidsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlExemptMidsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlExemptMidsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthcontrolsExemptmidsAsync
     *
     * List merchant identifier (MID) exemptions
     *
     * @param  string $card_product Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsExemptmidsAsync($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        return $this->getAuthcontrolsExemptmidsAsyncWithHttpInfo($card_product, $user, $count, $start_index, $fields, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthcontrolsExemptmidsAsyncWithHttpInfo
     *
     * List merchant identifier (MID) exemptions
     *
     * @param  string $card_product Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsExemptmidsAsyncWithHttpInfo($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsListResponse';
        $request = $this->getAuthcontrolsExemptmidsRequest($card_product, $user, $count, $start_index, $fields, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthcontrolsExemptmids'
     *
     * @param  string $card_product Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product. (optional)
     * @param  string $user Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user. (optional)
     * @param  int $count The number of resources to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthcontrolsExemptmidsRequest($card_product = null, $user = null, $count = 5, $start_index = 0, $fields = null, $sort_by = '-lastModifiedTime')
    {

        $resourcePath = '/authcontrols/exemptmids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($card_product !== null) {
            if('form' === 'form' && is_array($card_product)) {
                foreach($card_product as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['card_product'] = $card_product;
            }
        }
        // query params
        if ($user !== null) {
            if('form' === 'form' && is_array($user)) {
                foreach($user as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user'] = $user;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthcontrolsExemptmidsToken
     *
     * Retrieve a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlExemptMidsResponse
     */
    public function getAuthcontrolsExemptmidsToken($token)
    {
        list($response) = $this->getAuthcontrolsExemptmidsTokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getAuthcontrolsExemptmidsTokenWithHttpInfo
     *
     * Retrieve a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlExemptMidsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthcontrolsExemptmidsTokenWithHttpInfo($token)
    {
        $request = $this->getAuthcontrolsExemptmidsTokenRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthControlExemptMidsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlExemptMidsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlExemptMidsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthcontrolsExemptmidsTokenAsync
     *
     * Retrieve a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsExemptmidsTokenAsync($token)
    {
        return $this->getAuthcontrolsExemptmidsTokenAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthcontrolsExemptmidsTokenAsyncWithHttpInfo
     *
     * Retrieve a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsExemptmidsTokenAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsResponse';
        $request = $this->getAuthcontrolsExemptmidsTokenRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthcontrolsExemptmidsToken'
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthcontrolsExemptmidsTokenRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAuthcontrolsExemptmidsToken'
            );
        }

        $resourcePath = '/authcontrols/exemptmids/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuthcontrolsToken
     *
     * Retrieve authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlResponse
     */
    public function getAuthcontrolsToken($token, $fields = null)
    {
        list($response) = $this->getAuthcontrolsTokenWithHttpInfo($token, $fields);
        return $response;
    }

    /**
     * Operation getAuthcontrolsTokenWithHttpInfo
     *
     * Retrieve authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthcontrolsTokenWithHttpInfo($token, $fields = null)
    {
        $request = $this->getAuthcontrolsTokenRequest($token, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthControlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuthcontrolsTokenAsync
     *
     * Retrieve authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsTokenAsync($token, $fields = null)
    {
        return $this->getAuthcontrolsTokenAsyncWithHttpInfo($token, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthcontrolsTokenAsyncWithHttpInfo
     *
     * Retrieve authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthcontrolsTokenAsyncWithHttpInfo($token, $fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
        $request = $this->getAuthcontrolsTokenRequest($token, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuthcontrolsToken'
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuthcontrolsTokenRequest($token, $fields = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAuthcontrolsToken'
            );
        }

        $resourcePath = '/authcontrols/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAuthcontrols
     *
     * Create authorization control
     *
     * @param  \OpenAPI\Client\Model\AuthControlRequest $auth_control_request Auth control object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlResponse
     */
    public function postAuthcontrols($auth_control_request)
    {
        list($response) = $this->postAuthcontrolsWithHttpInfo($auth_control_request);
        return $response;
    }

    /**
     * Operation postAuthcontrolsWithHttpInfo
     *
     * Create authorization control
     *
     * @param  \OpenAPI\Client\Model\AuthControlRequest $auth_control_request Auth control object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAuthcontrolsWithHttpInfo($auth_control_request)
    {
        $request = $this->postAuthcontrolsRequest($auth_control_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AuthControlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAuthcontrolsAsync
     *
     * Create authorization control
     *
     * @param  \OpenAPI\Client\Model\AuthControlRequest $auth_control_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthcontrolsAsync($auth_control_request)
    {
        return $this->postAuthcontrolsAsyncWithHttpInfo($auth_control_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAuthcontrolsAsyncWithHttpInfo
     *
     * Create authorization control
     *
     * @param  \OpenAPI\Client\Model\AuthControlRequest $auth_control_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthcontrolsAsyncWithHttpInfo($auth_control_request)
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
        $request = $this->postAuthcontrolsRequest($auth_control_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAuthcontrols'
     *
     * @param  \OpenAPI\Client\Model\AuthControlRequest $auth_control_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAuthcontrolsRequest($auth_control_request)
    {
        // verify the required parameter 'auth_control_request' is set
        if ($auth_control_request === null || (is_array($auth_control_request) && count($auth_control_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_control_request when calling postAuthcontrols'
            );
        }

        $resourcePath = '/authcontrols';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auth_control_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auth_control_request));
            } else {
                $httpBody = $auth_control_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAuthcontrolsExemptmids
     *
     * Create a merchant identifier (MID) exemption
     *
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsRequest $auth_control_exempt_mids_request Auth control exempt MID object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlExemptMidsResponse
     */
    public function postAuthcontrolsExemptmids($auth_control_exempt_mids_request)
    {
        list($response) = $this->postAuthcontrolsExemptmidsWithHttpInfo($auth_control_exempt_mids_request);
        return $response;
    }

    /**
     * Operation postAuthcontrolsExemptmidsWithHttpInfo
     *
     * Create a merchant identifier (MID) exemption
     *
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsRequest $auth_control_exempt_mids_request Auth control exempt MID object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlExemptMidsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAuthcontrolsExemptmidsWithHttpInfo($auth_control_exempt_mids_request)
    {
        $request = $this->postAuthcontrolsExemptmidsRequest($auth_control_exempt_mids_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AuthControlExemptMidsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlExemptMidsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlExemptMidsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAuthcontrolsExemptmidsAsync
     *
     * Create a merchant identifier (MID) exemption
     *
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsRequest $auth_control_exempt_mids_request Auth control exempt MID object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthcontrolsExemptmidsAsync($auth_control_exempt_mids_request)
    {
        return $this->postAuthcontrolsExemptmidsAsyncWithHttpInfo($auth_control_exempt_mids_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAuthcontrolsExemptmidsAsyncWithHttpInfo
     *
     * Create a merchant identifier (MID) exemption
     *
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsRequest $auth_control_exempt_mids_request Auth control exempt MID object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAuthcontrolsExemptmidsAsyncWithHttpInfo($auth_control_exempt_mids_request)
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlExemptMidsResponse';
        $request = $this->postAuthcontrolsExemptmidsRequest($auth_control_exempt_mids_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAuthcontrolsExemptmids'
     *
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsRequest $auth_control_exempt_mids_request Auth control exempt MID object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAuthcontrolsExemptmidsRequest($auth_control_exempt_mids_request)
    {
        // verify the required parameter 'auth_control_exempt_mids_request' is set
        if ($auth_control_exempt_mids_request === null || (is_array($auth_control_exempt_mids_request) && count($auth_control_exempt_mids_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_control_exempt_mids_request when calling postAuthcontrolsExemptmids'
            );
        }

        $resourcePath = '/authcontrols/exemptmids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auth_control_exempt_mids_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auth_control_exempt_mids_request));
            } else {
                $httpBody = $auth_control_exempt_mids_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAuthcontrolsExemptmidsToken
     *
     * Update a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsUpdateRequest $auth_control_exempt_mids_update_request auth_control_exempt_mids_update_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putAuthcontrolsExemptmidsToken($token, $auth_control_exempt_mids_update_request = null)
    {
        $this->putAuthcontrolsExemptmidsTokenWithHttpInfo($token, $auth_control_exempt_mids_update_request);
    }

    /**
     * Operation putAuthcontrolsExemptmidsTokenWithHttpInfo
     *
     * Update a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsUpdateRequest $auth_control_exempt_mids_update_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAuthcontrolsExemptmidsTokenWithHttpInfo($token, $auth_control_exempt_mids_update_request = null)
    {
        $request = $this->putAuthcontrolsExemptmidsTokenRequest($token, $auth_control_exempt_mids_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putAuthcontrolsExemptmidsTokenAsync
     *
     * Update a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsUpdateRequest $auth_control_exempt_mids_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAuthcontrolsExemptmidsTokenAsync($token, $auth_control_exempt_mids_update_request = null)
    {
        return $this->putAuthcontrolsExemptmidsTokenAsyncWithHttpInfo($token, $auth_control_exempt_mids_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAuthcontrolsExemptmidsTokenAsyncWithHttpInfo
     *
     * Update a merchant identifier (MID) exemption
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsUpdateRequest $auth_control_exempt_mids_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAuthcontrolsExemptmidsTokenAsyncWithHttpInfo($token, $auth_control_exempt_mids_update_request = null)
    {
        $returnType = '';
        $request = $this->putAuthcontrolsExemptmidsTokenRequest($token, $auth_control_exempt_mids_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAuthcontrolsExemptmidsToken'
     *
     * @param  string $token Unique identifier of the authorization control resource. (required)
     * @param  \OpenAPI\Client\Model\AuthControlExemptMidsUpdateRequest $auth_control_exempt_mids_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAuthcontrolsExemptmidsTokenRequest($token, $auth_control_exempt_mids_update_request = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling putAuthcontrolsExemptmidsToken'
            );
        }

        $resourcePath = '/authcontrols/exemptmids/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auth_control_exempt_mids_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auth_control_exempt_mids_update_request));
            } else {
                $httpBody = $auth_control_exempt_mids_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAuthcontrolsToken
     *
     * Update authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  \OpenAPI\Client\Model\AuthControlUpdateRequest $auth_control_update_request Auth control object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AuthControlResponse
     */
    public function putAuthcontrolsToken($token, $auth_control_update_request)
    {
        list($response) = $this->putAuthcontrolsTokenWithHttpInfo($token, $auth_control_update_request);
        return $response;
    }

    /**
     * Operation putAuthcontrolsTokenWithHttpInfo
     *
     * Update authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  \OpenAPI\Client\Model\AuthControlUpdateRequest $auth_control_update_request Auth control object (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AuthControlResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAuthcontrolsTokenWithHttpInfo($token, $auth_control_update_request)
    {
        $request = $this->putAuthcontrolsTokenRequest($token, $auth_control_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AuthControlResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AuthControlResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AuthControlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAuthcontrolsTokenAsync
     *
     * Update authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  \OpenAPI\Client\Model\AuthControlUpdateRequest $auth_control_update_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAuthcontrolsTokenAsync($token, $auth_control_update_request)
    {
        return $this->putAuthcontrolsTokenAsyncWithHttpInfo($token, $auth_control_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAuthcontrolsTokenAsyncWithHttpInfo
     *
     * Update authorization control
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  \OpenAPI\Client\Model\AuthControlUpdateRequest $auth_control_update_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAuthcontrolsTokenAsyncWithHttpInfo($token, $auth_control_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\AuthControlResponse';
        $request = $this->putAuthcontrolsTokenRequest($token, $auth_control_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAuthcontrolsToken'
     *
     * @param  string $token Existing authorization control token.  Send a &#x60;GET&#x60; request to &#x60;/authcontrols&#x60; to retrieve authorization control tokens. (required)
     * @param  \OpenAPI\Client\Model\AuthControlUpdateRequest $auth_control_update_request Auth control object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAuthcontrolsTokenRequest($token, $auth_control_update_request)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling putAuthcontrolsToken'
            );
        }
        // verify the required parameter 'auth_control_update_request' is set
        if ($auth_control_update_request === null || (is_array($auth_control_update_request) && count($auth_control_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_control_update_request when calling putAuthcontrolsToken'
            );
        }

        $resourcePath = '/authcontrols/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auth_control_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auth_control_update_request));
            } else {
                $httpBody = $auth_control_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
