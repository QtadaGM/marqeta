<?php
/**
 * DigitalWalletsManagementApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DigitalWalletsManagementApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DigitalWalletsManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation generateApplePayWPPJWT
     *
     * Create request for Apple Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\RequestForApplePayWppJWT $request_for_apple_pay_wpp_jwt request_for_apple_pay_wpp_jwt (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest
     */
    public function generateApplePayWPPJWT($req_sys_id, $request_for_apple_pay_wpp_jwt)
    {
        list($response) = $this->generateApplePayWPPJWTWithHttpInfo($req_sys_id, $request_for_apple_pay_wpp_jwt);
        return $response;
    }

    /**
     * Operation generateApplePayWPPJWTWithHttpInfo
     *
     * Create request for Apple Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\RequestForApplePayWppJWT $request_for_apple_pay_wpp_jwt (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest|\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateApplePayWPPJWTWithHttpInfo($req_sys_id, $request_for_apple_pay_wpp_jwt)
    {
        $request = $this->generateApplePayWPPJWTRequest($req_sys_id, $request_for_apple_pay_wpp_jwt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateApplePayWPPJWTAsync
     *
     * Create request for Apple Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\RequestForApplePayWppJWT $request_for_apple_pay_wpp_jwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateApplePayWPPJWTAsync($req_sys_id, $request_for_apple_pay_wpp_jwt)
    {
        return $this->generateApplePayWPPJWTAsyncWithHttpInfo($req_sys_id, $request_for_apple_pay_wpp_jwt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateApplePayWPPJWTAsyncWithHttpInfo
     *
     * Create request for Apple Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\RequestForApplePayWppJWT $request_for_apple_pay_wpp_jwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateApplePayWPPJWTAsyncWithHttpInfo($req_sys_id, $request_for_apple_pay_wpp_jwt)
    {
        $returnType = '\OpenAPI\Client\Model\WebPushProvisioningApplePayJWTResponse';
        $request = $this->generateApplePayWPPJWTRequest($req_sys_id, $request_for_apple_pay_wpp_jwt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateApplePayWPPJWT'
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\RequestForApplePayWppJWT $request_for_apple_pay_wpp_jwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateApplePayWPPJWTRequest($req_sys_id, $request_for_apple_pay_wpp_jwt)
    {
        // verify the required parameter 'req_sys_id' is set
        if ($req_sys_id === null || (is_array($req_sys_id) && count($req_sys_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $req_sys_id when calling generateApplePayWPPJWT'
            );
        }
        // verify the required parameter 'request_for_apple_pay_wpp_jwt' is set
        if ($request_for_apple_pay_wpp_jwt === null || (is_array($request_for_apple_pay_wpp_jwt) && count($request_for_apple_pay_wpp_jwt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_for_apple_pay_wpp_jwt when calling generateApplePayWPPJWT'
            );
        }

        $resourcePath = '/digitalwallets/wpp/applePayJWT';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($req_sys_id !== null) {
            $headerParams['req-sys-id'] = ObjectSerializer::toHeaderValue($req_sys_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($request_for_apple_pay_wpp_jwt)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_for_apple_pay_wpp_jwt));
            } else {
                $httpBody = $request_for_apple_pay_wpp_jwt;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokens
     *
     * List digital wallet tokens
     *
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 10)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $start_date Date when the digital wallet token becomes active. (optional)
     * @param  string $end_date Expiration date of the digital wallet token. (optional)
     * @param  string $pan_reference_id Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     * @param  string $token_reference_id Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     * @param  string $correlation_id Unique value representing a tokenization request (Mastercard only). (optional)
     * @param  string $token_type Comma-delimited list of digital wallet token types to display. (optional)
     * @param  string $token_requestor_name Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     * @param  string $state Comma-delimited list of digital wallet token states to display. (optional)
     * @param  string $embed An optional embedded user object. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletTokenListResponse
     */
    public function getDigitalwallettokens($count = 10, $start_index = 0, $fields = null, $sort_by = '-createdTime', $start_date = null, $end_date = null, $pan_reference_id = null, $token_reference_id = null, $correlation_id = null, $token_type = null, $token_requestor_name = null, $state = null, $embed = null)
    {
        list($response) = $this->getDigitalwallettokensWithHttpInfo($count, $start_index, $fields, $sort_by, $start_date, $end_date, $pan_reference_id, $token_reference_id, $correlation_id, $token_type, $token_requestor_name, $state, $embed);
        return $response;
    }

    /**
     * Operation getDigitalwallettokensWithHttpInfo
     *
     * List digital wallet tokens
     *
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 10)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $start_date Date when the digital wallet token becomes active. (optional)
     * @param  string $end_date Expiration date of the digital wallet token. (optional)
     * @param  string $pan_reference_id Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     * @param  string $token_reference_id Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     * @param  string $correlation_id Unique value representing a tokenization request (Mastercard only). (optional)
     * @param  string $token_type Comma-delimited list of digital wallet token types to display. (optional)
     * @param  string $token_requestor_name Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     * @param  string $state Comma-delimited list of digital wallet token states to display. (optional)
     * @param  string $embed An optional embedded user object. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletTokenListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokensWithHttpInfo($count = 10, $start_index = 0, $fields = null, $sort_by = '-createdTime', $start_date = null, $end_date = null, $pan_reference_id = null, $token_reference_id = null, $correlation_id = null, $token_type = null, $token_requestor_name = null, $state = null, $embed = null)
    {
        $request = $this->getDigitalwallettokensRequest($count, $start_index, $fields, $sort_by, $start_date, $end_date, $pan_reference_id, $token_reference_id, $correlation_id, $token_type, $token_requestor_name, $state, $embed);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletTokenListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletTokenListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletTokenListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokensAsync
     *
     * List digital wallet tokens
     *
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 10)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $start_date Date when the digital wallet token becomes active. (optional)
     * @param  string $end_date Expiration date of the digital wallet token. (optional)
     * @param  string $pan_reference_id Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     * @param  string $token_reference_id Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     * @param  string $correlation_id Unique value representing a tokenization request (Mastercard only). (optional)
     * @param  string $token_type Comma-delimited list of digital wallet token types to display. (optional)
     * @param  string $token_requestor_name Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     * @param  string $state Comma-delimited list of digital wallet token states to display. (optional)
     * @param  string $embed An optional embedded user object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensAsync($count = 10, $start_index = 0, $fields = null, $sort_by = '-createdTime', $start_date = null, $end_date = null, $pan_reference_id = null, $token_reference_id = null, $correlation_id = null, $token_type = null, $token_requestor_name = null, $state = null, $embed = null)
    {
        return $this->getDigitalwallettokensAsyncWithHttpInfo($count, $start_index, $fields, $sort_by, $start_date, $end_date, $pan_reference_id, $token_reference_id, $correlation_id, $token_type, $token_requestor_name, $state, $embed)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokensAsyncWithHttpInfo
     *
     * List digital wallet tokens
     *
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 10)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $start_date Date when the digital wallet token becomes active. (optional)
     * @param  string $end_date Expiration date of the digital wallet token. (optional)
     * @param  string $pan_reference_id Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     * @param  string $token_reference_id Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     * @param  string $correlation_id Unique value representing a tokenization request (Mastercard only). (optional)
     * @param  string $token_type Comma-delimited list of digital wallet token types to display. (optional)
     * @param  string $token_requestor_name Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     * @param  string $state Comma-delimited list of digital wallet token states to display. (optional)
     * @param  string $embed An optional embedded user object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensAsyncWithHttpInfo($count = 10, $start_index = 0, $fields = null, $sort_by = '-createdTime', $start_date = null, $end_date = null, $pan_reference_id = null, $token_reference_id = null, $correlation_id = null, $token_type = null, $token_requestor_name = null, $state = null, $embed = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenListResponse';
        $request = $this->getDigitalwallettokensRequest($count, $start_index, $fields, $sort_by, $start_date, $end_date, $pan_reference_id, $token_reference_id, $correlation_id, $token_type, $token_requestor_name, $state, $embed);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokens'
     *
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 10)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     * @param  string $start_date Date when the digital wallet token becomes active. (optional)
     * @param  string $end_date Expiration date of the digital wallet token. (optional)
     * @param  string $pan_reference_id Unique identifier of the digital wallet token primary account number (PAN) within the card network. This value may vary, depending on the digital wallet. For example, the &#x60;pan_reference_id&#x60; may be different in Apple Wallet and Google Wallet for the same digital wallet token. (optional)
     * @param  string $token_reference_id Unique identifier of the digital wallet token within the card network. The &#x60;token_reference_id&#x60; is unique at the card network level. (optional)
     * @param  string $correlation_id Unique value representing a tokenization request (Mastercard only). (optional)
     * @param  string $token_type Comma-delimited list of digital wallet token types to display. (optional)
     * @param  string $token_requestor_name Name of the token requestor within the card network.  *NOTE:* The list of example values for this field is maintained by the card networks and is subject to change. (optional)
     * @param  string $state Comma-delimited list of digital wallet token states to display. (optional)
     * @param  string $embed An optional embedded user object. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokensRequest($count = 10, $start_index = 0, $fields = null, $sort_by = '-createdTime', $start_date = null, $end_date = null, $pan_reference_id = null, $token_reference_id = null, $correlation_id = null, $token_type = null, $token_requestor_name = null, $state = null, $embed = null)
    {

        $resourcePath = '/digitalwallettokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_date'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_date'] = $end_date;
            }
        }
        // query params
        if ($pan_reference_id !== null) {
            if('form' === 'form' && is_array($pan_reference_id)) {
                foreach($pan_reference_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pan_reference_id'] = $pan_reference_id;
            }
        }
        // query params
        if ($token_reference_id !== null) {
            if('form' === 'form' && is_array($token_reference_id)) {
                foreach($token_reference_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token_reference_id'] = $token_reference_id;
            }
        }
        // query params
        if ($correlation_id !== null) {
            if('form' === 'form' && is_array($correlation_id)) {
                foreach($correlation_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['correlation_id'] = $correlation_id;
            }
        }
        // query params
        if ($token_type !== null) {
            if('form' === 'form' && is_array($token_type)) {
                foreach($token_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token_type'] = $token_type;
            }
        }
        // query params
        if ($token_requestor_name !== null) {
            if('form' === 'form' && is_array($token_requestor_name)) {
                foreach($token_requestor_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['token_requestor_name'] = $token_requestor_name;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($embed !== null) {
            if('form' === 'form' && is_array($embed)) {
                foreach($embed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['embed'] = $embed;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokensCardCardtoken
     *
     * List digital wallet tokens for card
     *
     * @param  string $card_token Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. (required)
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletTokenListResponse
     */
    public function getDigitalwallettokensCardCardtoken($card_token, $count = 5, $start_index = 0, $sort_by = '-createdTime')
    {
        list($response) = $this->getDigitalwallettokensCardCardtokenWithHttpInfo($card_token, $count, $start_index, $sort_by);
        return $response;
    }

    /**
     * Operation getDigitalwallettokensCardCardtokenWithHttpInfo
     *
     * List digital wallet tokens for card
     *
     * @param  string $card_token Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. (required)
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletTokenListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokensCardCardtokenWithHttpInfo($card_token, $count = 5, $start_index = 0, $sort_by = '-createdTime')
    {
        $request = $this->getDigitalwallettokensCardCardtokenRequest($card_token, $count, $start_index, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletTokenListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletTokenListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletTokenListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokensCardCardtokenAsync
     *
     * List digital wallet tokens for card
     *
     * @param  string $card_token Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. (required)
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensCardCardtokenAsync($card_token, $count = 5, $start_index = 0, $sort_by = '-createdTime')
    {
        return $this->getDigitalwallettokensCardCardtokenAsyncWithHttpInfo($card_token, $count, $start_index, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokensCardCardtokenAsyncWithHttpInfo
     *
     * List digital wallet tokens for card
     *
     * @param  string $card_token Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. (required)
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensCardCardtokenAsyncWithHttpInfo($card_token, $count = 5, $start_index = 0, $sort_by = '-createdTime')
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenListResponse';
        $request = $this->getDigitalwallettokensCardCardtokenRequest($card_token, $count, $start_index, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokensCardCardtoken'
     *
     * @param  string $card_token Unique identifier of the card. Used to minimize the need to exchange card details during subsequent calls, and also for troubleshooting. (required)
     * @param  int $count Number of digital wallet token resources to retrieve. (optional, default to 5)
     * @param  int $start_index Sort order index of the first digital wallet token resource in the returned array. (optional, default to 0)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-createdTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokensCardCardtokenRequest($card_token, $count = 5, $start_index = 0, $sort_by = '-createdTime')
    {
        // verify the required parameter 'card_token' is set
        if ($card_token === null || (is_array($card_token) && count($card_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_token when calling getDigitalwallettokensCardCardtoken'
            );
        }

        $resourcePath = '/digitalwallettokens/card/{card_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }


        // path params
        if ($card_token !== null) {
            $resourcePath = str_replace(
                '{' . 'card_token' . '}',
                ObjectSerializer::toPathValue($card_token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokensToken
     *
     * Retrieve digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletToken
     */
    public function getDigitalwallettokensToken($token)
    {
        list($response) = $this->getDigitalwallettokensTokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getDigitalwallettokensTokenWithHttpInfo
     *
     * Retrieve digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokensTokenWithHttpInfo($token)
    {
        $request = $this->getDigitalwallettokensTokenRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokensTokenAsync
     *
     * Retrieve digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensTokenAsync($token)
    {
        return $this->getDigitalwallettokensTokenAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokensTokenAsyncWithHttpInfo
     *
     * Retrieve digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensTokenAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletToken';
        $request = $this->getDigitalwallettokensTokenRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokensToken'
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokensTokenRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDigitalwallettokensToken'
            );
        }

        $resourcePath = '/digitalwallettokens/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokensTokenShowtokenpan
     *
     * Retrieve digital wallet token PAN
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletToken
     */
    public function getDigitalwallettokensTokenShowtokenpan($token)
    {
        list($response) = $this->getDigitalwallettokensTokenShowtokenpanWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getDigitalwallettokensTokenShowtokenpanWithHttpInfo
     *
     * Retrieve digital wallet token PAN
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokensTokenShowtokenpanWithHttpInfo($token)
    {
        $request = $this->getDigitalwallettokensTokenShowtokenpanRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletToken' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletToken';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokensTokenShowtokenpanAsync
     *
     * Retrieve digital wallet token PAN
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensTokenShowtokenpanAsync($token)
    {
        return $this->getDigitalwallettokensTokenShowtokenpanAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokensTokenShowtokenpanAsyncWithHttpInfo
     *
     * Retrieve digital wallet token PAN
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokensTokenShowtokenpanAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletToken';
        $request = $this->getDigitalwallettokensTokenShowtokenpanRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokensTokenShowtokenpan'
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokensTokenShowtokenpanRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDigitalwallettokensTokenShowtokenpan'
            );
        }

        $resourcePath = '/digitalwallettokens/{token}/showtokenpan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokentransitionsDigitalwallettokenToken
     *
     * List transitions for digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     * @param  int $count Number of digital wallet transitions to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse
     */
    public function getDigitalwallettokentransitionsDigitalwallettokenToken($token, $count = 5, $start_index = 0, $fields = null, $sort_by = '-id')
    {
        list($response) = $this->getDigitalwallettokentransitionsDigitalwallettokenTokenWithHttpInfo($token, $count, $start_index, $fields, $sort_by);
        return $response;
    }

    /**
     * Operation getDigitalwallettokentransitionsDigitalwallettokenTokenWithHttpInfo
     *
     * List transitions for digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     * @param  int $count Number of digital wallet transitions to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-id')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokentransitionsDigitalwallettokenTokenWithHttpInfo($token, $count = 5, $start_index = 0, $fields = null, $sort_by = '-id')
    {
        $request = $this->getDigitalwallettokentransitionsDigitalwallettokenTokenRequest($token, $count, $start_index, $fields, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokentransitionsDigitalwallettokenTokenAsync
     *
     * List transitions for digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     * @param  int $count Number of digital wallet transitions to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokentransitionsDigitalwallettokenTokenAsync($token, $count = 5, $start_index = 0, $fields = null, $sort_by = '-id')
    {
        return $this->getDigitalwallettokentransitionsDigitalwallettokenTokenAsyncWithHttpInfo($token, $count, $start_index, $fields, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokentransitionsDigitalwallettokenTokenAsyncWithHttpInfo
     *
     * List transitions for digital wallet token
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     * @param  int $count Number of digital wallet transitions to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokentransitionsDigitalwallettokenTokenAsyncWithHttpInfo($token, $count = 5, $start_index = 0, $fields = null, $sort_by = '-id')
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionListResponse';
        $request = $this->getDigitalwallettokentransitionsDigitalwallettokenTokenRequest($token, $count, $start_index, $fields, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokentransitionsDigitalwallettokenToken'
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT). (required)
     * @param  int $count Number of digital wallet transitions to retrieve. (optional, default to 5)
     * @param  int $start_index The sort order index of the first digital wallet token in the returned array. (optional, default to 0)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     * @param  string $sort_by Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order. (optional, default to '-id')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokentransitionsDigitalwallettokenTokenRequest($token, $count = 5, $start_index = 0, $fields = null, $sort_by = '-id')
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDigitalwallettokentransitionsDigitalwallettokenToken'
            );
        }

        $resourcePath = '/digitalwallettokentransitions/digitalwallettoken/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDigitalwallettokentransitionsToken
     *
     * Retrieve digital wallet token transition
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT) transition. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse
     */
    public function getDigitalwallettokentransitionsToken($token, $fields = null)
    {
        list($response) = $this->getDigitalwallettokentransitionsTokenWithHttpInfo($token, $fields);
        return $response;
    }

    /**
     * Operation getDigitalwallettokentransitionsTokenWithHttpInfo
     *
     * Retrieve digital wallet token transition
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT) transition. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDigitalwallettokentransitionsTokenWithHttpInfo($token, $fields = null)
    {
        $request = $this->getDigitalwallettokentransitionsTokenRequest($token, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDigitalwallettokentransitionsTokenAsync
     *
     * Retrieve digital wallet token transition
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT) transition. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokentransitionsTokenAsync($token, $fields = null)
    {
        return $this->getDigitalwallettokentransitionsTokenAsyncWithHttpInfo($token, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDigitalwallettokentransitionsTokenAsyncWithHttpInfo
     *
     * Retrieve digital wallet token transition
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT) transition. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDigitalwallettokentransitionsTokenAsyncWithHttpInfo($token, $fields = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse';
        $request = $this->getDigitalwallettokentransitionsTokenRequest($token, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDigitalwallettokentransitionsToken'
     *
     * @param  string $token Unique identifier of the digital wallet token (DWT) transition. (required)
     * @param  string $fields Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDigitalwallettokentransitionsTokenRequest($token, $fields = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDigitalwallettokentransitionsToken'
            );
        }

        $resourcePath = '/digitalwallettokentransitions/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            if('form' === 'form' && is_array($fields)) {
                foreach($fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fields'] = $fields;
            }
        }


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsAndroidpay
     *
     * Create digital wallet token provisioning request for Google Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionRequest $digital_wallet_android_pay_provision_request digital_wallet_android_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse
     */
    public function postDigitalwalletprovisionrequestsAndroidpay($digital_wallet_android_pay_provision_request = null)
    {
        list($response) = $this->postDigitalwalletprovisionrequestsAndroidpayWithHttpInfo($digital_wallet_android_pay_provision_request);
        return $response;
    }

    /**
     * Operation postDigitalwalletprovisionrequestsAndroidpayWithHttpInfo
     *
     * Create digital wallet token provisioning request for Google Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionRequest $digital_wallet_android_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDigitalwalletprovisionrequestsAndroidpayWithHttpInfo($digital_wallet_android_pay_provision_request = null)
    {
        $request = $this->postDigitalwalletprovisionrequestsAndroidpayRequest($digital_wallet_android_pay_provision_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDigitalwalletprovisionrequestsAndroidpayAsync
     *
     * Create digital wallet token provisioning request for Google Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionRequest $digital_wallet_android_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsAndroidpayAsync($digital_wallet_android_pay_provision_request = null)
    {
        return $this->postDigitalwalletprovisionrequestsAndroidpayAsyncWithHttpInfo($digital_wallet_android_pay_provision_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsAndroidpayAsyncWithHttpInfo
     *
     * Create digital wallet token provisioning request for Google Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionRequest $digital_wallet_android_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsAndroidpayAsyncWithHttpInfo($digital_wallet_android_pay_provision_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionResponse';
        $request = $this->postDigitalwalletprovisionrequestsAndroidpayRequest($digital_wallet_android_pay_provision_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDigitalwalletprovisionrequestsAndroidpay'
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletAndroidPayProvisionRequest $digital_wallet_android_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDigitalwalletprovisionrequestsAndroidpayRequest($digital_wallet_android_pay_provision_request = null)
    {

        $resourcePath = '/digitalwalletprovisionrequests/androidpay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($digital_wallet_android_pay_provision_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($digital_wallet_android_pay_provision_request));
            } else {
                $httpBody = $digital_wallet_android_pay_provision_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsApplepay
     *
     * Create digital wallet token provisioning request for Apple Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletApplePayProvisionRequest $digital_wallet_apple_pay_provision_request digital_wallet_apple_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse
     */
    public function postDigitalwalletprovisionrequestsApplepay($digital_wallet_apple_pay_provision_request = null)
    {
        list($response) = $this->postDigitalwalletprovisionrequestsApplepayWithHttpInfo($digital_wallet_apple_pay_provision_request);
        return $response;
    }

    /**
     * Operation postDigitalwalletprovisionrequestsApplepayWithHttpInfo
     *
     * Create digital wallet token provisioning request for Apple Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletApplePayProvisionRequest $digital_wallet_apple_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDigitalwalletprovisionrequestsApplepayWithHttpInfo($digital_wallet_apple_pay_provision_request = null)
    {
        $request = $this->postDigitalwalletprovisionrequestsApplepayRequest($digital_wallet_apple_pay_provision_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDigitalwalletprovisionrequestsApplepayAsync
     *
     * Create digital wallet token provisioning request for Apple Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletApplePayProvisionRequest $digital_wallet_apple_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsApplepayAsync($digital_wallet_apple_pay_provision_request = null)
    {
        return $this->postDigitalwalletprovisionrequestsApplepayAsyncWithHttpInfo($digital_wallet_apple_pay_provision_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsApplepayAsyncWithHttpInfo
     *
     * Create digital wallet token provisioning request for Apple Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletApplePayProvisionRequest $digital_wallet_apple_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsApplepayAsyncWithHttpInfo($digital_wallet_apple_pay_provision_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletApplePayProvisionResponse';
        $request = $this->postDigitalwalletprovisionrequestsApplepayRequest($digital_wallet_apple_pay_provision_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDigitalwalletprovisionrequestsApplepay'
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletApplePayProvisionRequest $digital_wallet_apple_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDigitalwalletprovisionrequestsApplepayRequest($digital_wallet_apple_pay_provision_request = null)
    {

        $resourcePath = '/digitalwalletprovisionrequests/applepay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($digital_wallet_apple_pay_provision_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($digital_wallet_apple_pay_provision_request));
            } else {
                $httpBody = $digital_wallet_apple_pay_provision_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsSamsungpay
     *
     * Create digital wallet token provisioning request for Samsung Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionRequest $digital_wallet_samsung_pay_provision_request digital_wallet_samsung_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse
     */
    public function postDigitalwalletprovisionrequestsSamsungpay($digital_wallet_samsung_pay_provision_request = null)
    {
        list($response) = $this->postDigitalwalletprovisionrequestsSamsungpayWithHttpInfo($digital_wallet_samsung_pay_provision_request);
        return $response;
    }

    /**
     * Operation postDigitalwalletprovisionrequestsSamsungpayWithHttpInfo
     *
     * Create digital wallet token provisioning request for Samsung Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionRequest $digital_wallet_samsung_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDigitalwalletprovisionrequestsSamsungpayWithHttpInfo($digital_wallet_samsung_pay_provision_request = null)
    {
        $request = $this->postDigitalwalletprovisionrequestsSamsungpayRequest($digital_wallet_samsung_pay_provision_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDigitalwalletprovisionrequestsSamsungpayAsync
     *
     * Create digital wallet token provisioning request for Samsung Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionRequest $digital_wallet_samsung_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsSamsungpayAsync($digital_wallet_samsung_pay_provision_request = null)
    {
        return $this->postDigitalwalletprovisionrequestsSamsungpayAsyncWithHttpInfo($digital_wallet_samsung_pay_provision_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsSamsungpayAsyncWithHttpInfo
     *
     * Create digital wallet token provisioning request for Samsung Wallet
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionRequest $digital_wallet_samsung_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsSamsungpayAsyncWithHttpInfo($digital_wallet_samsung_pay_provision_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionResponse';
        $request = $this->postDigitalwalletprovisionrequestsSamsungpayRequest($digital_wallet_samsung_pay_provision_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDigitalwalletprovisionrequestsSamsungpay'
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletSamsungPayProvisionRequest $digital_wallet_samsung_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDigitalwalletprovisionrequestsSamsungpayRequest($digital_wallet_samsung_pay_provision_request = null)
    {

        $resourcePath = '/digitalwalletprovisionrequests/samsungpay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($digital_wallet_samsung_pay_provision_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($digital_wallet_samsung_pay_provision_request));
            } else {
                $httpBody = $digital_wallet_samsung_pay_provision_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsXPay
     *
     * Create digital wallet token provisioning request for XPay
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletXPayProvisionRequest $digital_wallet_x_pay_provision_request digital_wallet_x_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse
     */
    public function postDigitalwalletprovisionrequestsXPay($digital_wallet_x_pay_provision_request = null)
    {
        list($response) = $this->postDigitalwalletprovisionrequestsXPayWithHttpInfo($digital_wallet_x_pay_provision_request);
        return $response;
    }

    /**
     * Operation postDigitalwalletprovisionrequestsXPayWithHttpInfo
     *
     * Create digital wallet token provisioning request for XPay
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletXPayProvisionRequest $digital_wallet_x_pay_provision_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDigitalwalletprovisionrequestsXPayWithHttpInfo($digital_wallet_x_pay_provision_request = null)
    {
        $request = $this->postDigitalwalletprovisionrequestsXPayRequest($digital_wallet_x_pay_provision_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDigitalwalletprovisionrequestsXPayAsync
     *
     * Create digital wallet token provisioning request for XPay
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletXPayProvisionRequest $digital_wallet_x_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsXPayAsync($digital_wallet_x_pay_provision_request = null)
    {
        return $this->postDigitalwalletprovisionrequestsXPayAsyncWithHttpInfo($digital_wallet_x_pay_provision_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDigitalwalletprovisionrequestsXPayAsyncWithHttpInfo
     *
     * Create digital wallet token provisioning request for XPay
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletXPayProvisionRequest $digital_wallet_x_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwalletprovisionrequestsXPayAsyncWithHttpInfo($digital_wallet_x_pay_provision_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletXPayProvisionResponse';
        $request = $this->postDigitalwalletprovisionrequestsXPayRequest($digital_wallet_x_pay_provision_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDigitalwalletprovisionrequestsXPay'
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletXPayProvisionRequest $digital_wallet_x_pay_provision_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDigitalwalletprovisionrequestsXPayRequest($digital_wallet_x_pay_provision_request = null)
    {

        $resourcePath = '/digitalwalletprovisionrequests/xpay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($digital_wallet_x_pay_provision_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($digital_wallet_x_pay_provision_request));
            } else {
                $httpBody = $digital_wallet_x_pay_provision_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDigitalwallettokentransitions
     *
     * Create digital wallet token transition
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletTokenTransitionRequest $digital_wallet_token_transition_request digital_wallet_token_transition_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse
     */
    public function postDigitalwallettokentransitions($digital_wallet_token_transition_request = null)
    {
        list($response) = $this->postDigitalwallettokentransitionsWithHttpInfo($digital_wallet_token_transition_request);
        return $response;
    }

    /**
     * Operation postDigitalwallettokentransitionsWithHttpInfo
     *
     * Create digital wallet token transition
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletTokenTransitionRequest $digital_wallet_token_transition_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDigitalwallettokentransitionsWithHttpInfo($digital_wallet_token_transition_request = null)
    {
        $request = $this->postDigitalwallettokentransitionsRequest($digital_wallet_token_transition_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDigitalwallettokentransitionsAsync
     *
     * Create digital wallet token transition
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletTokenTransitionRequest $digital_wallet_token_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwallettokentransitionsAsync($digital_wallet_token_transition_request = null)
    {
        return $this->postDigitalwallettokentransitionsAsyncWithHttpInfo($digital_wallet_token_transition_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDigitalwallettokentransitionsAsyncWithHttpInfo
     *
     * Create digital wallet token transition
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletTokenTransitionRequest $digital_wallet_token_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDigitalwallettokentransitionsAsyncWithHttpInfo($digital_wallet_token_transition_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DigitalWalletTokenTransitionResponse';
        $request = $this->postDigitalwallettokentransitionsRequest($digital_wallet_token_transition_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDigitalwallettokentransitions'
     *
     * @param  \OpenAPI\Client\Model\DigitalWalletTokenTransitionRequest $digital_wallet_token_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDigitalwallettokentransitionsRequest($digital_wallet_token_transition_request = null)
    {

        $resourcePath = '/digitalwallettokentransitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($digital_wallet_token_transition_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($digital_wallet_token_transition_request));
            } else {
                $httpBody = $digital_wallet_token_transition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendOPCDataToGooglePay
     *
     * Create request for Google Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\SendingProvisioningDataToGooglePayBackendRequest $sending_provisioning_data_to_google_pay_backend_request sending_provisioning_data_to_google_pay_backend_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendOPCDataToGooglePay($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
    {
        $this->sendOPCDataToGooglePayWithHttpInfo($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request);
    }

    /**
     * Operation sendOPCDataToGooglePayWithHttpInfo
     *
     * Create request for Google Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\SendingProvisioningDataToGooglePayBackendRequest $sending_provisioning_data_to_google_pay_backend_request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendOPCDataToGooglePayWithHttpInfo($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
    {
        $request = $this->sendOPCDataToGooglePayRequest($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessageFromWebPushProvisioningRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendOPCDataToGooglePayAsync
     *
     * Create request for Google Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\SendingProvisioningDataToGooglePayBackendRequest $sending_provisioning_data_to_google_pay_backend_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOPCDataToGooglePayAsync($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
    {
        return $this->sendOPCDataToGooglePayAsyncWithHttpInfo($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendOPCDataToGooglePayAsyncWithHttpInfo
     *
     * Create request for Google Wallet web push provisioning
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\SendingProvisioningDataToGooglePayBackendRequest $sending_provisioning_data_to_google_pay_backend_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendOPCDataToGooglePayAsyncWithHttpInfo($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
    {
        $returnType = '';
        $request = $this->sendOPCDataToGooglePayRequest($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendOPCDataToGooglePay'
     *
     * @param  string $req_sys_id Random pseudo-unique value used for troubleshooting between multiple parties. (required)
     * @param  \OpenAPI\Client\Model\SendingProvisioningDataToGooglePayBackendRequest $sending_provisioning_data_to_google_pay_backend_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendOPCDataToGooglePayRequest($req_sys_id, $sending_provisioning_data_to_google_pay_backend_request)
    {
        // verify the required parameter 'req_sys_id' is set
        if ($req_sys_id === null || (is_array($req_sys_id) && count($req_sys_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $req_sys_id when calling sendOPCDataToGooglePay'
            );
        }
        // verify the required parameter 'sending_provisioning_data_to_google_pay_backend_request' is set
        if ($sending_provisioning_data_to_google_pay_backend_request === null || (is_array($sending_provisioning_data_to_google_pay_backend_request) && count($sending_provisioning_data_to_google_pay_backend_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_provisioning_data_to_google_pay_backend_request when calling sendOPCDataToGooglePay'
            );
        }

        $resourcePath = '/digitalwallets/wpp/googlePayPushProvisioningNotification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($req_sys_id !== null) {
            $headerParams['req-sys-id'] = ObjectSerializer::toHeaderValue($req_sys_id);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($sending_provisioning_data_to_google_pay_backend_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sending_provisioning_data_to_google_pay_backend_request));
            } else {
                $httpBody = $sending_provisioning_data_to_google_pay_backend_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
