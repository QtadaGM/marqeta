<?php
/**
 * DirectDepositsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core API
 *
 * Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@marqeta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DirectDepositsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DirectDepositsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDirectdeposits
     *
     * Retrieves a list of all direct deposit records for your program.
     *
     * @param  int $count The number of direct deposit records to retrieve. (optional, default to 5)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  bool $reversed_after_grace_period Reversed after grace period (optional)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_state Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     * @param  string $start_settlement_date Start Settlement Date (optional)
     * @param  string $end_settlement_date End Settlement Date (optional)
     * @param  string $sort_by Sort order (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DirectDepositListResponse
     */
    public function getDirectdeposits($count = 5, $start_index = 0, $reversed_after_grace_period = null, $user_token = null, $business_token = null, $direct_deposit_state = null, $start_settlement_date = null, $end_settlement_date = null, $sort_by = '-lastModifiedTime')
    {
        list($response) = $this->getDirectdepositsWithHttpInfo($count, $start_index, $reversed_after_grace_period, $user_token, $business_token, $direct_deposit_state, $start_settlement_date, $end_settlement_date, $sort_by);
        return $response;
    }

    /**
     * Operation getDirectdepositsWithHttpInfo
     *
     * Retrieves a list of all direct deposit records for your program.
     *
     * @param  int $count The number of direct deposit records to retrieve. (optional, default to 5)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  bool $reversed_after_grace_period Reversed after grace period (optional)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_state Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     * @param  string $start_settlement_date Start Settlement Date (optional)
     * @param  string $end_settlement_date End Settlement Date (optional)
     * @param  string $sort_by Sort order (optional, default to '-lastModifiedTime')
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DirectDepositListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDirectdepositsWithHttpInfo($count = 5, $start_index = 0, $reversed_after_grace_period = null, $user_token = null, $business_token = null, $direct_deposit_state = null, $start_settlement_date = null, $end_settlement_date = null, $sort_by = '-lastModifiedTime')
    {
        $request = $this->getDirectdepositsRequest($count, $start_index, $reversed_after_grace_period, $user_token, $business_token, $direct_deposit_state, $start_settlement_date, $end_settlement_date, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DirectDepositListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DirectDepositListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DirectDepositListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DirectDepositListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDirectdepositsAsync
     *
     * Retrieves a list of all direct deposit records for your program.
     *
     * @param  int $count The number of direct deposit records to retrieve. (optional, default to 5)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  bool $reversed_after_grace_period Reversed after grace period (optional)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_state Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     * @param  string $start_settlement_date Start Settlement Date (optional)
     * @param  string $end_settlement_date End Settlement Date (optional)
     * @param  string $sort_by Sort order (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsAsync($count = 5, $start_index = 0, $reversed_after_grace_period = null, $user_token = null, $business_token = null, $direct_deposit_state = null, $start_settlement_date = null, $end_settlement_date = null, $sort_by = '-lastModifiedTime')
    {
        return $this->getDirectdepositsAsyncWithHttpInfo($count, $start_index, $reversed_after_grace_period, $user_token, $business_token, $direct_deposit_state, $start_settlement_date, $end_settlement_date, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDirectdepositsAsyncWithHttpInfo
     *
     * Retrieves a list of all direct deposit records for your program.
     *
     * @param  int $count The number of direct deposit records to retrieve. (optional, default to 5)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  bool $reversed_after_grace_period Reversed after grace period (optional)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_state Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     * @param  string $start_settlement_date Start Settlement Date (optional)
     * @param  string $end_settlement_date End Settlement Date (optional)
     * @param  string $sort_by Sort order (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsAsyncWithHttpInfo($count = 5, $start_index = 0, $reversed_after_grace_period = null, $user_token = null, $business_token = null, $direct_deposit_state = null, $start_settlement_date = null, $end_settlement_date = null, $sort_by = '-lastModifiedTime')
    {
        $returnType = '\OpenAPI\Client\Model\DirectDepositListResponse';
        $request = $this->getDirectdepositsRequest($count, $start_index, $reversed_after_grace_period, $user_token, $business_token, $direct_deposit_state, $start_settlement_date, $end_settlement_date, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDirectdeposits'
     *
     * @param  int $count The number of direct deposit records to retrieve. (optional, default to 5)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  bool $reversed_after_grace_period Reversed after grace period (optional)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_state Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     * @param  string $start_settlement_date Start Settlement Date (optional)
     * @param  string $end_settlement_date End Settlement Date (optional)
     * @param  string $sort_by Sort order (optional, default to '-lastModifiedTime')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDirectdepositsRequest($count = 5, $start_index = 0, $reversed_after_grace_period = null, $user_token = null, $business_token = null, $direct_deposit_state = null, $start_settlement_date = null, $end_settlement_date = null, $sort_by = '-lastModifiedTime')
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling DirectDepositsApi.getDirectdeposits, must be smaller than or equal to 100.');
        }


        $resourcePath = '/directdeposits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($reversed_after_grace_period !== null) {
            if('form' === 'form' && is_array($reversed_after_grace_period)) {
                foreach($reversed_after_grace_period as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['reversed_after_grace_period'] = $reversed_after_grace_period;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($business_token !== null) {
            if('form' === 'form' && is_array($business_token)) {
                foreach($business_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['business_token'] = $business_token;
            }
        }
        // query params
        if ($direct_deposit_state !== null) {
            if('form' === 'form' && is_array($direct_deposit_state)) {
                foreach($direct_deposit_state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['direct_deposit_state'] = $direct_deposit_state;
            }
        }
        // query params
        if ($start_settlement_date !== null) {
            if('form' === 'form' && is_array($start_settlement_date)) {
                foreach($start_settlement_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_settlement_date'] = $start_settlement_date;
            }
        }
        // query params
        if ($end_settlement_date !== null) {
            if('form' === 'form' && is_array($end_settlement_date)) {
                foreach($end_settlement_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_settlement_date'] = $end_settlement_date;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDirectdepositsAccountsUserorbusinesstoken
     *
     * Returns an account and routing number which can be used for direct deposit
     *
     * @param  string $user_or_business_token user_or_business_token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DepositAccount
     * @deprecated
     */
    public function getDirectdepositsAccountsUserorbusinesstoken($user_or_business_token)
    {
        list($response) = $this->getDirectdepositsAccountsUserorbusinesstokenWithHttpInfo($user_or_business_token);
        return $response;
    }

    /**
     * Operation getDirectdepositsAccountsUserorbusinesstokenWithHttpInfo
     *
     * Returns an account and routing number which can be used for direct deposit
     *
     * @param  string $user_or_business_token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DepositAccount, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getDirectdepositsAccountsUserorbusinesstokenWithHttpInfo($user_or_business_token)
    {
        $request = $this->getDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DepositAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DepositAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DepositAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DepositAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDirectdepositsAccountsUserorbusinesstokenAsync
     *
     * Returns an account and routing number which can be used for direct deposit
     *
     * @param  string $user_or_business_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getDirectdepositsAccountsUserorbusinesstokenAsync($user_or_business_token)
    {
        return $this->getDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo($user_or_business_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo
     *
     * Returns an account and routing number which can be used for direct deposit
     *
     * @param  string $user_or_business_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo($user_or_business_token)
    {
        $returnType = '\OpenAPI\Client\Model\DepositAccount';
        $request = $this->getDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDirectdepositsAccountsUserorbusinesstoken'
     *
     * @param  string $user_or_business_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token)
    {
        // verify the required parameter 'user_or_business_token' is set
        if ($user_or_business_token === null || (is_array($user_or_business_token) && count($user_or_business_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_business_token when calling getDirectdepositsAccountsUserorbusinesstoken'
            );
        }

        $resourcePath = '/directdeposits/accounts/{user_or_business_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_or_business_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_or_business_token' . '}',
                ObjectSerializer::toPathValue($user_or_business_token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDirectdepositsToken
     *
     * Returns a direct deposit entry
     *
     * @param  string $token token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DirectDepositResponse
     */
    public function getDirectdepositsToken($token)
    {
        list($response) = $this->getDirectdepositsTokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getDirectdepositsTokenWithHttpInfo
     *
     * Returns a direct deposit entry
     *
     * @param  string $token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DirectDepositResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDirectdepositsTokenWithHttpInfo($token)
    {
        $request = $this->getDirectdepositsTokenRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DirectDepositResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DirectDepositResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DirectDepositResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DirectDepositResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDirectdepositsTokenAsync
     *
     * Returns a direct deposit entry
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTokenAsync($token)
    {
        return $this->getDirectdepositsTokenAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDirectdepositsTokenAsyncWithHttpInfo
     *
     * Returns a direct deposit entry
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTokenAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\DirectDepositResponse';
        $request = $this->getDirectdepositsTokenRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDirectdepositsToken'
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDirectdepositsTokenRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDirectdepositsToken'
            );
        }

        $resourcePath = '/directdeposits/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDirectdepositsTransitions
     *
     * Returns a list of direct deposit transitions
     *
     * @param  int $count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_token Direct deposit token (optional)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  string $sort_by Sort order (optional, default to '-createdTime')
     * @param  string $states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DirectDepositTransitionListResponse
     */
    public function getDirectdepositsTransitions($count = 5, $user_token = null, $business_token = null, $direct_deposit_token = null, $start_index = 0, $sort_by = '-createdTime', $states = null)
    {
        list($response) = $this->getDirectdepositsTransitionsWithHttpInfo($count, $user_token, $business_token, $direct_deposit_token, $start_index, $sort_by, $states);
        return $response;
    }

    /**
     * Operation getDirectdepositsTransitionsWithHttpInfo
     *
     * Returns a list of direct deposit transitions
     *
     * @param  int $count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_token Direct deposit token (optional)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  string $sort_by Sort order (optional, default to '-createdTime')
     * @param  string $states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DirectDepositTransitionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDirectdepositsTransitionsWithHttpInfo($count = 5, $user_token = null, $business_token = null, $direct_deposit_token = null, $start_index = 0, $sort_by = '-createdTime', $states = null)
    {
        $request = $this->getDirectdepositsTransitionsRequest($count, $user_token, $business_token, $direct_deposit_token, $start_index, $sort_by, $states);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DirectDepositTransitionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DirectDepositTransitionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DirectDepositTransitionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDirectdepositsTransitionsAsync
     *
     * Returns a list of direct deposit transitions
     *
     * @param  int $count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_token Direct deposit token (optional)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  string $sort_by Sort order (optional, default to '-createdTime')
     * @param  string $states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTransitionsAsync($count = 5, $user_token = null, $business_token = null, $direct_deposit_token = null, $start_index = 0, $sort_by = '-createdTime', $states = null)
    {
        return $this->getDirectdepositsTransitionsAsyncWithHttpInfo($count, $user_token, $business_token, $direct_deposit_token, $start_index, $sort_by, $states)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDirectdepositsTransitionsAsyncWithHttpInfo
     *
     * Returns a list of direct deposit transitions
     *
     * @param  int $count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_token Direct deposit token (optional)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  string $sort_by Sort order (optional, default to '-createdTime')
     * @param  string $states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTransitionsAsyncWithHttpInfo($count = 5, $user_token = null, $business_token = null, $direct_deposit_token = null, $start_index = 0, $sort_by = '-createdTime', $states = null)
    {
        $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionListResponse';
        $request = $this->getDirectdepositsTransitionsRequest($count, $user_token, $business_token, $direct_deposit_token, $start_index, $sort_by, $states);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDirectdepositsTransitions'
     *
     * @param  int $count Number of direct deposit transitions to retrieve (optional, default to 5)
     * @param  string $user_token User token (optional)
     * @param  string $business_token Business token (optional)
     * @param  string $direct_deposit_token Direct deposit token (optional)
     * @param  int $start_index Start index (optional, default to 0)
     * @param  string $sort_by Sort order (optional, default to '-createdTime')
     * @param  string $states Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDirectdepositsTransitionsRequest($count = 5, $user_token = null, $business_token = null, $direct_deposit_token = null, $start_index = 0, $sort_by = '-createdTime', $states = null)
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling DirectDepositsApi.getDirectdepositsTransitions, must be smaller than or equal to 100.');
        }


        $resourcePath = '/directdeposits/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($user_token !== null) {
            if('form' === 'form' && is_array($user_token)) {
                foreach($user_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['user_token'] = $user_token;
            }
        }
        // query params
        if ($business_token !== null) {
            if('form' === 'form' && is_array($business_token)) {
                foreach($business_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['business_token'] = $business_token;
            }
        }
        // query params
        if ($direct_deposit_token !== null) {
            if('form' === 'form' && is_array($direct_deposit_token)) {
                foreach($direct_deposit_token as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['direct_deposit_token'] = $direct_deposit_token;
            }
        }
        // query params
        if ($start_index !== null) {
            if('form' === 'form' && is_array($start_index)) {
                foreach($start_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_index'] = $start_index;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }
        // query params
        if ($states !== null) {
            if('form' === 'form' && is_array($states)) {
                foreach($states as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['states'] = $states;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDirectdepositsTransitionsToken
     *
     * Returns a direct deposit transition
     *
     * @param  string $token token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DirectDepositTransitionResponse
     */
    public function getDirectdepositsTransitionsToken($token)
    {
        list($response) = $this->getDirectdepositsTransitionsTokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation getDirectdepositsTransitionsTokenWithHttpInfo
     *
     * Returns a direct deposit transition
     *
     * @param  string $token (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DirectDepositTransitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDirectdepositsTransitionsTokenWithHttpInfo($token)
    {
        $request = $this->getDirectdepositsTransitionsTokenRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DirectDepositTransitionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DirectDepositTransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DirectDepositTransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDirectdepositsTransitionsTokenAsync
     *
     * Returns a direct deposit transition
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTransitionsTokenAsync($token)
    {
        return $this->getDirectdepositsTransitionsTokenAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDirectdepositsTransitionsTokenAsyncWithHttpInfo
     *
     * Returns a direct deposit transition
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDirectdepositsTransitionsTokenAsyncWithHttpInfo($token)
    {
        $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionResponse';
        $request = $this->getDirectdepositsTransitionsTokenRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDirectdepositsTransitionsToken'
     *
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDirectdepositsTransitionsTokenRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getDirectdepositsTransitionsToken'
            );
        }

        $resourcePath = '/directdeposits/transitions/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDirectdepositsTransitions
     *
     * Creates a direct deposit transition
     *
     * @param  \OpenAPI\Client\Model\DirectDepositTransitionRequest $direct_deposit_transition_request direct_deposit_transition_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DirectDepositTransitionResponse
     */
    public function postDirectdepositsTransitions($direct_deposit_transition_request = null)
    {
        list($response) = $this->postDirectdepositsTransitionsWithHttpInfo($direct_deposit_transition_request);
        return $response;
    }

    /**
     * Operation postDirectdepositsTransitionsWithHttpInfo
     *
     * Creates a direct deposit transition
     *
     * @param  \OpenAPI\Client\Model\DirectDepositTransitionRequest $direct_deposit_transition_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DirectDepositTransitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDirectdepositsTransitionsWithHttpInfo($direct_deposit_transition_request = null)
    {
        $request = $this->postDirectdepositsTransitionsRequest($direct_deposit_transition_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DirectDepositTransitionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DirectDepositTransitionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DirectDepositTransitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDirectdepositsTransitionsAsync
     *
     * Creates a direct deposit transition
     *
     * @param  \OpenAPI\Client\Model\DirectDepositTransitionRequest $direct_deposit_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDirectdepositsTransitionsAsync($direct_deposit_transition_request = null)
    {
        return $this->postDirectdepositsTransitionsAsyncWithHttpInfo($direct_deposit_transition_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDirectdepositsTransitionsAsyncWithHttpInfo
     *
     * Creates a direct deposit transition
     *
     * @param  \OpenAPI\Client\Model\DirectDepositTransitionRequest $direct_deposit_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDirectdepositsTransitionsAsyncWithHttpInfo($direct_deposit_transition_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\DirectDepositTransitionResponse';
        $request = $this->postDirectdepositsTransitionsRequest($direct_deposit_transition_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDirectdepositsTransitions'
     *
     * @param  \OpenAPI\Client\Model\DirectDepositTransitionRequest $direct_deposit_transition_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDirectdepositsTransitionsRequest($direct_deposit_transition_request = null)
    {

        $resourcePath = '/directdeposits/transitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($direct_deposit_transition_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($direct_deposit_transition_request));
            } else {
                $httpBody = $direct_deposit_transition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDirectdepositsAccountsUserorbusinesstoken
     *
     * Updates a specific direct deposit account
     *
     * @param  string $user_or_business_token User or business token (required)
     * @param  \OpenAPI\Client\Model\DepositAccountUpdateRequest $deposit_account_update_request Deposit account update request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DepositAccount
     * @deprecated
     */
    public function putDirectdepositsAccountsUserorbusinesstoken($user_or_business_token, $deposit_account_update_request)
    {
        list($response) = $this->putDirectdepositsAccountsUserorbusinesstokenWithHttpInfo($user_or_business_token, $deposit_account_update_request);
        return $response;
    }

    /**
     * Operation putDirectdepositsAccountsUserorbusinesstokenWithHttpInfo
     *
     * Updates a specific direct deposit account
     *
     * @param  string $user_or_business_token User or business token (required)
     * @param  \OpenAPI\Client\Model\DepositAccountUpdateRequest $deposit_account_update_request Deposit account update request (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DepositAccount, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function putDirectdepositsAccountsUserorbusinesstokenWithHttpInfo($user_or_business_token, $deposit_account_update_request)
    {
        $request = $this->putDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token, $deposit_account_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DepositAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DepositAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DepositAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DepositAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putDirectdepositsAccountsUserorbusinesstokenAsync
     *
     * Updates a specific direct deposit account
     *
     * @param  string $user_or_business_token User or business token (required)
     * @param  \OpenAPI\Client\Model\DepositAccountUpdateRequest $deposit_account_update_request Deposit account update request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putDirectdepositsAccountsUserorbusinesstokenAsync($user_or_business_token, $deposit_account_update_request)
    {
        return $this->putDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo($user_or_business_token, $deposit_account_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo
     *
     * Updates a specific direct deposit account
     *
     * @param  string $user_or_business_token User or business token (required)
     * @param  \OpenAPI\Client\Model\DepositAccountUpdateRequest $deposit_account_update_request Deposit account update request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putDirectdepositsAccountsUserorbusinesstokenAsyncWithHttpInfo($user_or_business_token, $deposit_account_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\DepositAccount';
        $request = $this->putDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token, $deposit_account_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDirectdepositsAccountsUserorbusinesstoken'
     *
     * @param  string $user_or_business_token User or business token (required)
     * @param  \OpenAPI\Client\Model\DepositAccountUpdateRequest $deposit_account_update_request Deposit account update request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function putDirectdepositsAccountsUserorbusinesstokenRequest($user_or_business_token, $deposit_account_update_request)
    {
        // verify the required parameter 'user_or_business_token' is set
        if ($user_or_business_token === null || (is_array($user_or_business_token) && count($user_or_business_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_or_business_token when calling putDirectdepositsAccountsUserorbusinesstoken'
            );
        }
        // verify the required parameter 'deposit_account_update_request' is set
        if ($deposit_account_update_request === null || (is_array($deposit_account_update_request) && count($deposit_account_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deposit_account_update_request when calling putDirectdepositsAccountsUserorbusinesstoken'
            );
        }

        $resourcePath = '/directdeposits/accounts/{user_or_business_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_or_business_token !== null) {
            $resourcePath = str_replace(
                '{' . 'user_or_business_token' . '}',
                ObjectSerializer::toPathValue($user_or_business_token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($deposit_account_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($deposit_account_update_request));
            } else {
                $httpBody = $deposit_account_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
